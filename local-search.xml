<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ByteCTF 2024 RE WP</title>
    <link href="/2024/09/26/ByteCTF%20wp/"/>
    <url>/2024/09/26/ByteCTF%20wp/</url>
    
    <content type="html"><![CDATA[<h1 id="ByteCTF-2024-RE-WP"><a href="#ByteCTF-2024-RE-WP" class="headerlink" title="ByteCTF 2024 RE WP"></a>ByteCTF 2024 RE WP</h1><h2 id="babyapk"><a href="#babyapk" class="headerlink" title="babyapk"></a>babyapk</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要:"></a>概要:</h3><p>我们知道在使用flutter框架开发应用程序时，flutter使用的是dart语言，在运行时使用了dart虚拟机来执行dart代码，所以应用程序在启动时会对会对Dart代码创建一个快照，这样可以加速后续的启动时间和提高性能。其实这个快照就是预先编译好的dart代码的一部分，存储在so文件中。</p><p>在逆向flutter框架开发的应用程序时，仅仅解压.so文件是不行的，因为快照数据是以一种优化的形式存储的，需要使用专门的工具来解析这些.so文件中的dart快照数据，从而恢复应用程序的原始dart代码。</p><p>所以这个时候我们引入blutter，想要去得到最初的dart代码，以及也可以拿到有利于帮助我们在ida中对so文件进行分析的ida_scripts文件（其实比赛的时候reflutter和blutter都试过了）</p><p>但是两个都出了报错问题，网上也没有找到相应的解决办法，当时想的是可能出题人把里面的什么地方给动了，然后就卡了。</p><p>去试了很多方法，队友使用x64 Native Tools Command Prompt成功了</p><p>至今没有被解决的环境问题，会少一个frida脚本，但是总体不影响分析，就是没办法使用frida hook</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409250208153.png" alt="image-20240925020823043"></p><p>生成的文件如下</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409250210640.png" alt="image-20240925021025612"></p><p>打开main.dart</p><p>在void test中看到bytectf字样，直接定位</p><p>然后结合不同的指令最后跳转执行后的输出提示，</p><p>我们可以找到关键点</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-number">264</span>d28: r0 = m3N4B5V6()<br>       <span class="hljs-number">0x264d28</span>: bl              #<span class="hljs-number">0x265088</span>  ; [package:babyapk/src/rust/api/simple.dart] ::m3N4B5V6<br>     <span class="hljs-number">0x264d2c</span>: tbnz            w0, #<span class="hljs-number">4</span>, #<span class="hljs-number">0x264d44</span><br>     <span class="hljs-number">0x264d30</span>: r1 = <span class="hljs-string">&quot;You Got it!!!!&quot;</span><br></code></pre></td></tr></table></figure><p>发现这个方法在[package:babyapk&#x2F;src&#x2F;rust&#x2F;api&#x2F;simple.dart] 中，结合这个给的路径，我们找到simple.dart</p><p>如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// lib: , url: package:babyapk/src/rust/api/simple.dart</span><br><br><span class="hljs-comment">// class id: 1048594, size: 0x8</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> :: </span>&#123;<br><br>  <span class="hljs-keyword">static</span> _ m3N4B5V6(<span class="hljs-comment">/* No info */</span>) &#123;<br>    ** addr: <span class="hljs-number">0x265088</span>, size: <span class="hljs-number">0x98</span><br>    <span class="hljs-number">0x265088</span>: EnterFrame<br>        <span class="hljs-number">0x265088</span>: stp             fp, lr, [SP, #<span class="hljs-number">-0x10</span>]!<br>        <span class="hljs-number">0x26508c</span>: mov             fp, SP<br>    <span class="hljs-number">0x265090</span>: AllocStack(<span class="hljs-number">0x8</span>)<br>        <span class="hljs-number">0x265090</span>: sub             SP, SP, #<span class="hljs-number">8</span><br>    <span class="hljs-number">0x265094</span>: SetupParameters(<span class="hljs-built_in">dynamic</span> _ <span class="hljs-comment">/* r1 =&gt; r2, fp-0x8 */</span>)<br>        <span class="hljs-number">0x265094</span>: mov             x2, x1<br>        <span class="hljs-number">0x265098</span>: stur            x1, [fp, #<span class="hljs-number">-8</span>]<br>    <span class="hljs-number">0x26509c</span>: CheckStackOverflow<br>        <span class="hljs-number">0x26509c</span>: ldr             x16, [THR, #<span class="hljs-number">0x38</span>]  ; THR::stack_limit<br>        <span class="hljs-number">0x2650a0</span>: cmp             SP, x16<br>        <span class="hljs-number">0x2650a4</span>: b.ls            #<span class="hljs-number">0x265118</span><br>    <span class="hljs-number">0x2650a8</span>: r0 = InitLateStaticField(<span class="hljs-number">0x4d8</span>) <span class="hljs-comment">// [package:babyapk/src/rust/frb_generated.dart] RustLib::instance</span><br>        <span class="hljs-number">0x2650a8</span>: ldr             x0, [THR, #<span class="hljs-number">0x68</span>]  ; THR::field_table_values<br>        <span class="hljs-number">0x2650ac</span>: ldr             x0, [x0, #<span class="hljs-number">0x9b0</span>]<br>        <span class="hljs-number">0x2650b0</span>: ldr             x16, [PP, #<span class="hljs-number">0x40</span>]  ; [pp+<span class="hljs-number">0x40</span>] Sentinel<br>        <span class="hljs-number">0x2650b4</span>: cmp             w0, w16<br>        <span class="hljs-number">0x2650b8</span>: b.ne            #<span class="hljs-number">0x2650c8</span><br>        <span class="hljs-number">0x2650bc</span>: add             x2, PP, #<span class="hljs-number">8</span>, lsl #<span class="hljs-number">12</span>  ; [pp+<span class="hljs-number">0x8278</span>] Field &lt;RustLib.instance&gt;: <span class="hljs-keyword">static</span> <span class="hljs-keyword">late</span> <span class="hljs-keyword">final</span> (offset: <span class="hljs-number">0x4d8</span>)<br>        <span class="hljs-number">0x2650c0</span>: ldr             x2, [x2, #<span class="hljs-number">0x278</span>]<br>        <span class="hljs-number">0x2650c4</span>: bl              #<span class="hljs-number">0x3b9dc8</span><br>    <span class="hljs-number">0x2650c8</span>: LoadField: r1 = r0-&gt;field_b<br>        <span class="hljs-number">0x2650c8</span>: ldur            w1, [x0, #<span class="hljs-number">0xb</span>]<br>    <span class="hljs-number">0x2650cc</span>: DecompressPointer r1<br>        <span class="hljs-number">0x2650cc</span>: add             x1, x1, HEAP, lsl #<span class="hljs-number">32</span><br>    <span class="hljs-number">0x2650d0</span>: cmp             w1, NULL<br>    <span class="hljs-number">0x2650d4</span>: b.eq            #<span class="hljs-number">0x2650f8</span><br>    <span class="hljs-number">0x2650d8</span>: LoadField: r0 = r1-&gt;field_f<br>        <span class="hljs-number">0x2650d8</span>: ldur            w0, [x1, #<span class="hljs-number">0xf</span>]<br>    <span class="hljs-number">0x2650dc</span>: DecompressPointer r0<br>        <span class="hljs-number">0x2650dc</span>: add             x0, x0, HEAP, lsl #<span class="hljs-number">32</span><br>    <span class="hljs-number">0x2650e0</span>: mov             x1, x0<br>    <span class="hljs-number">0x2650e4</span>: ldur            x2, [fp, #<span class="hljs-number">-8</span>]<br>    <span class="hljs-number">0x2650e8</span>: r0 = crateApiSimpleM3N4B5V6()<br>        <span class="hljs-number">0x2650e8</span>: bl              #<span class="hljs-number">0x26519c</span>  ; [package:babyapk/src/rust/frb_generated.dart] RustLibApiImpl::crateApiSimpleM3N4B5V6<br>    <span class="hljs-number">0x2650ec</span>: LeaveFrame<br>        <span class="hljs-number">0x2650ec</span>: mov             SP, fp<br>        <span class="hljs-number">0x2650f0</span>: ldp             fp, lr, [SP], #<span class="hljs-number">0x10</span><br>    <span class="hljs-number">0x2650f4</span>: ret<br>        <span class="hljs-number">0x2650f4</span>: ret             <br>    <span class="hljs-number">0x2650f8</span>: r0 = StateError()<br>        <span class="hljs-number">0x2650f8</span>: bl              #<span class="hljs-number">0x188914</span>  ; AllocateStateErrorStub -&gt; StateError (size=<span class="hljs-number">0x10</span>)<br>    <span class="hljs-number">0x2650fc</span>: mov             x1, x0<br>    <span class="hljs-number">0x265100</span>: r0 = <span class="hljs-string">&quot;flutter_rust_bridge has not been initialized. Did you forget to call `await RustLib.init();`\? (If you have configured a different lib name, change `RustLib` to your name.)&quot;</span><br>        <span class="hljs-number">0x265100</span>: add             x0, PP, #<span class="hljs-number">8</span>, lsl #<span class="hljs-number">12</span>  ; [pp+<span class="hljs-number">0x8420</span>] <span class="hljs-string">&quot;flutter_rust_bridge has not been initialized. Did you forget to call `await RustLib.init();`\? (If you have configured a different lib name, change `RustLib` to your name.)&quot;</span><br>        <span class="hljs-number">0x265104</span>: ldr             x0, [x0, #<span class="hljs-number">0x420</span>]<br>    <span class="hljs-number">0x265108</span>: StoreField: r1-&gt;field_b = r0<br>        <span class="hljs-number">0x265108</span>: stur            w0, [x1, #<span class="hljs-number">0xb</span>]<br>    <span class="hljs-number">0x26510c</span>: mov             x0, x1<br>    <span class="hljs-number">0x265110</span>: r0 = Throw()<br>        <span class="hljs-number">0x265110</span>: bl              #<span class="hljs-number">0x3b9f2c</span>  ; ThrowStub<br>    <span class="hljs-number">0x265114</span>: brk             #<span class="hljs-number">0</span><br>    <span class="hljs-number">0x265118</span>: r0 = StackOverflowSharedWithoutFPURegs()<br>        <span class="hljs-number">0x265118</span>: bl              #<span class="hljs-number">0x3bbe84</span>  ; StackOverflowSharedWithoutFPURegsStub<br>    <span class="hljs-number">0x26511c</span>: b               #<span class="hljs-number">0x2650a8</span><br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>继续找到关键点(从函数名中也可看出)</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 0x2650e8: r0 = crateApiSimpleM3N4B5V6()</span><br>    <span class="hljs-comment">//     0x2650e8: bl              #0x26519c  ; [package:babyapk/src/rust/frb_generated.dart] </span><br><br></code></pre></td></tr></table></figure><p>所以我们继续打开frb_generated.dart</p><p>找到对应处</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs dart">crateApiSimpleM3N4B5V6(<span class="hljs-comment">/* No info */</span>) &#123;<br>    ** addr: <span class="hljs-number">0x26519c</span>, size: <span class="hljs-number">0xf0</span><br>    <span class="hljs-number">0x26519c</span>: EnterFrame<br>        <span class="hljs-number">0x26519c</span>: stp             fp, lr, [SP, #<span class="hljs-number">-0x10</span>]!<br>        <span class="hljs-number">0x2651a0</span>: mov             fp, SP<br>    <span class="hljs-number">0x2651a4</span>: AllocStack(<span class="hljs-number">0x40</span>)<br>        <span class="hljs-number">0x2651a4</span>: sub             SP, SP, #<span class="hljs-number">0x40</span><br>    <span class="hljs-number">0x2651a8</span>: SetupParameters(RustLibApiImpl <span class="hljs-keyword">this</span> <span class="hljs-comment">/* r1 =&gt; r0, fp-0x8 */</span>, <span class="hljs-built_in">dynamic</span> _ <span class="hljs-comment">/* r2 =&gt; r2, fp-0x10 */</span>)<br>        <span class="hljs-number">0x2651a8</span>: mov             x0, x1<br>        <span class="hljs-number">0x2651ac</span>: stur            x1, [fp, #<span class="hljs-number">-8</span>]<br>        <span class="hljs-number">0x2651b0</span>: stur            x2, [fp, #<span class="hljs-number">-0x10</span>]<br>    <span class="hljs-number">0x2651b4</span>: CheckStackOverflow<br>        <span class="hljs-number">0x2651b4</span>: ldr             x16, [THR, #<span class="hljs-number">0x38</span>]  ; THR::stack_limit<br>        <span class="hljs-number">0x2651b8</span>: cmp             SP, x16<br>        <span class="hljs-number">0x2651bc</span>: b.ls            #<span class="hljs-number">0x265284</span><br>    <span class="hljs-number">0x2651c0</span>: r1 = <span class="hljs-number">2</span><br>        <span class="hljs-number">0x2651c0</span>: movz            x1, #<span class="hljs-number">0x2</span><br>    <span class="hljs-number">0x2651c4</span>: r0 = AllocateContext()<br>        <span class="hljs-number">0x2651c4</span>: bl              #<span class="hljs-number">0x3bace0</span>  ; AllocateContextStub<br>    <span class="hljs-number">0x2651c8</span>: mov             x3, x0<br>    <span class="hljs-number">0x2651cc</span>: ldur            x0, [fp, #<span class="hljs-number">-8</span>]<br>    <span class="hljs-number">0x2651d0</span>: stur            x3, [fp, #<span class="hljs-number">-0x18</span>]<br>    <span class="hljs-number">0x2651d4</span>: StoreField: r3-&gt;field_f = r0<br>        <span class="hljs-number">0x2651d4</span>: stur            w0, [x3, #<span class="hljs-number">0xf</span>]<br>    <span class="hljs-number">0x2651d8</span>: ldur            x1, [fp, #<span class="hljs-number">-0x10</span>]<br>    <span class="hljs-number">0x2651dc</span>: StoreField: r3-&gt;field_13 = r1<br>        <span class="hljs-number">0x2651dc</span>: stur            w1, [x3, #<span class="hljs-number">0x13</span>]<br>    <span class="hljs-number">0x2651e0</span>: LoadField: r4 = r0-&gt;field_b<br>        <span class="hljs-number">0x2651e0</span>: ldur            w4, [x0, #<span class="hljs-number">0xb</span>]<br>    <span class="hljs-number">0x2651e4</span>: DecompressPointer r4<br>        <span class="hljs-number">0x2651e4</span>: add             x4, x4, HEAP, lsl #<span class="hljs-number">32</span><br>    <span class="hljs-number">0x2651e8</span>: mov             x2, x0<br>    <span class="hljs-number">0x2651ec</span>: stur            x4, [fp, #<span class="hljs-number">-0x10</span>]<br>    <span class="hljs-number">0x2651f0</span>: r1 = <span class="hljs-built_in">Function</span> <span class="hljs-string">&#x27;sse_decode_bool&#x27;</span>:.<br>        <span class="hljs-number">0x2651f0</span>: add             x1, PP, #<span class="hljs-number">0xd</span>, lsl #<span class="hljs-number">12</span>  ; [pp+<span class="hljs-number">0xd058</span>] AnonymousClosure: (<span class="hljs-number">0x267bdc</span>), <span class="hljs-keyword">in</span> [package:babyapk/src/rust/frb_generated.dart] RustLibApiImpl::sse_decode_bool (<span class="hljs-number">0x267c18</span>)<br>        <span class="hljs-number">0x2651f4</span>: ldr             x1, [x1, #<span class="hljs-number">0x58</span>]<br>    <span class="hljs-number">0x2651f8</span>: r0 = AllocateClosure()<br>        <span class="hljs-number">0x2651f8</span>: bl              #<span class="hljs-number">0x3bb0a4</span>  ; AllocateClosureStub<br>    <span class="hljs-number">0x2651fc</span>: r1 = &lt;<span class="hljs-built_in">bool</span>, <span class="hljs-built_in">Object</span>, WireSyncRust2DartSse, <span class="hljs-built_in">bool</span>, <span class="hljs-built_in">Object</span>&gt;<br>        <span class="hljs-number">0x2651fc</span>: add             x1, PP, #<span class="hljs-number">0xd</span>, lsl #<span class="hljs-number">12</span>  ; [pp+<span class="hljs-number">0xd060</span>] TypeArguments: &lt;<span class="hljs-built_in">bool</span>, <span class="hljs-built_in">Object</span>, WireSyncRust2DartSse, <span class="hljs-built_in">bool</span>, <span class="hljs-built_in">Object</span>&gt;<br>        <span class="hljs-number">0x265200</span>: ldr             x1, [x1, #<span class="hljs-number">0x60</span>]<br>    <span class="hljs-number">0x265204</span>: stur            x0, [fp, #<span class="hljs-number">-0x20</span>]<br>    <span class="hljs-number">0x265208</span>: r0 = SseCodec()<br>        <span class="hljs-number">0x265208</span>: bl              #<span class="hljs-number">0x26634c</span>  ; AllocateSseCodecStub -&gt; SseCodec&lt;C3X0, C3X1&gt; (size=<span class="hljs-number">0x14</span>)<br>    <span class="hljs-number">0x26520c</span>: mov             x3, x0<br>    <span class="hljs-number">0x265210</span>: ldur            x0, [fp, #<span class="hljs-number">-0x20</span>]<br>    <span class="hljs-number">0x265214</span>: stur            x3, [fp, #<span class="hljs-number">-0x28</span>]<br>    <span class="hljs-number">0x265218</span>: StoreField: r3-&gt;field_b = r0<br>        <span class="hljs-number">0x265218</span>: stur            w0, [x3, #<span class="hljs-number">0xb</span>]<br>    <span class="hljs-number">0x26521c</span>: ldur            x2, [fp, #<span class="hljs-number">-0x18</span>]<br>    <span class="hljs-number">0x265220</span>: r1 = <span class="hljs-built_in">Function</span> <span class="hljs-string">&#x27;&lt;anonymous closure&gt;&#x27;</span>:.<br>        <span class="hljs-number">0x265220</span>: add             x1, PP, #<span class="hljs-number">0xd</span>, lsl #<span class="hljs-number">12</span>  ; [pp+<span class="hljs-number">0xd068</span>] AnonymousClosure: (<span class="hljs-number">0x266358</span>), <span class="hljs-keyword">in</span> [package:babyapk/src/rust/frb_generated.dart] RustLibApiImpl::crateApiSimpleM3N4B5V6 (<span class="hljs-number">0x26519c</span>)<br>        <span class="hljs-number">0x265224</span>: ldr             x1, [x1, #<span class="hljs-number">0x68</span>]<br>    <span class="hljs-number">0x265228</span>: r0 = AllocateClosure()<br>        <span class="hljs-number">0x265228</span>: bl              #<span class="hljs-number">0x3bb0a4</span>  ; AllocateClosureStub<br>    <span class="hljs-number">0x26522c</span>: r1 = &lt;<span class="hljs-built_in">bool</span>, <span class="hljs-built_in">Object</span>, WireSyncRust2DartSse&gt;<br>        <span class="hljs-number">0x26522c</span>: add             x1, PP, #<span class="hljs-number">0xd</span>, lsl #<span class="hljs-number">12</span>  ; [pp+<span class="hljs-number">0xd070</span>] TypeArguments: &lt;<span class="hljs-built_in">bool</span>, <span class="hljs-built_in">Object</span>, WireSyncRust2DartSse&gt;<br>        <span class="hljs-number">0x265230</span>: ldr             x1, [x1, #<span class="hljs-number">0x70</span>]<br>    <span class="hljs-number">0x265234</span>: stur            x0, [fp, #<span class="hljs-number">-0x18</span>]<br>    <span class="hljs-number">0x265238</span>: r0 = SyncTask()<br>        <span class="hljs-number">0x265238</span>: bl              #<span class="hljs-number">0x266340</span>  ; AllocateSyncTaskStub -&gt; SyncTask&lt;X0, X1, X2&gt; (size=<span class="hljs-number">0x18</span>)<br>    <span class="hljs-number">0x26523c</span>: mov             x1, x0<br>    <span class="hljs-number">0x265240</span>: ldur            x0, [fp, #<span class="hljs-number">-0x18</span>]<br>    <span class="hljs-number">0x265244</span>: StoreField: r1-&gt;field_13 = r0<br>        <span class="hljs-number">0x265244</span>: stur            w0, [x1, #<span class="hljs-number">0x13</span>]<br>    <span class="hljs-number">0x265248</span>: ldur            x0, [fp, #<span class="hljs-number">-0x28</span>]<br>    <span class="hljs-number">0x26524c</span>: StoreField: r1-&gt;field_b = r0<br>        <span class="hljs-number">0x26524c</span>: stur            w0, [x1, #<span class="hljs-number">0xb</span>]<br>    <span class="hljs-number">0x265250</span>: ldur            x0, [fp, #<span class="hljs-number">-8</span>]<br>    <span class="hljs-number">0x265254</span>: StoreField: r1-&gt;field_f = r0<br>        <span class="hljs-number">0x265254</span>: stur            w0, [x1, #<span class="hljs-number">0xf</span>]<br>    <span class="hljs-number">0x265258</span>: r16 = &lt;<span class="hljs-built_in">bool</span>, <span class="hljs-built_in">Object</span>, WireSyncRust2DartSse&gt;<br>        <span class="hljs-number">0x265258</span>: add             x16, PP, #<span class="hljs-number">0xd</span>, lsl #<span class="hljs-number">12</span>  ; [pp+<span class="hljs-number">0xd070</span>] TypeArguments: &lt;<span class="hljs-built_in">bool</span>, <span class="hljs-built_in">Object</span>, WireSyncRust2DartSse&gt;<br>        <span class="hljs-number">0x26525c</span>: ldr             x16, [x16, #<span class="hljs-number">0x70</span>]<br>    <span class="hljs-number">0x265260</span>: ldur            lr, [fp, #<span class="hljs-number">-0x10</span>]<br>    <span class="hljs-number">0x265264</span>: stp             lr, x16, [SP, #<span class="hljs-number">8</span>]<br>    <span class="hljs-number">0x265268</span>: str             x1, [SP]<br>    <span class="hljs-number">0x26526c</span>: r4 = <span class="hljs-keyword">const</span> [<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x2</span>, <span class="hljs-keyword">null</span>]<br>        <span class="hljs-number">0x26526c</span>: add             x4, PP, #<span class="hljs-number">0xd</span>, lsl #<span class="hljs-number">12</span>  ; [pp+<span class="hljs-number">0xd078</span>] <span class="hljs-built_in">List</span>(<span class="hljs-number">5</span>) [<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x2</span>, <span class="hljs-built_in">Null</span>]<br>        <span class="hljs-number">0x265270</span>: ldr             x4, [x4, #<span class="hljs-number">0x78</span>]<br>    <span class="hljs-number">0x265274</span>: r0 = executeSync()<br>        <span class="hljs-number">0x265274</span>: bl              #<span class="hljs-number">0x2652ac</span>  ; [package:flutter_rust_bridge/src/main_components/handler.dart] BaseHandler::executeSync<br>    <span class="hljs-number">0x265278</span>: LeaveFrame<br>        <span class="hljs-number">0x265278</span>: mov             SP, fp<br>        <span class="hljs-number">0x26527c</span>: ldp             fp, lr, [SP], #<span class="hljs-number">0x10</span><br>    <span class="hljs-number">0x265280</span>: ret<br>        <span class="hljs-number">0x265280</span>: ret             <br>    <span class="hljs-number">0x265284</span>: r0 = StackOverflowSharedWithoutFPURegs()<br>        <span class="hljs-number">0x265284</span>: bl              #<span class="hljs-number">0x3bbe84</span>  ; StackOverflowSharedWithoutFPURegsStub<br>    <span class="hljs-number">0x265288</span>: b               #<span class="hljs-number">0x2651c0</span><br></code></pre></td></tr></table></figure><p>根据这里其实都是在进行与rust库的交互操作，到这个地方其实可以直接去librust_lib_babyapk.so文件中找找了</p><p>直接去字符串里面找api字样</p><p>得到</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409250228068.png" alt="image-20240925022837030"></p><p>然后即找到正确的加密函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">sub_3AEE0</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> __int8 *a1, __int64 a2)</span><br>&#123;<br>  __int64 v2; <span class="hljs-comment">// x9</span><br>  __int64 v3; <span class="hljs-comment">// x9</span><br>  __int64 v4; <span class="hljs-comment">// x9</span><br>  __int64 v5; <span class="hljs-comment">// x9</span><br>  __int64 v6; <span class="hljs-comment">// x9</span><br>  __int64 v7; <span class="hljs-comment">// x9</span><br>  __int64 v8; <span class="hljs-comment">// x9</span><br>  __int64 v9; <span class="hljs-comment">// x9</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v10; <span class="hljs-comment">// w11</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// w13</span><br>  __int64 v12; <span class="hljs-comment">// x9</span><br>  __int64 v13; <span class="hljs-comment">// x9</span><br>  __int64 v14; <span class="hljs-comment">// x9</span><br>  __int64 v15; <span class="hljs-comment">// x9</span><br>  __int64 v16; <span class="hljs-comment">// x9</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v18; <span class="hljs-comment">// w10</span><br>  <span class="hljs-type">int</span> v19; <span class="hljs-comment">// w13</span><br>  __int64 v20; <span class="hljs-comment">// x9</span><br>  __int64 v21; <span class="hljs-comment">// x9</span><br>  __int64 v22; <span class="hljs-comment">// x9</span><br>  __int64 v23; <span class="hljs-comment">// x9</span><br>  __int64 v24; <span class="hljs-comment">// x9</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v25; <span class="hljs-comment">// w10</span><br>  <span class="hljs-type">int</span> v26; <span class="hljs-comment">// w13</span><br>  __int64 v27; <span class="hljs-comment">// x9</span><br>  __int64 v28; <span class="hljs-comment">// x9</span><br>  __int64 v29; <span class="hljs-comment">// x9</span><br>  __int64 v30; <span class="hljs-comment">// x9</span><br>  __int64 v31; <span class="hljs-comment">// x9</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v32; <span class="hljs-comment">// w8</span><br>  <span class="hljs-type">int</span> v33; <span class="hljs-comment">// w11</span><br>  <span class="hljs-type">unsigned</span> __int64 v34; <span class="hljs-comment">// x20</span><br>  __int64 v35; <span class="hljs-comment">// x21</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v36; <span class="hljs-comment">// w22</span><br>  <span class="hljs-type">int</span> v37; <span class="hljs-comment">// w8</span><br>  __int64 v38; <span class="hljs-comment">// x10</span><br>  <span class="hljs-type">int</span> v39; <span class="hljs-comment">// w9</span><br>  <span class="hljs-type">unsigned</span> __int64 v40; <span class="hljs-comment">// x8</span><br>  __int64 v41; <span class="hljs-comment">// x9</span><br>  <span class="hljs-type">unsigned</span> __int64 v42; <span class="hljs-comment">// x10</span><br>  <span class="hljs-type">unsigned</span> __int64 v43; <span class="hljs-comment">// x8</span><br>  <span class="hljs-type">int</span> v44; <span class="hljs-comment">// w12</span><br>  <span class="hljs-type">int</span> v45; <span class="hljs-comment">// w14</span><br>  <span class="hljs-type">int</span> v46; <span class="hljs-comment">// w3</span><br>  <span class="hljs-type">int</span> v47; <span class="hljs-comment">// w13</span><br>  <span class="hljs-type">int</span> v48; <span class="hljs-comment">// w2</span><br>  <span class="hljs-type">int</span> v49; <span class="hljs-comment">// w16</span><br>  <span class="hljs-type">int</span> v50; <span class="hljs-comment">// w15</span><br>  <span class="hljs-type">int</span> v51; <span class="hljs-comment">// w17</span><br>  <span class="hljs-type">int</span> v52; <span class="hljs-comment">// w6</span><br>  <span class="hljs-type">int</span> v53; <span class="hljs-comment">// w4</span><br>  <span class="hljs-type">int</span> v54; <span class="hljs-comment">// w12</span><br>  <span class="hljs-type">int</span> *v55; <span class="hljs-comment">// x13</span><br>  __int64 v57; <span class="hljs-comment">// [xsp+8h] [xbp-48h] BYREF</span><br>  __int64 v58; <span class="hljs-comment">// [xsp+10h] [xbp-40h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v59; <span class="hljs-comment">// [xsp+18h] [xbp-38h]</span><br><br>  v57 = <span class="hljs-number">0LL</span>;<br>  v58 = <span class="hljs-number">4LL</span>;<br>  <span class="hljs-keyword">if</span> ( a2 != <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v2 = byte_18E46[*a1];<br>  <span class="hljs-keyword">if</span> ( v2 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v3 = byte_18E46[a1[v2]] + v2;<br>  <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v4 = v3 + byte_18E46[a1[v3]];<br>  <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v5 = v4 + byte_18E46[a1[v4]];<br>  <span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v6 = v5 + byte_18E46[a1[v5]];<br>  <span class="hljs-keyword">if</span> ( v6 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v7 = v6 + byte_18E46[a1[v6]];<br>  <span class="hljs-keyword">if</span> ( v7 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v8 = v7 + byte_18E46[a1[v7]];<br>  <span class="hljs-keyword">if</span> ( v8 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v9 = v8 + byte_18E46[a1[v8]];<br>  <span class="hljs-keyword">if</span> ( v9 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v10 = a1[v9];<br>  <span class="hljs-keyword">if</span> ( (a1[v9] &amp; <span class="hljs-number">0x80000000</span>) != <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v10 &lt; <span class="hljs-number">0xE0</span> )<br>    &#123;<br>      v10 = a1[v9 + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3F</span> | ((v10 &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">6</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v11 = a1[v9 + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x3F</span> | ((a1[v9 + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">6</span>);<br>      <span class="hljs-keyword">if</span> ( v10 &lt; <span class="hljs-number">0xF0</span> )<br>        v10 = v11 | ((v10 &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">12</span>);<br>      <span class="hljs-keyword">else</span><br>        v10 = a1[v9 + <span class="hljs-number">3</span>] &amp; <span class="hljs-number">0x3F</span> | (v11 &lt;&lt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0xFFE3FFFF</span> | ((v10 &amp; <span class="hljs-number">7</span>) &lt;&lt; <span class="hljs-number">18</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v10 != <span class="hljs-number">45</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v12 = v9 + byte_18E46[a1[v9]];<br>  <span class="hljs-keyword">if</span> ( v12 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v13 = v12 + byte_18E46[a1[v12]];<br>  <span class="hljs-keyword">if</span> ( v13 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v14 = v13 + byte_18E46[a1[v13]];<br>  <span class="hljs-keyword">if</span> ( v14 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v15 = v14 + byte_18E46[a1[v14]];<br>  <span class="hljs-keyword">if</span> ( v15 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v16 = v15 + byte_18E46[a1[v15]];<br>  <span class="hljs-keyword">if</span> ( v16 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v18 = a1[v16];<br>  <span class="hljs-keyword">if</span> ( (a1[v16] &amp; <span class="hljs-number">0x80000000</span>) != <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v18 &lt; <span class="hljs-number">0xE0</span> )<br>    &#123;<br>      v18 = a1[v16 + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3F</span> | ((v18 &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">6</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v19 = a1[v16 + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x3F</span> | ((a1[v16 + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">6</span>);<br>      <span class="hljs-keyword">if</span> ( v18 &lt; <span class="hljs-number">0xF0</span> )<br>        v18 = v19 | ((v18 &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">12</span>);<br>      <span class="hljs-keyword">else</span><br>        v18 = a1[v16 + <span class="hljs-number">3</span>] &amp; <span class="hljs-number">0x3F</span> | (v19 &lt;&lt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0xFFE3FFFF</span> | ((v18 &amp; <span class="hljs-number">7</span>) &lt;&lt; <span class="hljs-number">18</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v18 != <span class="hljs-number">45</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v20 = v16 + byte_18E46[a1[v16]];<br>  <span class="hljs-keyword">if</span> ( v20 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v21 = v20 + byte_18E46[a1[v20]];<br>  <span class="hljs-keyword">if</span> ( v21 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v22 = v21 + byte_18E46[a1[v21]];<br>  <span class="hljs-keyword">if</span> ( v22 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v23 = v22 + byte_18E46[a1[v22]];<br>  <span class="hljs-keyword">if</span> ( v23 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v24 = v23 + byte_18E46[a1[v23]];<br>  <span class="hljs-keyword">if</span> ( v24 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v25 = a1[v24];<br>  <span class="hljs-keyword">if</span> ( (a1[v24] &amp; <span class="hljs-number">0x80000000</span>) != <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v25 &lt; <span class="hljs-number">0xE0</span> )<br>    &#123;<br>      v25 = a1[v24 + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3F</span> | ((v25 &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">6</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v26 = a1[v24 + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x3F</span> | ((a1[v24 + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">6</span>);<br>      <span class="hljs-keyword">if</span> ( v25 &lt; <span class="hljs-number">0xF0</span> )<br>        v25 = v26 | ((v25 &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">12</span>);<br>      <span class="hljs-keyword">else</span><br>        v25 = a1[v24 + <span class="hljs-number">3</span>] &amp; <span class="hljs-number">0x3F</span> | (v26 &lt;&lt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0xFFE3FFFF</span> | ((v25 &amp; <span class="hljs-number">7</span>) &lt;&lt; <span class="hljs-number">18</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v25 != <span class="hljs-number">45</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v27 = v24 + byte_18E46[a1[v24]];<br>  <span class="hljs-keyword">if</span> ( v27 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v28 = v27 + byte_18E46[a1[v27]];<br>  <span class="hljs-keyword">if</span> ( v28 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v29 = v28 + byte_18E46[a1[v28]];<br>  <span class="hljs-keyword">if</span> ( v29 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v30 = v29 + byte_18E46[a1[v29]];<br>  <span class="hljs-keyword">if</span> ( v30 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v31 = v30 + byte_18E46[a1[v30]];<br>  <span class="hljs-keyword">if</span> ( v31 == <span class="hljs-number">36</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v32 = a1[v31];<br>  <span class="hljs-keyword">if</span> ( (a1[v31] &amp; <span class="hljs-number">0x80000000</span>) != <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v32 &lt; <span class="hljs-number">0xE0</span> )<br>    &#123;<br>      v32 = a1[v31 + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3F</span> | ((v32 &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">6</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v33 = a1[v31 + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x3F</span> | ((a1[v31 + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">6</span>);<br>      <span class="hljs-keyword">if</span> ( v32 &lt; <span class="hljs-number">0xF0</span> )<br>        v32 = v33 | ((v32 &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">12</span>);<br>      <span class="hljs-keyword">else</span><br>        v32 = a1[v31 + <span class="hljs-number">3</span>] &amp; <span class="hljs-number">0x3F</span> | (v33 &lt;&lt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0xFFE3FFFF</span> | ((v32 &amp; <span class="hljs-number">7</span>) &lt;&lt; <span class="hljs-number">18</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v32 != <span class="hljs-number">45</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v34 = <span class="hljs-number">0LL</span>;<br>  v35 = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    v36 = a1[v35];<br>    <span class="hljs-keyword">if</span> ( (a1[v35] &amp; <span class="hljs-number">0x80000000</span>) != <span class="hljs-number">0</span> )<br>    &#123;<br>      v37 = a1[v35 + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3F</span>;<br>      <span class="hljs-keyword">if</span> ( v36 &lt; <span class="hljs-number">0xE0</span> )<br>      &#123;<br>        v35 += <span class="hljs-number">2LL</span>;<br>        v36 = v37 &amp; <span class="hljs-number">0xFFFFF83F</span> | ((v36 &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">6</span>);<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        v38 = v35 + <span class="hljs-number">3</span>;<br>        v39 = a1[v35 + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x3F</span> | (v37 &lt;&lt; <span class="hljs-number">6</span>);<br>        <span class="hljs-keyword">if</span> ( v36 &lt; <span class="hljs-number">0xF0</span> )<br>        &#123;<br>          v36 = v39 | ((v36 &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">12</span>);<br>          v35 += <span class="hljs-number">3LL</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          v35 += <span class="hljs-number">4LL</span>;<br>          v36 = a1[v38] &amp; <span class="hljs-number">0x3F</span> | (v39 &lt;&lt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0xFFE3FFFF</span> | ((v36 &amp; <span class="hljs-number">7</span>) &lt;&lt; <span class="hljs-number">18</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      ++v35;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v36 != <span class="hljs-number">45</span> )<br>      <span class="hljs-keyword">break</span>;<br>LABEL_55:<br>    <span class="hljs-keyword">if</span> ( v35 == <span class="hljs-number">36</span> )<br>      <span class="hljs-keyword">goto</span> LABEL_67;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v36 != <span class="hljs-number">1114112</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v34 == v57 )<br>      sub_3B688(&amp;v57);<br>    *(v58 + <span class="hljs-number">4</span> * v34++) = v36;<br>    v59 = v34;<br>    <span class="hljs-keyword">goto</span> LABEL_55;<br>  &#125;<br>LABEL_67:<br>  v40 = v34 &gt;&gt; <span class="hljs-number">3</span>;<br>  v41 = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">if</span> ( (v34 &amp; <span class="hljs-number">7</span>) != <span class="hljs-number">0</span> )<br>    ++v40;<br>  v42 = v40 + <span class="hljs-number">1</span>;<br>  v43 = <span class="hljs-number">8LL</span>;<br>  <span class="hljs-keyword">while</span> ( --v42 )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v43 &gt; v34 )<br>      <span class="hljs-keyword">goto</span> LABEL_88;<br>    <span class="hljs-keyword">if</span> ( v43 - <span class="hljs-number">8</span> &gt;= <span class="hljs-number">0x19</span> )<br>    &#123;<br>      v43 = <span class="hljs-number">40LL</span>;<br>      v34 = <span class="hljs-number">32LL</span>;<br>LABEL_88:<br>      sub_7674C(v43, v34, &amp;off_801E0);<br>    &#125;<br>    v45 = *(v58 + v41 * <span class="hljs-number">4</span> + <span class="hljs-number">8</span>);<br>    v44 = *(v58 + v41 * <span class="hljs-number">4</span> + <span class="hljs-number">12</span>);<br>    v46 = *(v58 + v41 * <span class="hljs-number">4</span>);<br>    v47 = *(v58 + v41 * <span class="hljs-number">4</span> + <span class="hljs-number">4</span>);<br>    v48 = *(v58 + v41 * <span class="hljs-number">4</span> + <span class="hljs-number">16</span>);<br>    v49 = *(v58 + v41 * <span class="hljs-number">4</span> + <span class="hljs-number">20</span>);<br>    v50 = *(v58 + v41 * <span class="hljs-number">4</span> + <span class="hljs-number">24</span>);<br>    v51 = *(v58 + v41 * <span class="hljs-number">4</span> + <span class="hljs-number">28</span>);<br>    <span class="hljs-keyword">if</span> ( v51 + v47 * v44 * v49 - (v46 + v50 + v45 * v48) == dword_18F60[v41] )<br>    &#123;<br>      v52 = v46 * v49;<br>      <span class="hljs-keyword">if</span> ( v44 - v48 - v46 * v49 + v51 * v47 + v45 + v50 == dword_18F60[v41 + <span class="hljs-number">1</span>]<br>        &amp;&amp; v52 - (v48 + v51 * v47) + v45 + v50 * v44 == dword_18F60[v41 + <span class="hljs-number">2</span>] )<br>      &#123;<br>        v53 = v48 * v46;<br>        <span class="hljs-keyword">if</span> ( v47 + v48 * v46 - (v51 + v45) + v50 * v49 * v44 == dword_18F60[v41 + <span class="hljs-number">3</span>]<br>          &amp;&amp; v49 * v44 + v47 + v45 * v48 - (v50 + v51 * v46) == dword_18F60[v41 + <span class="hljs-number">4</span>]<br>          &amp;&amp; v52 + v47 * v44 + v45 - (v50 + v48 * v51) == dword_18F60[v41 + <span class="hljs-number">5</span>]<br>          &amp;&amp; v51 - v47 + v45 * v49 + v50 - v53 * v44 == dword_18F60[v41 + <span class="hljs-number">6</span>] )<br>        &#123;<br>          v43 += <span class="hljs-number">8LL</span>;<br>          v54 = v44 - v51 - (v47 + v49);<br>          v55 = &amp;dword_18F60[v41];<br>          v41 += <span class="hljs-number">8LL</span>;<br>          <span class="hljs-keyword">if</span> ( v54 + v53 + v50 * v45 == v55[<span class="hljs-number">7</span>] )<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v57 )<br>      sub_3B870(v58, <span class="hljs-number">4</span> * v57, <span class="hljs-number">4LL</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v57 )<br>    sub_3B870(v58, <span class="hljs-number">4</span> * v57, <span class="hljs-number">4LL</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要思路就是使用z3得到数据然后再在里面随机插入4个“-“</p><p>看着比较恼火，但是真正需要使用z3的就下面一部分就行了，结果下面的脚本，其实中间看上去很复杂的函数只是对多字节字符进行处理的函数罢了，不影响脚本的复刻</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> combinations<br> <br><span class="hljs-comment"># 原始字符串</span><br>original_string = <span class="hljs-string">&quot;32e750c8fb214562af22973fb5176b9c&quot;</span><br> <br><span class="hljs-comment"># 定义用于验证的 byte 数组（byte_18E46）</span><br>byte_18E46 = [ <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>,<br>    <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>,<br>    <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>,<br>    <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>,<br>    <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>,<br>    <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>,<br>    <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>,<br>    <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>,<br>    <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>,<br>    <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>,<br>    <span class="hljs-number">0x04</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br><span class="hljs-comment"># 验证逻辑函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_hyphen_positions</span>(<span class="hljs-params">input_str</span>):<br>    byte = byte_18E46<br>    input_bytes = [<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> input_str]<br>    <br>    <span class="hljs-comment"># 模拟你提供的验证逻辑</span><br>    v2 = byte[input_bytes[<span class="hljs-number">0</span>]]<br>    <span class="hljs-keyword">if</span> v2 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v3 = byte[input_bytes[v2]] + v2<br>    <span class="hljs-keyword">if</span> v3 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v4 = v3 + byte[input_bytes[v3]]<br>    <span class="hljs-keyword">if</span> v4 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v5 = v4 + byte[input_bytes[v4]]<br>    <span class="hljs-keyword">if</span> v5 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v6 = v5 + byte[input_bytes[v5]]<br>    <span class="hljs-keyword">if</span> v6 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v7 = v6 + byte[input_bytes[v6]]<br>    <span class="hljs-keyword">if</span> v7 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v8 = v7 + byte[input_bytes[v7]]<br>    <span class="hljs-keyword">if</span> v8 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v9 = v8 + byte[input_bytes[v8]]<br>    <span class="hljs-keyword">if</span> v9 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v10 = input_bytes[v9]<br>    <span class="hljs-keyword">if</span> v10 != <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;-&#x27;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v12 = v9 + byte[input_bytes[v9]]<br>    <span class="hljs-keyword">if</span> v12 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v13 = v12 + byte[input_bytes[v12]]<br>    <span class="hljs-keyword">if</span> v13 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v14 = v13 + byte[input_bytes[v13]]<br>    <span class="hljs-keyword">if</span> v14 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v15 = v14 + byte[input_bytes[v14]]<br>    <span class="hljs-keyword">if</span> v15 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v16 = v15 + byte[input_bytes[v15]]<br>    <span class="hljs-keyword">if</span> v16 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v18 = input_bytes[v16]<br>    <span class="hljs-keyword">if</span> v18 != <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;-&#x27;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v20 = v16 + byte[input_bytes[v16]]<br>    <span class="hljs-keyword">if</span> v20 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v21 = v20 + byte[input_bytes[v20]]<br>    <span class="hljs-keyword">if</span> v21 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v22 = v21 + byte[input_bytes[v21]]<br>    <span class="hljs-keyword">if</span> v22 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v23 = v22 + byte[input_bytes[v22]]<br>    <span class="hljs-keyword">if</span> v23 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v24 = v23 + byte[input_bytes[v23]]<br>    <span class="hljs-keyword">if</span> v24 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v25 = input_bytes[v24]<br>    <span class="hljs-keyword">if</span> v25 != <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;-&#x27;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v27 = v24 + byte[input_bytes[v24]]<br>    <span class="hljs-keyword">if</span> v27 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v28 = v27 + byte[input_bytes[v27]]<br>    <span class="hljs-keyword">if</span> v28 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v29 = v28 + byte[input_bytes[v28]]<br>    <span class="hljs-keyword">if</span> v29 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v30 = v29 + byte[input_bytes[v29]]<br>    <span class="hljs-keyword">if</span> v30 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v31 = v30 + byte[input_bytes[v30]]<br>    <span class="hljs-keyword">if</span> v31 == <span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    v32 = input_bytes[v31]<br>    <span class="hljs-keyword">if</span> v32 != <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;-&#x27;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br> <br> <br><span class="hljs-comment"># 生成插入 &#x27;-&#x27; 的位置的组合</span><br>positions = <span class="hljs-built_in">list</span>(combinations(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(original_string) + <span class="hljs-number">1</span>), <span class="hljs-number">4</span>))  <span class="hljs-comment"># 选择 4 个插入位置</span><br> <br><span class="hljs-comment"># 计数器</span><br>count = <span class="hljs-number">0</span><br>valid_count = <span class="hljs-number">0</span>  <span class="hljs-comment"># 成功验证的组合计数器</span><br> <br><span class="hljs-comment"># 遍历所有组合</span><br><span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> positions:<br>    temp_str = original_string<br>    <span class="hljs-comment"># 插入时要注意位置的偏移，每次插入后，字符串长度增加</span><br>    <span class="hljs-keyword">for</span> i, p <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(pos):<br>        temp_str = temp_str[:p + i] + <span class="hljs-string">&#x27;-&#x27;</span> + temp_str[p + i:]  <span class="hljs-comment"># 插入 &#x27;-&#x27; 并调整位置索引</span><br>     <br>    <span class="hljs-comment"># 验证插入的 &#x27;-&#x27; 是否符合条件</span><br>    <span class="hljs-keyword">if</span> validate_hyphen_positions(temp_str):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Valid combination: <span class="hljs-subst">&#123;temp_str&#125;</span>&quot;</span>)<br>        valid_count += <span class="hljs-number">1</span>  <span class="hljs-comment"># 计数通过验证的组合</span><br>     <br>    <span class="hljs-comment"># 计数</span><br>    count += <span class="hljs-number">1</span><br> <br><span class="hljs-comment"># 打印总次数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Total combinations: <span class="hljs-subst">&#123;count&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Total valid combinations: <span class="hljs-subst">&#123;valid_count&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>flag：ByteCTF{32e750c8-fb21-4562-af22-973fb5176b9c}</p><p>最后根据其他人的wp去了解了一下会涉及到的这几个dart文件一般的作用(from AI)   :)</p><ol><li><strong>main.dart</strong>：这是应用程序的主要入口点，通常包含了应用程序启动时执行的逻辑。它通常是开发者编写的核心业务逻辑所在的地方，也是逆向分析时的重要切入点。因此，在大多数情况下，<code>main.dart</code> 是逆向分析过程中首先关注的文件之一。</li><li><strong>frb_generated.dart</strong>：从文件名来看，这似乎是由某种工具自动生成的文件，可能是为了处理与 Rust 代码相关的逻辑。因为 Flutter 与 Rust 的集成通常涉及到通过 FFI（Foreign Function Interface）调用 Rust 代码，所以这个文件可能是为了生成与 Rust 代码接口相关的 Dart 代码，使得可以在 Dart 中调用 Rust 函数。</li><li><strong>frb_generated.io.dart</strong>：这个文件可能是与 Rust 代码中涉及到 I&#x2F;O 操作相关的 Dart 代码。Rust 语言因其内存安全性和高性能特性，常被用来处理底层或复杂的计算任务，包括网络通信、文件操作等 I&#x2F;O 密集型任务。因此，这个文件可能是为了处理 Rust 代码中的 I&#x2F;O 逻辑。</li><li><strong>api&#x2F;simple.dart</strong>：这个文件名表明它可能定义了一些简单的 API 接口或逻辑。它可能是为了封装一些简单的业务逻辑或对外提供的服务接口，这些接口可能是通过 Rust 实现的，然后再通过 Dart 提供一个友好的调用方式。</li></ol><h2 id="ByteBuffer"><a href="#ByteBuffer" class="headerlink" title="ByteBuffer"></a>ByteBuffer</h2><h3 id="题目提示："><a href="#题目提示：" class="headerlink" title="题目提示："></a>题目提示：</h3><p>ByteDance uses ByteXXX to name its products. For data transmission, ByteDance uses FlatBuffer based ByteBuffer, an extremely efficient and compact serialization technique. We have intercepted one of the traffic but can’t decode it. Can you analyze the ByteBuffer structure and recover something? flag is ByteCTF{recovered numbers}</p><p>翻译成对应中文：</p><p>字节跳动使用 ByteXXX 来命名其产品。对于数据传输，字节跳动使用基于 FlatBuffer 的 ByteBuffer，这是一种非常高效和紧凑的序列化技术。我们截获了其中一个流量，但无法解码。你能分析 ByteBuffer 结构并恢复一些东西吗？ flag 是 ByteCTF{recovered numbers}</p><p>因为这个题去了解了一些相关的知识</p><h4 id="什么是序列化："><a href="#什么是序列化：" class="headerlink" title="什么是序列化："></a>什么是序列化：</h4><p>参考：<a href="https://zhuanlan.zhihu.com/p/77644854#:~:text=union%E6%98%AF%E8%83%BD%E5%A4%9F">Google FlatBuffers？ 什么还没听过！ - 知乎 (zhihu.com)</a></p><p>首先网络传输的本质决定了我们在进行数据传输的时候需要序列化.<br>序列化： 把对象转化为一段buffer， obj—-&gt;buf<br>反序列化：把buffer转化为一个对象 buf—&gt;obj</p><p>即</p><ul><li>序列化：把对象转换为字节序列的过程。</li><li>反序列化：把字节序列恢复为对象的过程。</li></ul><p>简单来说序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化，流的概念这里不用多说(就是I&#x2F;O)，我们可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间(注：要想将对象传输于网络必须进行流化)！<br>常用的序列化还有：<a href="https://zhida.zhihu.com/search?content_id=105383976&content_type=Article&match_order=1&q=protobuf&zhida_source=entity">protobuf</a>，json</p><h4 id="flatbuffer是什么："><a href="#flatbuffer是什么：" class="headerlink" title="flatbuffer是什么："></a>flatbuffer是什么：</h4><p>flatbuffer允许我们我们在多种语言之间共享数据结构，我们可以定义一个schema文件（拓展名为.fbs)来描述我们的数据结构，然后我们可以通过使用flatbuffer的编译工具flatc来把这个scheme文件生成针对不同编程语言的源代码，这些文件包含了用于序列化和反序列化的代码，或者二进制格式文件，即bin文件</p><p>而这道题的题目就是这么生成的</p><p>所以正常思路我们想的是通过.bin文件还原得到.fbs文件</p><p>结果不是……</p><p>最后看wp，结果纯脑洞题了</p><p>直接使用010Editor打开bin文件</p><p>往下翻发现在字符串窗口有很多edge和dot字样</p><p>分为edge和dot 即线和点</p><p>我们的思路就是通过提取bin文件中线和点的坐标最后绘制成图片</p><p>分析思路：</p><p>这样的数据构造会重复很多次</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409250154439.png" alt="image-20240925015401347"></p><p>经过提取我们可以获得一个dot点的列表和一个edge边的列表，我们将边的列表里面的每一个元素所对应的点连接起来，最后再生成图片即可</p><p>参考wp(放一个其他战队的wp）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct                  <br>                 <br>data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;ByteBuffer.bin&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()                  <br>                 <br>edge_start = <span class="hljs-number">0x3ac</span>                  <br>dot_start = <span class="hljs-number">0x1230</span>                  <br>Edge = []                  <br>Dot = []                  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readEdge</span>(<span class="hljs-params">offset</span>):                  <br>    e = struct.unpack_from(<span class="hljs-string">&quot;&lt;IIIIII&quot;</span>,data,offset)        <br>    p1 = e[<span class="hljs-number">2</span>]                  <br>    p2 = e[<span class="hljs-number">3</span>]                  <br>    name_len = e[<span class="hljs-number">5</span>]                  <br>    name = data[offset+<span class="hljs-number">24</span>:offset+<span class="hljs-number">24</span>+name_len].decode()                  <br>    Edge.append(&#123;                  <br>        <span class="hljs-string">&quot;p1&quot;</span>:p1,                  <br>        <span class="hljs-string">&quot;p2&quot;</span>:p2,                  <br>        <span class="hljs-string">&quot;name&quot;</span>:name,                  <br>    &#125;)                  <br>    name_pad = ((name_len ) // <span class="hljs-number">4</span> + <span class="hljs-number">1</span> )* <span class="hljs-number">4</span>                  <br>    <span class="hljs-keyword">return</span> offset+<span class="hljs-number">24</span>+name_pad                  <br>                 <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readDot</span>(<span class="hljs-params">offset</span>):                  <br>    e = struct.unpack_from(<span class="hljs-string">&quot;&lt;IIIII&quot;</span>,data,offset)        <br>    x = e[<span class="hljs-number">1</span>]                    <br>    y = e[<span class="hljs-number">2</span>]                    <br>    name_len = e[<span class="hljs-number">4</span>]                    <br>    name = data[offset+<span class="hljs-number">20</span>:offset+<span class="hljs-number">20</span>+name_len].decode()                    <br>    Dot.append(&#123;                    <br>        <span class="hljs-string">&quot;x&quot;</span>:x,                    <br>        <span class="hljs-string">&quot;y&quot;</span>:y,                    <br>        <span class="hljs-string">&quot;name&quot;</span>:name,                    <br>    &#125;)                    <br>    name_pad = ((name_len ) // <span class="hljs-number">4</span> + <span class="hljs-number">1</span> )* <span class="hljs-number">4</span>                    <br>    <span class="hljs-keyword">return</span> offset+<span class="hljs-number">20</span>+name_pad                    <br>                   <br>offset = edge_start                    <br><span class="hljs-keyword">while</span>(offset &lt; <span class="hljs-number">0x1204</span>):                    <br>    offset = readEdge(offset)                    <br>    <span class="hljs-built_in">print</span>(offset)                    <br>readEdge(<span class="hljs-number">0x1210</span>)                    <br>offset = dot_start                    <br><span class="hljs-keyword">while</span>(offset &lt; <span class="hljs-number">0x1f88</span>):                    <br>    offset = readDot(offset)                    <br>readDot(<span class="hljs-number">0x1f90</span>)                    <br>                   <br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> Edge:                    <br>    <span class="hljs-built_in">print</span>(e)                    <br>                   <br><span class="hljs-keyword">for</span> d  <span class="hljs-keyword">in</span> Dot:                    <br>    <span class="hljs-built_in">print</span>(d)                    <br>                   <br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageDraw,Image                    <br>                   <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findDot</span>(<span class="hljs-params">dot_id</span>):                    <br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> Dot:                    <br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Dot #&quot;</span>+<span class="hljs-built_in">str</span>(dot_id) == d[<span class="hljs-string">&#x27;name&#x27;</span>]:                    <br>            <span class="hljs-keyword">return</span> d[<span class="hljs-string">&#x27;x&#x27;</span>],d[<span class="hljs-string">&#x27;y&#x27;</span>]                    <br>                   <br>im = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (<span class="hljs-number">2000</span>, <span class="hljs-number">200</span>), (<span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>))                    <br>draw = ImageDraw.Draw(im)                    <br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> Edge:                    <br>    d1 = findDot(e[<span class="hljs-string">&#x27;p1&#x27;</span>])                    <br>    d2 = findDot(e[<span class="hljs-string">&#x27;p2&#x27;</span>])                    <br>    <span class="hljs-built_in">print</span>(d1+d2)                    <br>    draw.line((d1+d2), fill=(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), width=<span class="hljs-number">5</span>)                    <br>                   <br>im.save(<span class="hljs-string">&#x27;1.png&#x27;</span>)         <span class="hljs-comment"># &lt;/IIIII&quot;,data,offset)        </span><br>        <span class="hljs-comment"># &lt;/IIIIII&quot;,data,offset)</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">976</span><br><span class="hljs-number">1012</span><br><span class="hljs-number">1048</span><br><span class="hljs-number">1084</span><br><span class="hljs-number">1120</span><br><span class="hljs-number">1156</span><br><span class="hljs-number">1192</span><br><span class="hljs-number">1228</span><br><span class="hljs-number">1264</span><br><span class="hljs-number">1300</span><br><span class="hljs-number">1336</span><br><span class="hljs-number">1372</span><br><span class="hljs-number">1408</span><br><span class="hljs-number">1444</span><br><span class="hljs-number">1480</span><br><span class="hljs-number">1516</span><br><span class="hljs-number">1552</span><br><span class="hljs-number">1588</span><br><span class="hljs-number">1624</span><br><span class="hljs-number">1660</span><br><span class="hljs-number">1696</span><br><span class="hljs-number">1732</span><br><span class="hljs-number">1768</span><br><span class="hljs-number">1804</span><br><span class="hljs-number">1840</span><br><span class="hljs-number">1876</span><br><span class="hljs-number">1912</span><br><span class="hljs-number">1948</span><br><span class="hljs-number">1984</span><br><span class="hljs-number">2020</span><br><span class="hljs-number">2056</span><br><span class="hljs-number">2092</span><br><span class="hljs-number">2128</span><br><span class="hljs-number">2164</span><br><span class="hljs-number">2200</span><br><span class="hljs-number">2236</span><br><span class="hljs-number">2272</span><br><span class="hljs-number">2308</span><br><span class="hljs-number">2344</span><br><span class="hljs-number">2380</span><br><span class="hljs-number">2416</span><br><span class="hljs-number">2452</span><br><span class="hljs-number">2488</span><br><span class="hljs-number">2524</span><br><span class="hljs-number">2560</span><br><span class="hljs-number">2596</span><br><span class="hljs-number">2632</span><br><span class="hljs-number">2668</span><br><span class="hljs-number">2704</span><br><span class="hljs-number">2740</span><br><span class="hljs-number">2776</span><br><span class="hljs-number">2812</span><br><span class="hljs-number">2848</span><br><span class="hljs-number">2884</span><br><span class="hljs-number">2920</span><br><span class="hljs-number">2956</span><br><span class="hljs-number">2992</span><br><span class="hljs-number">3028</span><br><span class="hljs-number">3064</span><br><span class="hljs-number">3100</span><br><span class="hljs-number">3136</span><br><span class="hljs-number">3172</span><br><span class="hljs-number">3208</span><br><span class="hljs-number">3244</span><br><span class="hljs-number">3280</span><br><span class="hljs-number">3316</span><br><span class="hljs-number">3352</span><br><span class="hljs-number">3388</span><br><span class="hljs-number">3424</span><br><span class="hljs-number">3460</span><br><span class="hljs-number">3496</span><br><span class="hljs-number">3532</span><br><span class="hljs-number">3568</span><br><span class="hljs-number">3604</span><br><span class="hljs-number">3640</span><br><span class="hljs-number">3676</span><br><span class="hljs-number">3712</span><br><span class="hljs-number">3748</span><br><span class="hljs-number">3784</span><br><span class="hljs-number">3820</span><br><span class="hljs-number">3856</span><br><span class="hljs-number">3892</span><br><span class="hljs-number">3928</span><br><span class="hljs-number">3964</span><br><span class="hljs-number">4000</span><br><span class="hljs-number">4036</span><br><span class="hljs-number">4072</span><br><span class="hljs-number">4108</span><br><span class="hljs-number">4144</span><br><span class="hljs-number">4180</span><br><span class="hljs-number">4216</span><br><span class="hljs-number">4252</span><br><span class="hljs-number">4288</span><br><span class="hljs-number">4324</span><br><span class="hljs-number">4356</span><br><span class="hljs-number">4388</span><br><span class="hljs-number">4420</span><br><span class="hljs-number">4452</span><br><span class="hljs-number">4484</span><br><span class="hljs-number">4516</span><br><span class="hljs-number">4548</span><br><span class="hljs-number">4580</span><br><span class="hljs-number">4612</span><br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">119</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">117</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #103&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">119</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">118</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #102&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">117</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">114</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #101&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">116</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">115</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #100&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">115</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">114</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #99&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">113</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">111</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #98&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">113</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">112</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #97&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">112</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">108</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #96&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">111</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">108</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #95&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">110</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">109</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #94&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">109</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">108</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #93&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">107</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">105</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #92&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">107</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">106</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #91&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">106</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">102</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #90&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">105</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">102</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #89&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">105</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">104</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #88&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">104</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">103</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #87&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">103</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">102</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #86&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #85&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #84&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">96</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #83&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #82&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">96</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #81&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">94</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">92</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #80&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">93</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">92</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #79&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">91</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">90</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #78&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">90</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">89</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #77&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">89</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">88</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #76&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">86</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">81</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #75&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">86</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">85</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #74&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">85</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">84</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #73&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">84</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">83</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #72&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">83</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">82</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #71&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">82</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">81</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #70&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">80</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">78</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #69&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">80</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">79</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #68&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">78</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #67&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">78</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">77</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #66&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">77</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">76</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #65&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">76</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #64&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">74</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">73</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #63&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">73</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">69</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #62&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">72</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">69</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #61&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">72</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">71</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #60&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">71</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">70</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #59&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">68</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">66</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #58&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">68</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">67</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #57&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">66</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">63</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #56&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">66</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">65</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #55&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">65</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">64</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #54&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">64</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">63</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #53&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">62</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #52&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">62</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">61</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #51&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">61</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">57</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #50&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">57</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #49&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">59</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">58</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #48&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">58</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">57</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #47&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">56</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">51</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #46&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">56</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">55</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #45&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">55</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">54</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #44&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">54</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">53</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #43&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">53</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">52</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #42&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">52</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">51</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #41&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">48</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #40&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">49</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #39&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">48</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #38&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #37&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #36&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">42</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #35&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #34&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #33&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">42</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #32&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">42</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">41</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #31&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">41</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #30&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #29&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">37</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">35</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #28&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">35</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #27&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">34</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">33</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #26&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">33</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">29</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #25&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">32</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">29</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #24&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">32</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">31</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #23&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">31</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #22&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">26</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #21&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">26</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #20&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">26</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #19&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #18&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">23</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #17&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">23</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #16&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #15&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #14&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #13&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #12&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #11&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">14</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #10&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #9&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #8&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #7&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #6&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #5&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #4&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #3&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #2&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #1&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;p1&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;p2&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Edge #0&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1600</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #120&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1575</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #119&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1525</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #118&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1575</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #117&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1575</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #116&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1525</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #115&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1525</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #114&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1500</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #113&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1450</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #112&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1500</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #111&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1500</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #110&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1450</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #109&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1450</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #108&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1425</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #107&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1375</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #106&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1425</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #105&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1425</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #104&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1375</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #103&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1375</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #102&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1350</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #101&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1300</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #100&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1350</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #99&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1350</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #98&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1300</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #97&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1300</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #96&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1275</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #95&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1225</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #94&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1225</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #93&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1225</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #92&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1200</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #91&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1200</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #90&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1200</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #89&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1150</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #88&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1150</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #87&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1075</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #86&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1125</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #85&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1125</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #84&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1125</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #83&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1075</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #82&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1075</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #81&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1050</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #80&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #79&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1050</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #78&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1050</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #77&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #76&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #75&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">975</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #74&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">925</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #73&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">975</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #72&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">975</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #71&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">925</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #70&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">925</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #69&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">900</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #68&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">850</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #67&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">900</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #66&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">900</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #65&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">850</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #64&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">850</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #63&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">825</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #62&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">775</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #61&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">825</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #60&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">825</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #59&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">775</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #58&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">775</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #57&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">700</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #56&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">750</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #55&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">750</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #54&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">750</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #53&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">700</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #52&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">700</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #51&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">675</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #50&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">625</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #49&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">675</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #48&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">675</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #47&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">625</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #46&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">625</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #45&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">600</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #44&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">550</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #43&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">600</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #42&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">600</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #41&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">550</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #40&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">550</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #39&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">525</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #38&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">475</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #37&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">475</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #36&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">475</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #35&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">450</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #34&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">400</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #33&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">450</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #32&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">450</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #31&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">400</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #30&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">400</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #29&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">375</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #28&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">375</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #27&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">375</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #26&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">325</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #25&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">325</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #24&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">300</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #23&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">250</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #22&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">300</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #21&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">300</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #20&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">250</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #19&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">250</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #18&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">225</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #17&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">225</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #16&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">225</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #15&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">175</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #14&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">175</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #13&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">150</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #12&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #11&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">150</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #10&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">150</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #9&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #8&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #7&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #6&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #5&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #4&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #3&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #1&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Dot #2&#x27;</span>&#125;<br><span class="hljs-comment">(1575, 125, 1575, 75)</span><br><span class="hljs-comment">(1575, 125, 1525, 125)</span><br><span class="hljs-comment">(1575, 75, 1525, 75)</span><br><span class="hljs-comment">(1575, 25, 1525, 25)</span><br><span class="hljs-comment">(1525, 25, 1525, 75)</span><br><span class="hljs-comment">(1500, 125, 1500, 75)</span><br><span class="hljs-comment">(1500, 125, 1450, 125)</span><br><span class="hljs-comment">(1450, 125, 1450, 75)</span><br><span class="hljs-comment">(1500, 75, 1450, 75)</span><br><span class="hljs-comment">(1500, 25, 1450, 25)</span><br><span class="hljs-comment">(1450, 25, 1450, 75)</span><br><span class="hljs-comment">(1425, 125, 1425, 75)</span><br><span class="hljs-comment">(1425, 125, 1375, 125)</span><br><span class="hljs-comment">(1375, 125, 1375, 75)</span><br><span class="hljs-comment">(1425, 75, 1375, 75)</span><br><span class="hljs-comment">(1425, 75, 1425, 25)</span><br><span class="hljs-comment">(1425, 25, 1375, 25)</span><br><span class="hljs-comment">(1375, 25, 1375, 75)</span><br><span class="hljs-comment">(1350, 125, 1350, 75)</span><br><span class="hljs-comment">(1350, 125, 1300, 125)</span><br><span class="hljs-comment">(1350, 75, 1300, 75)</span><br><span class="hljs-comment">(1350, 25, 1300, 25)</span><br><span class="hljs-comment">(1300, 25, 1300, 75)</span><br><span class="hljs-comment">(1225, 125, 1225, 75)</span><br><span class="hljs-comment">(1225, 25, 1225, 75)</span><br><span class="hljs-comment">(1200, 125, 1200, 75)</span><br><span class="hljs-comment">(1200, 75, 1200, 25)</span><br><span class="hljs-comment">(1200, 25, 1150, 25)</span><br><span class="hljs-comment">(1075, 125, 1075, 75)</span><br><span class="hljs-comment">(1075, 125, 1125, 125)</span><br><span class="hljs-comment">(1125, 125, 1125, 75)</span><br><span class="hljs-comment">(1125, 75, 1125, 25)</span><br><span class="hljs-comment">(1125, 25, 1075, 25)</span><br><span class="hljs-comment">(1075, 25, 1075, 75)</span><br><span class="hljs-comment">(1050, 125, 1050, 75)</span><br><span class="hljs-comment">(1050, 125, 1000, 125)</span><br><span class="hljs-comment">(1050, 75, 1000, 75)</span><br><span class="hljs-comment">(1050, 75, 1050, 25)</span><br><span class="hljs-comment">(1050, 25, 1000, 25)</span><br><span class="hljs-comment">(1000, 25, 1000, 75)</span><br><span class="hljs-comment">(975, 125, 925, 125)</span><br><span class="hljs-comment">(925, 125, 925, 75)</span><br><span class="hljs-comment">(975, 75, 925, 75)</span><br><span class="hljs-comment">(975, 75, 975, 25)</span><br><span class="hljs-comment">(975, 25, 925, 25)</span><br><span class="hljs-comment">(900, 125, 900, 75)</span><br><span class="hljs-comment">(900, 125, 850, 125)</span><br><span class="hljs-comment">(900, 75, 850, 75)</span><br><span class="hljs-comment">(900, 75, 900, 25)</span><br><span class="hljs-comment">(900, 25, 850, 25)</span><br><span class="hljs-comment">(850, 25, 850, 75)</span><br><span class="hljs-comment">(825, 125, 825, 75)</span><br><span class="hljs-comment">(825, 125, 775, 125)</span><br><span class="hljs-comment">(775, 125, 775, 75)</span><br><span class="hljs-comment">(825, 75, 775, 75)</span><br><span class="hljs-comment">(825, 25, 775, 25)</span><br><span class="hljs-comment">(775, 25, 775, 75)</span><br><span class="hljs-comment">(700, 125, 700, 75)</span><br><span class="hljs-comment">(700, 125, 750, 125)</span><br><span class="hljs-comment">(750, 125, 750, 75)</span><br><span class="hljs-comment">(750, 75, 750, 25)</span><br><span class="hljs-comment">(750, 25, 700, 25)</span><br><span class="hljs-comment">(700, 25, 700, 75)</span><br><span class="hljs-comment">(675, 125, 675, 75)</span><br><span class="hljs-comment">(675, 125, 625, 125)</span><br><span class="hljs-comment">(675, 75, 625, 75)</span><br><span class="hljs-comment">(675, 25, 625, 25)</span><br><span class="hljs-comment">(625, 25, 625, 75)</span><br><span class="hljs-comment">(600, 125, 600, 75)</span><br><span class="hljs-comment">(600, 125, 550, 125)</span><br><span class="hljs-comment">(550, 125, 550, 75)</span><br><span class="hljs-comment">(600, 75, 550, 75)</span><br><span class="hljs-comment">(600, 75, 600, 25)</span><br><span class="hljs-comment">(600, 25, 550, 25)</span><br><span class="hljs-comment">(550, 25, 550, 75)</span><br><span class="hljs-comment">(475, 125, 475, 75)</span><br><span class="hljs-comment">(475, 25, 475, 75)</span><br><span class="hljs-comment">(450, 125, 400, 125)</span><br><span class="hljs-comment">(400, 125, 400, 75)</span><br><span class="hljs-comment">(450, 75, 400, 75)</span><br><span class="hljs-comment">(450, 75, 450, 25)</span><br><span class="hljs-comment">(450, 25, 400, 25)</span><br><span class="hljs-comment">(375, 125, 375, 75)</span><br><span class="hljs-comment">(375, 25, 375, 75)</span><br><span class="hljs-comment">(375, 75, 325, 75)</span><br><span class="hljs-comment">(325, 25, 325, 75)</span><br><span class="hljs-comment">(300, 125, 300, 75)</span><br><span class="hljs-comment">(300, 125, 250, 125)</span><br><span class="hljs-comment">(300, 75, 250, 75)</span><br><span class="hljs-comment">(300, 25, 250, 25)</span><br><span class="hljs-comment">(250, 25, 250, 75)</span><br><span class="hljs-comment">(225, 125, 225, 75)</span><br><span class="hljs-comment">(225, 75, 225, 25)</span><br><span class="hljs-comment">(225, 25, 175, 25)</span><br><span class="hljs-comment">(150, 125, 100, 125)</span><br><span class="hljs-comment">(100, 125, 100, 75)</span><br><span class="hljs-comment">(150, 75, 100, 75)</span><br><span class="hljs-comment">(150, 75, 150, 25)</span><br><span class="hljs-comment">(150, 25, 100, 25)</span><br><span class="hljs-comment">(75, 125, 75, 75)</span><br><span class="hljs-comment">(75, 125, 25, 125)</span><br><span class="hljs-comment">(25, 25, 75, 25)</span><br><span class="hljs-comment">(75, 25, 75, 75)</span><br><span class="hljs-comment">(25, 75, 75, 75)</span><br></code></pre></td></tr></table></figure><p>在当前</p><p>文件夹下生成图片</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409240858010.png" alt="image-20240924085822933"></p><p>点击查看，得到flag</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409240857851.png" alt="image-20240924085745641"></p><p>flag:ByteCTF{32e750c8-fb21-4562-af22-973fb5176b9c}</p><h2 id="ByteKit"><a href="#ByteKit" class="headerlink" title="ByteKit"></a><strong>ByteKit</strong></h2><h3 id="题目提示：-1"><a href="#题目提示：-1" class="headerlink" title="题目提示："></a>题目提示：</h3><p>  One of our physical server have been hacked, we re-install the OS but there is still something there. Can you find it?</p><ol><li>execute “.&#x2F;run_qemu.sh” and login with username root and empty password</li><li>after login, execute “.&#x2F;getflag.sh <your input>“</li><li>it will reboot</li><li>after reboot, re-login with root and empty password, execute “.&#x2F;getflag.sh <your input>“ again, and you will get your flag.</li></ol><p>中文：</p><p>我们的其中一台物理服务器被黑了，我们重装了操作系统，但似乎还有一些问题。你能找到它吗？</p><ol><li>执行 “.&#x2F;run_qemu.sh” 并使用用户名 root 和空密码登录。</li><li>登录后，执行 “.&#x2F;getflag.sh &lt;你的输入&gt;”。</li><li>它将会重启。</li><li>重启后，再次使用 root 和空密码登录，重新执行 “.&#x2F;getflag.sh &lt;你的输入&gt;”，然后你会得到你的标志（flag）。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">BYTECTF_INPUT_GUID=93e91ed6-1a7a-46a1-b880-c5d281700ea2<br>BYTECTF_OUTPUT_GUID=93e91ed6-1a7a-46a1-b880-c5c281700ea2<br>BYTECTF_INPUT_VAR_FILE=&quot;/sys/firmware/efi/efivars/ByteCTFIn-$BYTECTF_INPUT_GUID&quot;<br>BYTECTF_OUTPUT_VAR_FILE=&quot;/sys/firmware/efi/efivars/ByteCTFOut-$BYTECTF_OUTPUT_GUID&quot;<br><br>if [ &quot;$1&quot; == &quot;&quot; ]; then<br>    echo &quot;$0 &lt;your input&gt;&quot;<br>    exit 1<br>fi<br><br>input=$1<br>echo &quot;your input is $input&quot;<br><br>if [ -f $BYTECTF_OUTPUT_VAR_FILE ]; then<br>    flag1=$input<br>    flag2=`cat $BYTECTF_OUTPUT_VAR_FILE | base64 | cut -c -24`<br>    echo &quot;ByteCTF&#123;$flag1$flag2&#125;&quot;<br>    chattr -i $BYTECTF_OUTPUT_VAR_FILE<br>    rm -f $BYTECTF_OUTPUT_VAR_FILE<br>    exit 0<br>fi<br><br>if [ -f $BYTECTF_INPUT_VAR_FILE ]; then<br>    chattr -i $BYTECTF_INPUT_VAR_FILE<br>    rm -f $BYTECTF_INPUT_VAR_FILE<br>fi<br><br>echo -en &quot;\x07\x00\x00\x00$input&quot; | sudo tee $BYTECTF_INPUT_VAR_FILE &gt; /dev/null<br>echo &quot;system will reboot in 10 seconds&quot;<br>sh -c &quot;sleep 10; reboot&quot; &amp;<br><br></code></pre></td></tr></table></figure><p>对题目所给的另一个文件使用</p><p>binwalk -e bios.bin</p><p>提取里面的所有文件</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409251511264.png" alt="image-20240925151106208"></p><p>发现一个可执行文件</p><p>使用命令提取出来</p><p>uefi retools的使用参考：</p><p><a href="https://www.freebuf.com/articles/system/246025.html">UEFI_RETool：一款针对UEFI固件的逆向工程分析工具 - FreeBuf网络安全行业门户</a></p><p>其实直接执行下面的指令即可</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/yeggor/UEFI_RETool.git<br>pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>配置好后使用工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">python3 uefi_retool.py get-images ./bios.bin<br></code></pre></td></tr></table></figure><p>得到目标文件</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409251640603.png" alt="image-20240925164040504"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409251640642.png" alt="image-20240925164056580"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409251639562.png" alt="image-20240925163959448"></p><p>使用IDA打开其中的ByteKitLoaderDxe，这个通常用于在 UEFI 架构中，DXE（Driver Execution Environment）是指在早期阶段加载的一个环境，它负责初始化硬件驱动程序和其他关键服务。</p><p>我们直接看到_ModuleEntryPoint，在 UEFI 架构中，每个 UEFI 模块都有一个 <code>_ModuleEntryPoint</code>，这个入口点定义了模块初始化时的行为，它指向了模块的入口点，即模块开始执行的第一个函数。</p><p>发现ollvm</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409251645954.png" alt="image-20240925164545879"></p><p>使用D810去除ollvm（选择ollvm模式）</p><p>最后得到加密逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs c">EFI_STATUS __fastcall <span class="hljs-title function_">ModuleEntryPoint</span><span class="hljs-params">(EFI_HANDLE ImageHandle, EFI_SYSTEM_TABLE *SystemTable)</span><br>&#123;<br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// eax</span><br>  __int64 v5; <span class="hljs-comment">// rsi</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// r9</span><br>  <span class="hljs-type">unsigned</span> __int8 *v7; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v8; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">unsigned</span> __int64 m; <span class="hljs-comment">// rcx</span><br>  __int64 k; <span class="hljs-comment">// r10</span><br>  <span class="hljs-type">unsigned</span> __int64 v11; <span class="hljs-comment">// r8</span><br>  __int64 v12; <span class="hljs-comment">// rsi</span><br>  <span class="hljs-type">int</span> n; <span class="hljs-comment">// eax</span><br>  __int64 v16; <span class="hljs-comment">// [rsp+50h] [rbp-138h]</span><br>  __int64 v17; <span class="hljs-comment">// [rsp+50h] [rbp-138h]</span><br>  __int64 v18; <span class="hljs-comment">// [rsp+68h] [rbp-120h]</span><br>  __int64 v19; <span class="hljs-comment">// [rsp+78h] [rbp-110h] BYREF</span><br>  __int64 *v20; <span class="hljs-comment">// [rsp+80h] [rbp-108h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v21; <span class="hljs-comment">// [rsp+88h] [rbp-100h]</span><br>  <span class="hljs-type">int</span> v22; <span class="hljs-comment">// [rsp+8Ch] [rbp-FCh]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v23; <span class="hljs-comment">// [rsp+90h] [rbp-F8h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v24; <span class="hljs-comment">// [rsp+94h] [rbp-F4h]</span><br>  __int64 v25; <span class="hljs-comment">// [rsp+98h] [rbp-F0h]</span><br>  <span class="hljs-type">int</span> v26; <span class="hljs-comment">// [rsp+A0h] [rbp-E8h]</span><br>  <span class="hljs-type">int</span> v27; <span class="hljs-comment">// [rsp+A4h] [rbp-E4h]</span><br>  __int64 v28; <span class="hljs-comment">// [rsp+A8h] [rbp-E0h]</span><br>  __int64 v29; <span class="hljs-comment">// [rsp+B0h] [rbp-D8h]</span><br>  __int64 v30; <span class="hljs-comment">// [rsp+B8h] [rbp-D0h]</span><br>  __int64 v31; <span class="hljs-comment">// [rsp+C0h] [rbp-C8h]</span><br>  __int64 v32; <span class="hljs-comment">// [rsp+C8h] [rbp-C0h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v33; <span class="hljs-comment">// [rsp+D0h] [rbp-B8h]</span><br>  __int64 v34; <span class="hljs-comment">// [rsp+D8h] [rbp-B0h]</span><br>  <span class="hljs-type">int</span> v35; <span class="hljs-comment">// [rsp+E8h] [rbp-A0h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v36; <span class="hljs-comment">// [rsp+ECh] [rbp-9Ch]</span><br>  __int64 v37[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [rsp+F8h] [rbp-90h] BYREF</span><br><br>  v37[<span class="hljs-number">4</span>] = &amp;SystemTable-&gt;Hdr.Revision;<br>  v37[<span class="hljs-number">1</span>] = v37;<br>  v26 = <span class="hljs-number">0</span>;<br>  LOBYTE(v31) = <span class="hljs-number">1</span>;<br>  LOBYTE(v32) = ImageHandle != <span class="hljs-number">0</span>i64;<br>  qword_1CA90 = SystemTable;<br>  LOBYTE(v33) = <span class="hljs-number">1</span>;<br>  LOBYTE(v34) = SystemTable != <span class="hljs-number">0</span>i64;<br>  qword_1CA80 = SystemTable-&gt;BootServices;<br>  LOBYTE(v25) = <span class="hljs-number">1</span>;<br>  LOBYTE(v19) = qword_1CA80 != <span class="hljs-number">0</span>;<br>  v20 = <span class="hljs-number">0</span>i64;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">-1227761683</span>; i != <span class="hljs-number">23738806</span>; i = <span class="hljs-number">23738806</span> )<br>    qword_1CA88 = SystemTable-&gt;RuntimeServices;<br>  LOBYTE(v24) = <span class="hljs-number">0</span>;<br>  v35 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">-494123489</span>; j == <span class="hljs-number">-494123489</span>; j = <span class="hljs-number">857817886</span> )<br>    ;<br>  <span class="hljs-keyword">if</span> ( sub_200() != <span class="hljs-number">0</span> )<br>  &#123;<br>    v16 = (*(qword_1CA80 + <span class="hljs-number">64</span>))(<span class="hljs-number">4</span>i64, dword_3A28, &amp;qword_1CA78);<br>    <span class="hljs-keyword">if</span> ( v16 &gt;= <span class="hljs-number">0</span> )<br>    &#123;<br>      sub_AD1(qword_1CA78, &amp;unk_3A37, dword_3A28);<br>      qword_1CA64 = qword_1CA78;<br>      qword_1CA6C = qword_1CA78 + dword_3A28;<br>      v5 = <span class="hljs-number">0</span>i64;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v5 = v16;<br>    &#125;<br>    v28 = v5;<br>    <span class="hljs-keyword">if</span> ( v28 &gt;= <span class="hljs-number">0</span> )<br>    &#123;<br>      v36 = dword_3A28;<br>      <span class="hljs-keyword">if</span> ( v36 &gt;= <span class="hljs-number">5</span> &amp;&amp; (v31 = qword_1CA78) != <span class="hljs-number">0</span> )<br>      &#123;<br>        <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>i64; ; k = v19 + <span class="hljs-number">1</span> )<br>        &#123;<br>          v19 = k;<br>          v27 = dword_3A28;<br>          <span class="hljs-keyword">if</span> ( k &gt;= dword_3A28 )<br>            <span class="hljs-keyword">break</span>;<br>          v25 = v19 % <span class="hljs-number">11</span>;<br>          *(qword_1CA78 + v19) ^= *(&amp;unk_3A20 + v19 % <span class="hljs-number">11</span> + <span class="hljs-number">12</span>);<br>        &#125;<br>        v32 = qword_1CA78;<br>        v33 = (v27 - <span class="hljs-number">4</span>);<br>        v8 = <span class="hljs-number">-1</span>;<br>        v7 = qword_1CA78;<br>        <span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0</span>i64; m &lt; v33; ++m )<br>        &#123;<br>          v21 = v8 &gt;&gt; <span class="hljs-number">8</span>;<br>          v22 = dword_1CAC0[*v7 ^ v8];<br>          v23 = v22 ^ (v8 &gt;&gt; <span class="hljs-number">8</span>);<br>          ++v7;<br>          v8 = v23;<br>        &#125;<br>        v24 = ~v8;<br>        v34 = qword_1CA78 + dword_3A28;<br>        <span class="hljs-keyword">if</span> ( v24 == *(v34 - <span class="hljs-number">4</span>) )<br>          v11 = <span class="hljs-number">0</span>i64;<br>        <span class="hljs-keyword">else</span><br>          v11 = <span class="hljs-number">0x8000000000000015</span>ui64;<br>        v6 = v11;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        v6 = <span class="hljs-number">0x8000000000000002</span>ui64;<br>      &#125;<br>      v29 = v6;<br>      <span class="hljs-keyword">if</span> ( v29 &gt;= <span class="hljs-number">0</span> )<br>      &#123;<br>        v20 = &amp;v19;<br>        v18 = (*(qword_1CA80 + <span class="hljs-number">200</span>))(<span class="hljs-number">0</span>i64, ImageHandle, &amp;unk_1CA5C, qword_1CA78, dword_3A28, &amp;v19);<br>        LOBYTE(v25) = v18 &lt; <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> ( v25 )<br>        &#123;<br>          v12 = v18;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          (*(qword_1CA80 + <span class="hljs-number">208</span>))(v19, <span class="hljs-number">0</span>i64, <span class="hljs-number">0</span>i64);<br>          v12 = <span class="hljs-number">0</span>i64;<br>        &#125;<br>        v30 = v12;<br>        <span class="hljs-keyword">if</span> ( v30 &gt;= <span class="hljs-number">0</span> )<br>        &#123;<br>          v17 = qword_1CA80;<br>          <span class="hljs-keyword">for</span> ( n = <span class="hljs-number">2125084176</span>; n != <span class="hljs-number">898532110</span>; n = <span class="hljs-number">898532110</span> )<br>            (*(v17 + <span class="hljs-number">72</span>))(qword_1CA78);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  v37[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>i64;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;<br>&#125;<br></code></pre></td></tr></table></figure><p>idapython:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> idaapi <span class="hljs-keyword">import</span> *<br><br>startaddr = <span class="hljs-number">0x3A37</span><br>keyaddr = <span class="hljs-number">0x3A2C</span><br>isize = <span class="hljs-number">0x6c4</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(isize):<br>    patch_byte(startaddr + i, get_byte(startaddr + i) ^ get_byte(keyaddr + i % <span class="hljs-number">11</span>))<br><br>fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;G:\bytectf\ByteKit\ByteKit\image.efi&quot;</span>, <span class="hljs-string">&quot;wb+&quot;</span>)<br>fp.write(get_bytes(startaddr, isize))<br>fp.close()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;success&quot;</span>)<br></code></pre></td></tr></table></figure><p>将得到的使用IDA打开</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409252327990.png" alt="image-20240925232716853"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 v22[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+48h] [rbp-20h] BYREF</span><br><br>  qword_5F8 = SystemTable;<br>  BootServices = SystemTable-&gt;BootServices;<br>  RuntimeServices = SystemTable-&gt;RuntimeServices;<br>  qword_5D0 = ImageHandle;<br>  qword_5F0 = BootServices;<br>  qword_5D8 = RuntimeServices;<br>  qword_5E8 = <span class="hljs-number">0</span>i64;<br>  qword_5E0 = <span class="hljs-number">0</span>i64;<br>  v22[<span class="hljs-number">0</span>] = <span class="hljs-number">256</span>i64;<br>  <span class="hljs-keyword">if</span> ( (BootServices-&gt;AllocatePool)(<span class="hljs-number">6</span>i64, <span class="hljs-number">256</span>i64, &amp;qword_5E8) &gt;= <span class="hljs-number">0</span> )<br>  &#123;<br>    v4 = (*(qword_5D8 + <span class="hljs-number">72</span>))(<span class="hljs-string">L&quot;ByteCTFIn&quot;</span>, &amp;unk_580, v21, v22, qword_5E8);<br>    v5 = qword_5E8;<br>    <span class="hljs-keyword">if</span> ( v4 &gt;= <span class="hljs-number">0</span><br>      &amp;&amp; (v6 = v22[<span class="hljs-number">0</span>], v22[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">4</span>)<br>      &amp;&amp; (qword_5E8 == <span class="hljs-string">&quot;KEY:&quot;</span> || (v20 = qword_5E8, v7 = sub_240(qword_5E8, <span class="hljs-string">&quot;KEY:&quot;</span>, <span class="hljs-number">4</span>i64), v5 = v20, !v7)) )<br>    &#123;<br>      qword_5E0 = v6;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      (*(qword_5F0 + <span class="hljs-number">72</span>))(v5);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( !qword_5E8 )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0x8000000000000015</span>ui64;<br>  v9 = qword_5E0;<br>  <span class="hljs-keyword">if</span> ( qword_5E0 &lt;= <span class="hljs-number">4</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0x8000000000000015</span>ui64;<br>  v10 = qword_4A0;<br>  v11 = qword_5E0 - <span class="hljs-number">1</span>;<br>  v12 = &amp;qword_4A0[<span class="hljs-number">27</span>];<br>  v13 = qword_4A0;<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    v14 = v13[<span class="hljs-number">1</span>];<br>    v15 = v14 + v13[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">while</span> ( v15 &gt; v14 )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v14 &gt;= <span class="hljs-number">0</span> &amp;&amp; v11 &gt;= v14 )<br>        *(v14 + qword_5E8) ^= *v13;<br>      ++v14;<br>    &#125;<br>    v13 += <span class="hljs-number">3</span>;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v12 != v13 );<br>  <span class="hljs-keyword">if</span> ( v9 != <span class="hljs-number">32</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0x8000000000000015</span>ui64;<br>  v16 = qword_5E8;<br>  <span class="hljs-keyword">if</span> ( qword_5E8 != &amp;unk_5A0 &amp;&amp; (sub_240(qword_5E8, &amp;unk_5A0, <span class="hljs-number">32</span>i64) || !v16) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0x8000000000000015</span>ui64;<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    v17 = v10[<span class="hljs-number">1</span>];<br>    v18 = <span class="hljs-number">31</span> - v17;<br>    v19 = <span class="hljs-number">31</span> - (v10[<span class="hljs-number">2</span>] + v17);<br>    <span class="hljs-keyword">while</span> ( v18 &gt; v19 )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v18 &lt;= <span class="hljs-number">0x1F</span> )<br>        *(qword_5E8 + v18) ^= *v10;<br>      --v18;<br>    &#125;<br>    v10 += <span class="hljs-number">3</span>;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v12 != v10 );<br>  <span class="hljs-keyword">if</span> ( (*(qword_5D8 + <span class="hljs-number">88</span>))(<span class="hljs-string">L&quot;ByteCTFOut&quot;</span>, &amp;unk_5C0, <span class="hljs-number">7</span>i64, <span class="hljs-number">32</span>i64, qword_5E8) &gt;= <span class="hljs-number">0</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0x8000000000000015</span>ui64;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实主要加密的地方就是在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">v13 = qword_4A0;<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    v14 = v13[<span class="hljs-number">1</span>];<br>    v15 = v14 + v13[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">while</span> ( v15 &gt; v14 )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v14 &gt;= <span class="hljs-number">0</span> &amp;&amp; v11 &gt;= v14 )<br>        *(v14 + input) ^= *v13;<br>      ++v14;<br>    &#125;<br>    v13 += <span class="hljs-number">3</span>;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v12 != v13 );<br></code></pre></td></tr></table></figure><p>就是一个异或的加密，需要注意异或的数据是v13的每一组的第一个数据，每三个数据分为一组</p><p>第一个数据是异或数据，第二个是下标，第三个是长度</p><p>将v13提取出来</p><p>key &#x3D; [</p><p> [0x62, 1, 0x0B],</p><p> [0x79, 2, 3],</p><p> [0x74, 3, 7],</p><p> [0x65, 4, 0x0E],</p><p> [0x64, 5, 0x0D],</p><p> [0x61, 6, 0x0A],</p><p> [0x6E, 7, 0x0F],</p><p> [0x63, 8, 0x0C],</p><p> [0x65, 9, 0x0A]</p><p>]分别对应xorkey, index, xorlen</p><h5 id="具体加密过程例如："><a href="#具体加密过程例如：" class="headerlink" title="具体加密过程例如："></a>具体加密过程例如：</h5><p>data &#x3D; [    0x4B, 0x27, 0x42, 0x55, 0x48, 0x6E, 0x41, 0x29,    0x1F, 0x5E, 0x04, 0x04,    0x6B, 0x3E, 0x57, 0x5F, 0x08, 0x07, 0x5F, 0x3A,    0x31, 0x17, 0x40, 0x30,    0x5F, 0x7A, 0x75, 0x67, 0x36, 0x36, 0x36, 0x36]</p><h6 id="第一个密钥-0x62-1-0x0B"><a href="#第一个密钥-0x62-1-0x0B" class="headerlink" title="第一个密钥 [0x62, 1, 0x0B]"></a>第一个密钥 [0x62, 1, 0x0B]</h6><ul><li>XOR密钥: <code>0x62</code></li><li>起始索引: <code>1</code></li><li>长度: <code>0x0B</code> (即11)</li></ul><p>解密从索引 <code>1</code> 开始的 <code>11</code> 个字节：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> j in range(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> + <span class="hljs-number">11</span>):<br>    <span class="hljs-attribute">if</span> j &lt; len(data):<br>        <span class="hljs-attribute">data</span>[j] ^= <span class="hljs-number">0</span>x62<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">data</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>x27 ^ <span class="hljs-number">0</span>x62 = <span class="hljs-number">0</span>x45<br><span class="hljs-attribute">data</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>x42 ^ <span class="hljs-number">0</span>x62 = <span class="hljs-number">0</span>x20<br><span class="hljs-attribute">data</span>[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>x55 ^ <span class="hljs-number">0</span>x62 = <span class="hljs-number">0</span>x13<br><span class="hljs-attribute">data</span>[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>x48 ^ <span class="hljs-number">0</span>x62 = <span class="hljs-number">0</span>x26<br><span class="hljs-attribute">data</span>[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>x6E ^ <span class="hljs-number">0</span>x62 = <span class="hljs-number">0</span>x2C<br><span class="hljs-attribute">data</span>[<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>x41 ^ <span class="hljs-number">0</span>x62 = <span class="hljs-number">0</span>x23<br><span class="hljs-attribute">data</span>[<span class="hljs-number">7</span>] = <span class="hljs-number">0</span>x29 ^ <span class="hljs-number">0</span>x62 = <span class="hljs-number">0</span>x4B<br><span class="hljs-attribute">data</span>[<span class="hljs-number">8</span>] = <span class="hljs-number">0</span>x1F ^ <span class="hljs-number">0</span>x62 = <span class="hljs-number">0</span>x73<br><span class="hljs-attribute">data</span>[<span class="hljs-number">9</span>] = <span class="hljs-number">0</span>x5E ^ <span class="hljs-number">0</span>x62 = <span class="hljs-number">0</span>x1C<br><span class="hljs-attribute">data</span>[<span class="hljs-number">10</span>] = <span class="hljs-number">0</span>x04 ^ <span class="hljs-number">0</span>x62 = <span class="hljs-number">0</span>x66<br><span class="hljs-attribute">data</span>[<span class="hljs-number">11</span>] = <span class="hljs-number">0</span>x04 ^ <span class="hljs-number">0</span>x62 = <span class="hljs-number">0</span>x66<br></code></pre></td></tr></table></figure><h4 id="第二个密钥-0x79-2-3"><a href="#第二个密钥-0x79-2-3" class="headerlink" title="第二个密钥 [0x79, 2, 3]"></a>第二个密钥 <code>[0x79, 2, 3]</code></h4><ul><li><strong>XOR密钥</strong>: <code>0x79</code></li><li><strong>起始索引</strong>: <code>2</code></li><li><strong>长度</strong>: <code>3</code></li></ul><p>解密从索引 <code>2</code> 开始的 <code>3</code> 个字节：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> j in range(<span class="hljs-number">2</span>, <span class="hljs-number">2</span> + <span class="hljs-number">3</span>):<br>    <span class="hljs-attribute">if</span> j &lt; len(data):<br>        <span class="hljs-attribute">data</span>[j] ^= <span class="hljs-number">0</span>x79<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">data</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>x42 ^ <span class="hljs-number">0</span>x79 = <span class="hljs-number">0</span>x39<br><span class="hljs-attribute">data</span>[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>x55 ^ <span class="hljs-number">0</span>x79 = <span class="hljs-number">0</span>x26<br><span class="hljs-attribute">data</span>[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>x48 ^ <span class="hljs-number">0</span>x79 = <span class="hljs-number">0</span>x31<br></code></pre></td></tr></table></figure><p>解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> idaapi <span class="hljs-keyword">import</span> *<br>startaddr=<span class="hljs-number">0x5A0</span><br>keyaddr=<span class="hljs-number">0x4A0</span><br>keyarr=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">27</span>,<span class="hljs-number">3</span>):<br>    tmp=[get_qword(keyaddr+i*<span class="hljs-number">8</span>),get_qword(keyaddr+(i+<span class="hljs-number">1</span>)*<span class="hljs-number">8</span>),get_qword(keyaddr+(i+<span class="hljs-number">2</span>)*<span class="hljs-number">8</span>)]<br>    keyarr.append(tmp)<br><span class="hljs-comment">#print(keyarr) #[[xorkey,index,xorlen],...]</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(keyarr)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(keyarr[i][<span class="hljs-number">1</span>],keyarr[i][<span class="hljs-number">1</span>]+keyarr[i][<span class="hljs-number">2</span>]):<br>        patch_byte(startaddr+j,get_byte(startaddr+j)^keyarr[i][<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(get_bytes(startaddr,<span class="hljs-number">32</span>))<br></code></pre></td></tr></table></figure><p>得到结果：b’KEY:By71d@nnc6_Wan77_y@0_zug6666’</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202409260108248.png" alt="image-20240926010835140"></p><p>flag:ByteCTF{KEY:By71d@nnc6_Wan77_y@0_zug6666BwAAAEsnQlVIbkEpH15qamZW}</p>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++学习笔记</title>
    <link href="/2024/08/07/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/08/07/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="C-学习笔记"><a href="#C-学习笔记" class="headerlink" title="C++学习笔记"></a>C++学习笔记</h1><p>基础：<a href="https://blog.csdn.net/james_sky_/article/details/124664934">https://blog.csdn.net/james_sky_/article/details/124664934</a></p><p>感觉其实没什么快速过一下就行</p><blockquote><p>istream：常用于接收从键盘输入的数据；<br>ostream：常用于将数据输出到屏幕上；<br>ifstream：用于读取文件中的数据；<br>ofstream：用于向文件中写入数据；<br>iostream：继承自 istream 和 ostream 类，因为该类的功能兼两者于一身，既能用于输入，也能用于输出；<br>fstream：兼 ifstream 和 ofstream 类功能于一身，既能读取文件中的数据，又能向文件中写入数据。</p></blockquote><p>下文来自菜鸟教程：<a href="https://www.runoob.com/cplusplus/cpp-intro.html">C++ 简介 | 菜鸟教程 (runoob.com)</a></p><p>下面是一些自己觉得比较重要的东西，我只是菜鸟教程的搬运工~</p><h2 id="编译-执行-C-程序"><a href="#编译-执行-C-程序" class="headerlink" title="编译 &amp; 执行 C++ 程序"></a><strong>编译 &amp; 执行 C++ 程序</strong></h2><p>$ g++ hello.cpp<br>$ .&#x2F;a.out<br>Hello World</p><ul><li>键入 ‘g++ hello.cpp ‘，输入回车，编译代码。如果代码中没有错误，命令提示符会跳到下一行，并生成 a.out 可执行文件。</li><li>现在，键入 ‘ a.out’ 来运行程序。</li><li>您可以看到屏幕上显示 ‘ Hello World ‘。</li></ul><h2 id="C-标识符"><a href="#C-标识符" class="headerlink" title="C++ 标识符"></a>C++ 标识符</h2><p>C++ 标识符是用来标识变量、函数、类、模块，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）</p><h2 id="C-关键字"><a href="#C-关键字" class="headerlink" title="C++ 关键字"></a>C++ 关键字</h2><p>下表列出了 C++ 中的保留字。这些保留字不能作为常量名、变量名或其他标识符名称。</p><table><thead><tr><th>asm</th><th>else</th><th>new</th><th>this</th></tr></thead><tbody><tr><td>auto</td><td>enum</td><td>operator</td><td>throw</td></tr><tr><td>bool</td><td>explicit</td><td>private</td><td>true</td></tr><tr><td>break</td><td>export</td><td>protected</td><td>try</td></tr><tr><td>case</td><td>extern</td><td>public</td><td>typedef</td></tr><tr><td>catch</td><td>false</td><td>register</td><td>typeid</td></tr><tr><td>char</td><td>float</td><td>reinterpret_cast</td><td>typename</td></tr><tr><td>class</td><td>for</td><td>return</td><td>union</td></tr><tr><td>const</td><td>friend</td><td>short</td><td>unsigned</td></tr><tr><td>const_cast</td><td>goto</td><td>signed</td><td>using</td></tr><tr><td>continue</td><td>if</td><td>sizeof</td><td>virtual</td></tr><tr><td>default</td><td>inline</td><td>static</td><td>void</td></tr><tr><td>delete</td><td>int</td><td>static_cast</td><td>volatile</td></tr><tr><td>do</td><td>long</td><td>struct</td><td>wchar_t</td></tr><tr><td>double</td><td>mutable</td><td>switch</td><td>while</td></tr><tr><td>dynamic_cast</td><td>namespace</td><td>template</td><td></td></tr></tbody></table><h2 id="基本的内置类型"><a href="#基本的内置类型" class="headerlink" title="基本的内置类型"></a>基本的内置类型</h2><p>C++ 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。下表列出了七种基本的 C++ 数据类型：</p><table><thead><tr><th>类型</th><th>关键字</th></tr></thead><tbody><tr><td>布尔型</td><td>bool</td></tr><tr><td>字符型</td><td>char</td></tr><tr><td>整型</td><td>int</td></tr><tr><td>浮点型</td><td>float</td></tr><tr><td>双浮点型</td><td>double</td></tr><tr><td>无类型</td><td>void</td></tr><tr><td>宽字符型</td><td>wchar_t</td></tr><tr><td></td><td></td></tr></tbody></table><p>其实 wchar_t 是这样来的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">wchar_t</span>;<br></code></pre></td></tr></table></figure><p>所以 wchar_t 实际上的空间是和 short int 一样。</p><p>一些基本类型可以使用一个或多个类型修饰符进行修饰：</p><ul><li>signed</li><li>unsigned</li><li>short</li><li>long</li></ul><p>下表显示了各种变量类型在内存中存储值时需要占用的内存，以及该类型的变量所能存储的最大值和最小值。</p><p><strong>注意：</strong>不同系统会有所差异，一字节为 8 位。</p><p><strong>注意：</strong>默认情况下，int、short、long都是带符号的，即 signed。</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071530062.png" alt="Untitled"></p><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>枚举类型(enumeration)是C++中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。</p><p>如果一个变量只有几种可能的值，可以定义为枚举(enumeration)类型。所谓”枚举”是指将变量的值一一列举出来，变量的值只能在列举出来的值的范围内。</p><p>创建枚举，需要使用关键字 <strong>enum</strong>。枚举类型的一般形式为：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">enum 枚举名&#123;<br>     标识符[=整型常数],<br>     标识符[=整型常数],<br>...<br>    标识符[=整型常数]<br>&#125; 枚举变量;<br><br></code></pre></td></tr></table></figure><p>如果枚举没有初始化, 即省掉”&#x3D;整型常数”时, 则从第一个标识符开始。</p><p>例如，下面的代码定义了一个颜色枚举，变量 c 的类型为 color。最后，c 被赋值为 “red”。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">enum</span> <span class="hljs-type">color</span> &#123; <span class="hljs-built_in">red</span>, <span class="hljs-built_in">green</span>, <span class="hljs-built_in">blue</span> &#125; c;<br><span class="hljs-comment">//若为c = blue，则c=2</span><br></code></pre></td></tr></table></figure><p>默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2，以此类推。但是，您也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。例如，在下面的枚举中，<strong>green</strong> 的值为 5。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">enum</span> <span class="hljs-type">color</span> &#123; <span class="hljs-built_in">red</span>, <span class="hljs-built_in">green</span>=<span class="hljs-number">5</span>, <span class="hljs-built_in">blue</span> &#125;;<br></code></pre></td></tr></table></figure><p>在这里，<strong>blue</strong> 的值为 6，因为默认情况下，每个名称都会比它前面一个名称大 1，但 red 的值依然为 0。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>类型转换是将一个数据类型的值转换为另一种数据类型的值。</p><p>C++ 中有四种类型转换：静态转换、动态转换、常量转换和重新解释转换。</p><h2 id="动态转换（Dynamic-Cast）"><a href="#动态转换（Dynamic-Cast）" class="headerlink" title="动态转换（Dynamic Cast）"></a><strong>动态转换（Dynamic Cast）</strong></h2><p>动态转换通常用于将一个基类指针或引用转换为派生类指针或引用。动态转换在运行时进行类型检查，如果不能进行转换则返回空指针或引发异常。</p><p>class Base {};<br>class Derived : public Base {};<br>Base* ptr_base &#x3D; new Derived;<br>Derived* ptr_derived &#x3D; dynamic_cast&lt;Derived*&gt;(ptr_base); &#x2F;&#x2F; 将基类指针转换为派生类指针</p><p>补充详解：</p><h3 id="第一行：向上转型（Upcasting）"><a href="#第一行：向上转型（Upcasting）" class="headerlink" title="第一行：向上转型（Upcasting）"></a>第一行：向上转型（Upcasting）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cppCopy Code<br>Base* ptr_base = <span class="hljs-keyword">new</span> Derived;<br><br></code></pre></td></tr></table></figure><ol><li><strong>创建对象：</strong> <code>new Derived</code> 创建了一个 <code>Derived</code> 类的对象。</li><li><strong>指针赋值：</strong> <code>Base* ptr_base = ...</code> 将这个 <code>Derived</code> 类的对象的地址赋给了一个 <code>Base*</code> 类型的指针 <code>ptr_base</code>。</li></ol><p>这种操作被称为向上转型（Upcasting），因为我们把一个指向派生类对象的指针（<code>Derived*</code>）隐式地转换为一个指向基类的指针（<code>Base*</code>）。基类指针可以指向派生类对象，但是它只能访问基类中定义的成员，不能访问派生类新增加的成员或修改后的成员。</p><h3 id="第二行：动态类型转换（Dynamic-Cast）"><a href="#第二行：动态类型转换（Dynamic-Cast）" class="headerlink" title="第二行：动态类型转换（Dynamic Cast）"></a>第二行：动态类型转换（Dynamic Cast）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cppCopy Code<br>Derived* ptr_derived = <span class="hljs-built_in">dynamic_cast</span>&lt;Derived*&gt;(ptr_base);<br><br></code></pre></td></tr></table></figure><ol><li><strong>动态类型转换：</strong> <code>dynamic_cast&lt;Derived*&gt;(ptr_base)</code> 这里使用了动态类型转换 <code>dynamic_cast</code>。</li><li><strong>转换过程：</strong> 动态类型转换允许将基类指针或引用安全地转换为派生类指针或引用。在运行时，它会检查 <code>ptr_base</code> 所指向的对象的实际类型是否是 <code>Derived</code> 类型或其派生类。</li><li><strong>转换结果：</strong><ul><li>如果 <code>ptr_base</code> 实际指向的是一个 <code>Derived</code> 类型的对象，那么转换成功，<code>ptr_derived</code> 将指向这个 <code>Derived</code> 类型的对象。</li><li>如果 <code>ptr_base</code> 实际指向的不是 <code>Derived</code> 类型的对象，而是其他类型（例如另一个基类类型的对象），那么转换失败，<code>dynamic_cast</code> 会返回 <code>nullptr</code>（空指针）。</li></ul></li></ol><h3 id="使用动态类型转换的原因"><a href="#使用动态类型转换的原因" class="headerlink" title="使用动态类型转换的原因"></a>使用动态类型转换的原因</h3><p>动态类型转换通常用于以下情况：</p><ul><li><strong>安全的向下转型：</strong> 当你有一个基类指针或引用，但你知道它实际上指向的是某个派生类对象时，你可以使用 <code>dynamic_cast</code> 将其转换为派生类指针，以便访问派生类特有的方法和属性。</li><li><strong>类型检查：</strong> 如果你不确定一个基类指针或引用是否指向了某个特定派生类对象，你可以使用 <code>dynamic_cast</code> 进行安全的检查和转换，避免类型不匹配的错误。</li></ul><p>总结来说，<code>Base* ptr_base = new Derived;</code> 创建了一个 <code>Derived</code> 类的对象，并用基类指针指向它；<code>dynamic_cast&lt;Derived*&gt;(ptr_base);</code> 则尝试将基类指针转换为派生类指针，以便安全地访问派生类的成员。</p><h2 id="C-中的左值（Lvalues）和右值（Rvalues）"><a href="#C-中的左值（Lvalues）和右值（Rvalues）" class="headerlink" title="C++ 中的左值（Lvalues）和右值（Rvalues）"></a>C++ 中的左值（Lvalues）和右值（Rvalues）</h2><p>C++ 中有两种类型的表达式：</p><ul><li><strong>左值（lvalue）：</strong>指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li><li><strong>右值（rvalue）：</strong>术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li></ul><p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。下面是一个有效的语句：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int g <span class="hljs-operator">=</span> <span class="hljs-number">20</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>但是下面这个就不是一个有效的语句，会生成编译时错误：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span>= <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/cplusplus/cpp-variable-scope.html">C++ 变量作用域 | 菜鸟教程 (runoob.com)</a></p><h2 id="static-存储类"><a href="#static-存储类" class="headerlink" title="static 存储类"></a>static 存储类</h2><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p><p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p><p>在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。</p><h2 id="extern-存储类"><a href="#extern-存储类" class="headerlink" title="extern 存储类"></a>extern 存储类</h2><p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 ‘extern’ 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p><p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的<strong>形式参数</strong>。</p><p>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p><p>当调用函数时，有三种向函数传递参数的方式：</p><table><thead><tr><th>调用类型</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-value.html">https://www.runoob.com/cplusplus/cpp-function-call-by-value.html</a></td><td>该方法把参数的实际值赋值给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。</td></tr><tr><td><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-pointer.html">https://www.runoob.com/cplusplus/cpp-function-call-by-pointer.html</a></td><td>该方法把参数的地址赋值给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td></tr><tr><td><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-reference.html">https://www.runoob.com/cplusplus/cpp-function-call-by-reference.html</a></td><td>该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td></tr></tbody></table><p>默认情况下，C++ 使用<strong>传值调用</strong>来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的参数。之前提到的实例，调用 max() 函数时，使用了相同的方法。</p><p><strong>Lambda 函数与表达式</strong></p><p>在 C++ 中，除了可以创建各种函数，还包含了各种有用的函数供您使用。这些函数写在标准 C 和 C++ 库中，叫做<strong>内置</strong>函数。</p><h2 id="C-随机数"><a href="#C-随机数" class="headerlink" title="C++ 随机数"></a>C++ 随机数</h2><p>在许多情况下，需要生成随机数。关于随机数生成器，有两个相关的函数。一个是 **rand()**，该函数只返回一个伪随机数。生成随机数之前必须先调用 <strong>srand()</strong> 函数。</p><p>下面是一个关于生成随机数的简单实例。实例中使用了 <strong>time()</strong> 函数来获取系统时间的秒数，通过调用 rand() 函数来生成随机数：</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>#include <iostream><br>#include <ctime><br>#include <cstdlib></p><p>using namespace std;</p><p>int main ()<br>{<br>   int i,j;</p><p>   &#x2F;&#x2F; 设置种子<br>   srand( (unsigned)time( NULL ) );</p><p>   &#x2F;* 生成 10 个随机数 *&#x2F;<br>   for( i &#x3D; 0; i &lt; 10; i++ )<br>   {<br>      &#x2F;&#x2F; 生成实际的随机数<br>      j&#x3D; rand();<br>      cout &lt;&lt;”随机数： “ &lt;&lt; j &lt;&lt; endl;<br>   }</p><p>   return 0;<br>}</p><p><a href="https://www.runoob.com/cplusplus/cpp-return-arrays-from-function.html">https://www.runoob.com/cplusplus/cpp-return-arrays-from-function.html</a></p><p><a href="https://www.runoob.com/cplusplus/cpp-references.html">https://www.runoob.com/cplusplus/cpp-references.html</a></p><p><a href="https://www.runoob.com/cplusplus/cpp-vector.html">https://www.runoob.com/cplusplus/cpp-vector.html</a></p><h2 id="面向对象开发的四大特性："><a href="#面向对象开发的四大特性：" class="headerlink" title="面向对象开发的四大特性："></a>面向对象开发的四大特性：</h2><ul><li><strong>封装（Encapsulation）</strong>：封装是将数据和方法组合在一起，对外部隐藏实现细节，只公开对外提供的接口。这样可以提高安全性、可靠性和灵活性。</li><li><strong>继承（Inheritance）</strong>：继承是从已有类中派生出新类，新类具有已有类的属性和方法，并且可以扩展或修改这些属性和方法。这样可以提高代码的复用性和可扩展性。</li><li><strong>多态（Polymorphism）</strong>：多态是指同一种操作作用于不同的对象，可以有不同的解释和实现。它可以通过接口或继承实现，可以提高代码的灵活性和可读性。</li><li><strong>抽象（Abstraction）</strong>：抽象是从具体的实例中提取共同的特征，形成抽象类或接口，以便于代码的复用和扩展。抽象类和接口可以让程序员专注于高层次的设计和业务逻辑，而不必关注底层的实现细节。</li></ul><h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><p>标准的 C++ 由三个重要部分组成：</p><ul><li>核心语言，提供了所有构件块，包括变量、数据类型和常量，等等。</li><li>C++ 标准库，提供了大量的函数，用于操作文件、字符串等。</li><li>标准模板库（STL），提供了大量的方法，用于操作数据结构等。</li></ul><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071530011.png" alt="Untitled"></p><h2 id="C-类成员函数"><a href="#C-类成员函数" class="headerlink" title="C++ 类成员函数"></a><strong>C++ 类成员函数</strong></h2><p>类的成员函数是指那些把定义和原型写在类定义内部的函数，就像类定义中的其他变量一样。类成员函数是类的一个成员，它可以操作类的任意对象，可以访问对象中的所有成员。</p><p>class Box<br>{<br>public:<br>double length;         &#x2F;&#x2F; 长度<br>double breadth;        &#x2F;&#x2F; 宽度<br>double height;         &#x2F;&#x2F; 高度<br>double getVolume(void);&#x2F;&#x2F; 返回体积<br>};</p><p>成员函数可以定义在类定义内部，或者单独使用<strong>范围解析运算符 ::</strong> 来定义。在类定义中定义的成员函数把函数声明为<strong>内联</strong>的，即便没有使用 inline 标识符。所以可以按照如下方式定义 <strong>getVolume()</strong> 函数：<br>class Box<br>{<br>public:<br>double length;      &#x2F;&#x2F; 长度<br>double breadth;     &#x2F;&#x2F; 宽度<br>double height;      &#x2F;&#x2F; 高度</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getVolume</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">return</span> length * breadth * height;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>};</p><p>也可以在类的外部使用<strong>范围解析运算符 ::</strong> 定义该函数，如下所示：</p><p>double Box::getVolume(void)<br>{<br>return length * breadth * height;<br>}</p><h2 id="C-类访问修饰符"><a href="#C-类访问修饰符" class="headerlink" title="C++ 类访问修饰符"></a><strong>C++ 类访问修饰符</strong></h2><p>数据封装是面向对象编程的一个重要特点，它防止函数直接访问类类型的内部成员。类成员的访问限制是通过在类主体内部对各个区域标记 <strong>public、private、protected</strong> 来指定的。关键字 <strong>public、private、protected</strong> 称为访问修饰符。</p><p>一个类可以有多个 public、protected 或 private 标记区域。每个标记区域在下一个标记区域开始之前或者在遇到类主体结束右括号之前都是有效的。成员和类的默认访问修饰符是 private。</p><p>class Base {</p><p>public:</p><p>&#x2F;&#x2F; 公有成员</p><p>protected:</p><p>&#x2F;&#x2F; 受保护成员</p><p>private:</p><p>&#x2F;&#x2F; 私有成员</p><p>};</p><h2 id="私有（private）成员"><a href="#私有（private）成员" class="headerlink" title="私有（private）成员"></a>私有（private）成员</h2><p><strong>私有</strong>成员变量或函数在类的外部是不可访问的，甚至是不可查看的。只有类和友元函数可以访问私有成员。</p><p>默认情况下，类的所有成员都是私有的。例如在下面的类中，<strong>width</strong> 是一个私有成员，这意味着，如果您没有使用任何访问修饰符，类的成员将被假定为私有成员：</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>class Box<br>{<br>   double width;<br>   public:<br>      double length;<br>      void setWidth( double wid );<br>      double getWidth( void );<br>};</p><p>实际操作中，我们一般会在私有区域定义数据，在公有区域定义相关的函数，以便在类的外部也可以调用这些函数，如下所示：</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>#include <iostream></p><p>using namespace std;</p><p>class Box<br>{<br>   public:<br>      double length;<br>      void setWidth( double wid );<br>      double getWidth( void );</p><p>   private:<br>      double width;<br>};</p><p>&#x2F;&#x2F; 成员函数定义<br>double Box::getWidth(void)<br>{<br>    return width ;<br>}</p><p>void Box::setWidth( double wid )<br>{<br>    width &#x3D; wid;<br>}</p><p>&#x2F;&#x2F; 程序的主函数<br>int main( )<br>{<br>   Box box;</p><p>   &#x2F;&#x2F; 不使用成员函数设置长度<br>   box.length &#x3D; 10.0; &#x2F;&#x2F; OK: 因为 length 是公有的<br>   cout &lt;&lt; “Length of box : “ &lt;&lt; box.length &lt;&lt;endl;</p><p>   &#x2F;&#x2F; 不使用成员函数设置宽度<br>   &#x2F;&#x2F; box.width &#x3D; 10.0; &#x2F;&#x2F; Error: 因为 width 是私有的<br>   box.setWidth(10.0);  &#x2F;&#x2F; 使用成员函数设置宽度<br>   cout &lt;&lt; “Width of box : “ &lt;&lt; box.getWidth() &lt;&lt;endl;</p><p>   return 0;<br>}</p><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">Length <span class="hljs-keyword">of</span> box : 10<br>Width <span class="hljs-keyword">of</span> box : 10<br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html">https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html</a></p><p>案例需要认真看一下，有一些细节</p><h2 id="protected（受保护）成员"><a href="#protected（受保护）成员" class="headerlink" title="protected（受保护）成员"></a>protected（受保护）成员</h2><p><strong>protected（受保护）</strong>成员变量或函数与私有成员十分相似，但有一点不同，protected（受保护）成员在派生类（即子类）中是可访问的。</p><h3 id="protected-继承"><a href="#protected-继承" class="headerlink" title="protected 继承"></a><strong>protected 继承</strong></h3><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>#include<iostream><br>#include&lt;assert.h&gt;<br>using namespace std;<br>class A{<br>public:<br>  int a;<br>  A(){<br>    a1 &#x3D; 1;<br>    a2 &#x3D; 2;<br>    a3 &#x3D; 3;<br>    a &#x3D; 4;<br>  }<br>  void fun(){<br>    cout &lt;&lt; a &lt;&lt; endl;    &#x2F;&#x2F;正确<br>    cout &lt;&lt; a1 &lt;&lt; endl;   &#x2F;&#x2F;正确<br>    cout &lt;&lt; a2 &lt;&lt; endl;   &#x2F;&#x2F;正确<br>    cout &lt;&lt; a3 &lt;&lt; endl;   &#x2F;&#x2F;正确<br>  }<br>public:<br>  int a1;<br>protected:<br>  int a2;<br>private:<br>  int a3;<br>};<br>class B : protected A{<br>public:<br>  int a;<br>  B(int i){<br>    A();<br>    a &#x3D; i;<br>  }<br>  void fun(){          &#x2F;&#x2F;注意！！！！<br>    cout &lt;&lt; a &lt;&lt; endl;       &#x2F;&#x2F;正确，public成员。<br>    cout &lt;&lt; a1 &lt;&lt; endl;       &#x2F;&#x2F;正确，基类的public成员，在派生类中变成了protected，可以被派生类访问。<br>    cout &lt;&lt; a2 &lt;&lt; endl;       &#x2F;&#x2F;正确，基类的protected成员，在派生类中还是protected，可以被派生类访问。<br>    cout &lt;&lt; a3 &lt;&lt; endl;       &#x2F;&#x2F;错误，基类的private成员不能被派生类访问。<br>  }<br>};<br>int main(){                         &#x2F;&#x2F;注意这个地方main函数！！！！<br>  B b(10);<br>  cout &lt;&lt; b.a &lt;&lt; endl;       &#x2F;&#x2F;正确。public成员<br>  cout &lt;&lt; b.a1 &lt;&lt; endl;      &#x2F;&#x2F;错误，protected成员不能在类外访问。<br>  cout &lt;&lt; b.a2 &lt;&lt; endl;      &#x2F;&#x2F;错误，protected成员不能在类外访问。<br>  cout &lt;&lt; b.a3 &lt;&lt; endl;      &#x2F;&#x2F;错误，private成员不能在类外访问。<br>  system(“pause”);<br>  return 0;<br>}</p><h2 id="C-类构造函数-析构函数"><a href="#C-类构造函数-析构函数" class="headerlink" title="C++ 类构造函数 &amp; 析构函数"></a><strong>C++ 类构造函数 &amp; 析构函数</strong></h2><h2 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="类的构造函数"></a><strong>类的构造函数</strong></h2><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071530755.png" alt="Untitled"></p><h2 id="带参数的构造函数"><a href="#带参数的构造函数" class="headerlink" title="带参数的构造函数"></a><strong>带参数的构造函数</strong></h2><p>默认的构造函数没有任何参数，但如果需要，构造函数也可以带有参数。这样在创建对象时就会给对象赋初始值</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071530669.png" alt="Untitled"></p><h2 id="类的析构函数"><a href="#类的析构函数" class="headerlink" title="类的析构函数"></a>类的析构函数</h2><p>类的<strong>析构函数</strong>是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行。</p><p>析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。</p><p>#include <iostream></p><p>using namespace std;</p><p>class Line<br>{<br>public:<br>void setLength( double len );<br>double getLength( void );<br>Line();   &#x2F;&#x2F; 这是构造函数声明<br>~Line();  &#x2F;&#x2F; 这是析构函数声明</p><p>private:<br>double length;<br>};</p><p>&#x2F;&#x2F; 成员函数定义，包括构造函数<br>Line::Line(void)<br>{<br>cout &lt;&lt; “Object is being created” &lt;&lt; endl;<br>}<br>Line::~Line(void)<br>{<br>cout &lt;&lt; “Object is being deleted” &lt;&lt; endl;<br>}</p><p>void Line::setLength( double len )<br>{<br>length &#x3D; len;<br>}</p><p>double Line::getLength( void )<br>{<br>return length;<br>}<br>&#x2F;&#x2F; 程序的主函数<br>int main( )<br>{<br>Line line;</p><p>&#x2F;&#x2F; 设置长度<br>line.setLength(6.0);<br>cout &lt;&lt; “Length of line : “ &lt;&lt; line.getLength() &lt;&lt;endl;</p><p>return 0;<br>}</p><h2 id="C-拷贝构造函数"><a href="#C-拷贝构造函数" class="headerlink" title="C++ 拷贝构造函数"></a><strong>C++ 拷贝构造函数</strong></h2><p><a href="https://www.runoob.com/cplusplus/cpp-copy-constructor.html">https://www.runoob.com/cplusplus/cpp-copy-constructor.html</a></p><h2 id="C-内联函数"><a href="#C-内联函数" class="headerlink" title="C++ 内联函数"></a><strong>C++ 内联函数</strong></h2><p><a href="https://www.runoob.com/cplusplus/cpp-inline-functions.html">https://www.runoob.com/cplusplus/cpp-inline-functions.html</a></p><p>C++ <strong>内联函数</strong>是通常与类一起使用。如果一个函数是内联的，那么在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方。</p><p>对内联函数进行任何修改，都需要重新编译函数的所有客户端，因为编译器需要重新更换一次所有的代码，否则将会继续使用旧的函数。</p><p>如果想把一个函数定义为内联函数，则需要在函数名前面放置关键字 <strong>inline</strong>，在调用函数之前需要对函数进行定义。如果已定义的函数多于一行，编译器会忽略 inline 限定符。</p><p>在类定义中的定义的函数都是内联函数，即使没有使用 <strong>inline</strong> 说明符。</p><p>#include <iostream></p><p>using namespace std;</p><p>inline int Max(int x, int y)<br>{<br>return (x &gt; y)? x : y;<br>}</p><p>&#x2F;&#x2F; 程序的主函数<br>int main( )<br>{</p><p>cout &lt;&lt; “Max (20,10): “ &lt;&lt; Max(20,10) &lt;&lt; endl;<br>cout &lt;&lt; “Max (0,200): “ &lt;&lt; Max(0,200) &lt;&lt; endl;<br>cout &lt;&lt; “Max (100,1010): “ &lt;&lt; Max(100,1010) &lt;&lt; endl;<br>return 0;<br>}</p><h2 id="C-this-指针"><a href="#C-this-指针" class="headerlink" title="C++ this 指针"></a><strong>C++ this 指针</strong></h2><p><a href="https://www.runoob.com/cplusplus/cpp-this-pointer.html">https://www.runoob.com/cplusplus/cpp-this-pointer.html</a></p><p>在 C++ 中，<strong>this</strong> 指针是一个特殊的指针，它指向当前对象的实例。</p><p>在 C++ 中，每一个对象都能通过 <strong>this</strong> 指针来访问自己的地址。</p><p><strong>this</strong>是一个隐藏的指针，可以在类的成员函数中使用，它可以用来指向调用对象。</p><p>当一个对象的成员函数被调用时，编译器会隐式地传递该对象的地址作为 this 指针。</p><p>友元函数没有 <strong>this</strong> 指针，因为友元不是类的成员，只有成员函数才有 <strong>this</strong> 指针。</p><h2 id="C-指向类的指针"><a href="#C-指向类的指针" class="headerlink" title="C++ 指向类的指针"></a><strong>C++ 指向类的指针</strong></h2><p><a href="https://www.runoob.com/cplusplus/cpp-pointer-to-class.html">https://www.runoob.com/cplusplus/cpp-pointer-to-class.html</a></p><p>一个指向 C++ 类的指针与指向结构的指针类似，访问指向类的指针的成员，需要使用成员访问运算符 **-&gt;**，就像访问指向结构的指针一样。与所有的指针一样，必须在使用指针之前，对指针进行初始化。</p><p>在 C++ 中，指向类的指针指向一个类的对象，与普通的指针相似，指向类的指针可以用于访问对象的成员变量和成员函数。</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071530641.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071531586.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071530348.png" alt="Untitled"></p><h2 id="C-类的静态成员"><a href="#C-类的静态成员" class="headerlink" title="C++ 类的静态成员"></a><strong>C++ 类的静态成员</strong></h2><p><a href="https://www.runoob.com/cplusplus/cpp-static-members.html">https://www.runoob.com/cplusplus/cpp-static-members.html</a></p><p>我们可以使用 <strong>static</strong> 关键字来把类成员定义为静态的。当我们声明类的成员为静态时，这意味着无论创建多少个类的对象，静态成员都只有一个副本。</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071531434.png" alt="Untitled"></p><p>静态成员在类的所有对象中是共享的。如果不存在其他的初始化语句，在创建第一个对象时，所有的静态数据都会被初始化为零。我们不能把静态成员的初始化放置在类的定义中，但是可以在类的外部通过使用范围解析运算符 <strong>::</strong> 来重新声明静态变量从而对它进行初始化</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071531993.png" alt="Untitled"></p><h2 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a><strong>静态成员函数</strong></h2><p>如果把函数成员声明为静态的，就可以把函数与类的任何特定对象独立开来。静态成员函数即使在类对象不存在的情况下也能被调用，<strong>静态函数</strong>只要使用类名加范围解析运算符 <strong>::</strong> 就可以访问。</p><p>静态成员函数只能访问静态成员数据、其他静态成员函数和类外部的其他函数。</p><p>静态成员函数有一个类范围，他们不能访问类的 this 指针。可以使用静态成员函数来判断类的某些对象是否已被创建。</p><blockquote><p>静态成员函数与普通成员函数的区别：</p><ul><li>静态成员函数没有 this 指针，只能访问静态成员（包括静态成员变量和静态成员函数）。</li><li>普通成员函数有 this 指针，可以访问类中的任意成员；而静态成员函数没有 this 指针。</li></ul></blockquote><h2 id="C-继承"><a href="#C-继承" class="headerlink" title="C++ 继承"></a><strong>C++ 继承</strong></h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">derived</span>-<span class="hljs-keyword">class</span>: access-specifier base-<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p>其中，访问修饰符 access-specifier 是 <strong>public、protected</strong> 或 <strong>private</strong> 其中的一个，base-class 是之前定义过的某个类的名称。如果未使用访问修饰符 access-specifier，则默认为 private。</p><h2 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h2><p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p><p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p><ul><li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li><li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li><li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li></ul><h2 id="C-重载运算符和重载函数"><a href="#C-重载运算符和重载函数" class="headerlink" title="C++ 重载运算符和重载函数"></a><strong>C++ 重载运算符和重载函数</strong></h2><p><a href="https://www.runoob.com/cplusplus/cpp-overloading.html">https://www.runoob.com/cplusplus/cpp-overloading.html</a></p><p><em>C++ 允许在同一作用域中的某个<strong>函数</strong>和<strong>运算符</strong>指定多个定义，分别称为<strong>函数重载</strong>和<strong>运算符重载</strong>。</em></p><p><em>重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。</em></p><p><em>当您调用一个<strong>重载函数</strong>或<strong>重载运算符</strong>时，编译器通过把您所使用的参数类型与定义中的参数类型进行比较，决定选用最合适的定义。选择最合适的重载函数或重载运算符的过程，称为<strong>重载决策</strong>。</em></p><h3 id="C-中的运算符重载"><a href="#C-中的运算符重载" class="headerlink" title="C++ 中的运算符重载"></a><strong>C++ 中的运算符重载</strong></h3><p>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Box</span> <span class="hljs-keyword">operator</span>+(const <span class="hljs-type">Box</span>&amp;);<br></code></pre></td></tr></table></figure><h1 id="C-多态"><a href="#C-多态" class="headerlink" title="C++ 多态"></a>C++ 多态</h1><p><a href="https://www.runoob.com/cplusplus/cpp-polymorphism.html">https://www.runoob.com/cplusplus/cpp-polymorphism.html</a></p><p><strong>多态</strong>按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。</p><p>C++ 多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数。</p><p><strong>静态多态</strong>，或<strong>静态链接</strong> - 函数调用在程序执行前就准备好了。有时候这也被称为<strong>早绑定</strong>，因为 area() 函数在程序编译期间就已经设置好了。</p><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p><strong>虚函数</strong> 是在基类中使用关键字 <strong>virtual</strong> 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。</p><p>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为<strong>动态链接</strong>，或<strong>后期绑定</strong>。</p><h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><p>可能想要在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是您在基类中又不能对虚函数给出有意义的实现，这个时候就会用到纯虚函数。</p><p>我们可以把基类中的虚函数 area() 改写如下：</p><p>class Shape {<br>   protected:<br>      int width, height;<br>   public:<br>      Shape( int a&#x3D;0, int b&#x3D;0)<br>      {<br>         width &#x3D; a;<br>         height &#x3D; b;<br>      }<br>      &#x2F;&#x2F; pure virtual function<br>      virtual int area() &#x3D; 0;<br>};</p><p>&#x3D; 0 告诉编译器，函数没有主体，上面的虚函数是<strong>纯虚函数</strong>。</p><h2 id="C-高级教程"><a href="#C-高级教程" class="headerlink" title="C++高级教程"></a>C++高级教程</h2><h2 id="C-异常处理"><a href="#C-异常处理" class="headerlink" title="C++ 异常处理"></a><strong>C++ 异常处理</strong></h2><p><a href="https://www.runoob.com/cplusplus/cpp-exceptions-handling.html">https://www.runoob.com/cplusplus/cpp-exceptions-handling.html</a></p><p>异常是程序在执行期间产生的问题。C++ 异常是指在程序运行时发生的特殊情况，比如尝试除以零的操作。</p><p>异常提供了一种转移程序控制权的方式。C++ 异常处理涉及到三个关键字：<strong>try、catch、throw</strong>。</p><ul><li><strong>throw:</strong> 当问题出现时，程序会抛出一个异常。这是通过使用 <strong>throw</strong> 关键字来完成的。</li><li><strong>catch:</strong> 在您想要处理问题的地方，通过异常处理程序捕获异常。<strong>catch</strong> 关键字用于捕获异常。</li><li><strong>try:</strong> <strong>try</strong> 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。</li></ul><p>如果有一个块抛出一个异常，捕获异常的方法会使用 <strong>try</strong> 和 <strong>catch</strong> 关键字。try 块中放置可能抛出异常的代码，try 块中的代码被称为保护代码。使用 try&#x2F;catch 语句的语法如下所示：</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071531606.png" alt="Untitled"></p><h2 id="C-标准的异常"><a href="#C-标准的异常" class="headerlink" title="C++ 标准的异常"></a>C++ 标准的异常</h2><p>C++ 提供了一系列标准的异常，定义在 <strong><exception></strong> 中，我们可以在程序中使用这些标准的异常。它们是以父子类层次结构组织起来的，如下所示：</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071531951.png" alt="https://www.runoob.com/wp-content/uploads/2015/05/exceptions_in_cpp.png"></p><p>下表是对上面层次结构中出现的每个异常的说明：</p><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td>std::exception</td><td>该异常是所有标准 C++ 异常的父类。</td></tr><tr><td>std::bad_alloc</td><td>该异常可以通过 new 抛出。</td></tr><tr><td>std::bad_cast</td><td>该异常可以通过 dynamic_cast 抛出。</td></tr><tr><td>std::bad_typeid</td><td>该异常可以通过 typeid 抛出。</td></tr><tr><td>std::bad_exception</td><td>这在处理 C++ 程序中无法预期的异常时非常有用。</td></tr><tr><td>std::logic_error</td><td>理论上可以通过读取代码来检测到的异常。</td></tr><tr><td>std::domain_error</td><td>当使用了一个无效的数学域时，会抛出该异常。</td></tr><tr><td>std::invalid_argument</td><td>当使用了无效的参数时，会抛出该异常。</td></tr><tr><td>std::length_error</td><td>当创建了太长的 std::string 时，会抛出该异常。</td></tr><tr><td>std::out_of_range</td><td>该异常可以通过方法抛出，例如 std::vector 和 std::bitset&lt;&gt;::operator<a href=""></a>。</td></tr><tr><td>std::runtime_error</td><td>理论上不可以通过读取代码来检测到的异常。</td></tr><tr><td>std::overflow_error</td><td>当发生数学上溢时，会抛出该异常。</td></tr><tr><td>std::range_error</td><td>当尝试存储超出范围的值时，会抛出该异常。</td></tr><tr><td>std::underflow_error</td><td>当发生数学下溢时，会抛出该异常。</td></tr></tbody></table><h3 id="C-动态内存"><a href="#C-动态内存" class="headerlink" title="C++ 动态内存"></a><strong>C++ 动态内存</strong></h3><p><a href="https://www.runoob.com/cplusplus/cpp-dynamic-memory.html">https://www.runoob.com/cplusplus/cpp-dynamic-memory.html</a></p><p>（着重关注！）</p><ul><li><strong>栈：</strong>在函数内部声明的所有变量都将占用栈内存。</li><li><strong>堆：</strong>这是程序中未使用的内存，在程序运行时可用于动态分配内存。</li></ul><p>很多时候，无法提前预知需要多少内存来存储某个定义变量中的特定信息，所需内存的大小需要在运行时才能确定。</p><p>在 C++ 中，可以使用特殊的运算符为给定类型的变量在运行时分配堆内的内存，这会返回所分配的空间地址。这种运算符即 <strong>new</strong> 运算符。</p><p>如果不再需要动态分配的内存空间，可以使用 <strong>delete</strong> 运算符，删除之前由 new 运算符分配的内存。</p><h2 id="new-和-delete-运算符"><a href="#new-和-delete-运算符" class="headerlink" title="new 和 delete 运算符"></a>new 和 delete 运算符</h2><p>下面是使用 new 运算符来为任意的数据类型动态分配内存的通用语法：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">new</span> <span class="hljs-class"><span class="hljs-keyword">data</span>-<span class="hljs-keyword">type</span>;</span><br></code></pre></td></tr></table></figure><p>在这里，<strong>data-type</strong> 可以是包括数组在内的任意内置的数据类型，也可以是包括类或结构在内的用户自定义的任何数据类型。让我们先来看下内置的数据类型。例如，我们可以定义一个指向 double 类型的指针，然后请求内存，该内存在执行时被分配。我们可以按照下面的语句使用 <strong>new</strong> 运算符来完成这点：</p><p>double* pvalue  &#x3D; NULL; &#x2F;&#x2F; 初始化为 null 的指针<br>pvalue  &#x3D; new double;   &#x2F;&#x2F; 为变量请求内存</p><p>如果自由存储区已被用完，可能无法成功分配内存。所以建议检查 new 运算符是否返回 NULL 指针，并采取以下适当的操作：</p><p>double* pvalue  &#x3D; NULL;<br>if( !(pvalue  &#x3D; new double ))<br>{<br>   cout &lt;&lt; “Error: out of memory.” &lt;&lt;endl;<br>   exit(1);</p><p>}</p><p><strong>malloc()</strong> 函数在 C 语言中就出现了，在 C++ 中仍然存在，但建议尽量不要使用 malloc() 函数。new 与 malloc() 函数相比，其主要的优点是，new 不只是分配了内存，它还创建了对象。</p><p>在任何时候，当您觉得某个已经动态分配内存的变量不再需要使用时，您可以使用 delete 操作符释放它所占用的内存，如下所示：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">delete</span> pvalue;        <span class="hljs-comment">// 释放 pvalue 所指向的内存</span><br></code></pre></td></tr></table></figure><p>下面的实例中使用了上面的概念，演示了如何使用 new 和 delete 运算符：</p><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>#include <iostream><br>using namespace std;</p><p>int main ()<br>{<br>   double* pvalue  &#x3D; NULL; &#x2F;&#x2F; 初始化为 null 的指针<br>   pvalue  &#x3D; new double;   &#x2F;&#x2F; 为变量请求内存</p><p>   *pvalue &#x3D; 29494.99;     &#x2F;&#x2F; 在分配的地址存储值<br>   cout &lt;&lt; “Value of pvalue : “ &lt;&lt; *pvalue &lt;&lt; endl;</p><p>   delete pvalue;         &#x2F;&#x2F; 释放内存</p><p>   return 0;<br>}</p><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Value <span class="hljs-keyword">of</span> pvalue : 29495<br></code></pre></td></tr></table></figure><h2 id="数组的动态内存分配"><a href="#数组的动态内存分配" class="headerlink" title="数组的动态内存分配"></a><strong>数组的动态内存分配</strong></h2><p>假设我们要为一个字符数组（一个有 20 个字符的字符串）分配内存，我们可以使用上面实例中的语法来为数组动态地分配内存，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span>* pvalue  = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">// 初始化为 null 的指针</span><br>pvalue  = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">20</span>]; <span class="hljs-comment">// 为变量请求内存</span><br></code></pre></td></tr></table></figure><p>要删除我们刚才创建的数组，语句如下：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">delete</span> [] pvalue;        <span class="hljs-comment">// 删除 pvalue 所指向的数组</span><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071531497.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071531977.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071531865.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202408071531105.png" alt="Untitled"></p><h2 id="对象的动态内存分配"><a href="#对象的动态内存分配" class="headerlink" title="对象的动态内存分配"></a><strong>对象的动态内存分配</strong></h2><p>如果要为一个包含四个 Box 对象的数组分配内存，构造函数将被调用 4 次，同样地，当删除这些对象时，析构函数也将被调用相同的次数（4次）。</p><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">调用构造函数！<br>调用构造函数！<br>调用构造函数！<br>调用构造函数！<br>调用析构函数！<br>调用析构函数！<br>调用析构函数！<br>调用析构函数！<br></code></pre></td></tr></table></figure><h1 id="C-多线程"><a href="#C-多线程" class="headerlink" title="C++ 多线程"></a>C++ 多线程</h1><p><a href="https://www.runoob.com/cplusplus/cpp-multithreading.html">https://www.runoob.com/cplusplus/cpp-multithreading.html</a></p><p>多线程是多任务处理的一种特殊形式，多任务处理允许让电脑同时运行两个或两个以上的程序。一般情况下，两种类型的多任务处理：<strong>基于进程和基于线程</strong>。</p><ul><li>基于进程的多任务处理是程序的并发执行。</li><li>基于线程的多任务处理是同一程序的片段的并发执行。</li></ul><p>多线程程序包含可以同时运行的两个或多个部分。这样的程序中的每个部分称为一个线程，每个线程定义了一个单独的执行路径。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考核题目复现</title>
    <link href="/2024/07/31/%E8%80%83%E6%A0%B8%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/07/31/%E8%80%83%E6%A0%B8%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="暑期考核题目wp"><a href="#暑期考核题目wp" class="headerlink" title="暑期考核题目wp"></a>暑期考核题目wp</h1><h1 id="【2024春节】解题领红包之Android中级题"><a href="#【2024春节】解题领红包之Android中级题" class="headerlink" title="【2024春节】解题领红包之Android中级题"></a>【2024春节】解题领红包之Android中级题</h1><p>使用真机下载后查看apk,发现是一个解锁，随便尝试连接一下，发现没有回显提示</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312330271.jpeg" alt="Untitled"></p><p>然后我们使用jadx打开apk，发现下方日志报错</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312330449.png" alt="Untitled"></p><p>先不管报错，我们先查看生成的伪代码。</p><p>可以看到前面主要是初始化一个包含文本和手势解锁功能的Android Activity，进行加载布局，设置文本内容并初始化手势解锁控件及其监听器等内容</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331893.png" alt="Untitled"></p><p>着重关注下面这个地方的代码，我们发现只有在进入了isError函数以后才会调用checkPassword函数</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331253.png" alt="Untitled"></p><p>然后看checkPassword函数，</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331413.png" alt="Untitled"></p><p>这个函数关键的地方：</p><p>其实就是实现读取将assets目录下面的classes.dex,然后通过数据流写入到apk的data这个目录下面的1.dex文件中</p><p>然后通过使用DexClassLoader类动态加载刚被写入数据的1.dex文件，加载com.zj.wuaipojie2024_2.C类，调用其中声明的 isValidate方法</p><p>这里把下面的代码拎出来：</p><p> String str2 &#x3D; (String) <strong>new</strong> DexClassLoader(file.getAbsolutePath(), getDir(“dex”, 0).getAbsolutePath(), <strong>null</strong>, getClass().getClassLoader()).loadClass(“com.zj.wuaipojie2024_2.C”).getDeclaredMethod(“isValidate”, Context.<strong>class</strong>, String.<strong>class</strong>, <strong>int</strong>[].<strong>class</strong>).invoke(<strong>null</strong>, <strong>this</strong>, str, getResources().getIntArray(C0884R.array.A_offset));</p><p>可以看到isValidate方法的参数（在反射里面），分别为当前MainActivity 实例），密码字符串 str和array.A_offset数组</p><p>然后再去看MainActivity里面提到的<code>GestureUnlock</code> 类</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331567.png" alt="Untitled"></p><p>前面其实就是一些视觉元素的初始化与配置，触摸事件处理，绘图逻辑以及手势验证，配置与回调等</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">关注构造函数里面<br><br> **<span class="hljs-variable language_">this</span>**.<span class="hljs-property">defaultKey</span> = <span class="hljs-string">&quot;01234&quot;</span>;<br><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331596.png" alt="Untitled"></p><p>结合最下方的setDefaultKey函数，</p><p>而我们通过检查引用发现setDefault函数没有被引用</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331892.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331940.png" alt="Untitled"></p><p>我们可以知道这个”01234“没有被更改过，就是密码锁的密码</p><p>而每个点在安卓系统中的图形密码九宫格中是按照从左至右、从上至下的顺序依次编号的，从0到8，这种编号方式如下所示：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>所以解锁密码应该是这样的</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331755.png" alt="Untitled"></p><p>但是发现仍然没有flag（还是太单纯了）</p><p>接下来我们就去分析最开始看到的com.zj.wuaipojie2024_2.C类</p><p>发现jadx里面找不到，这个时候我们就可以想到最开始使用jadx加载apk时的报错</p><p>我们可以将apk解包获取其中assets下的classes.dex然后放入010Editor导入DEX模板进行分析（其实还有个方法，使用jeb打开能直接看到com.zj.wuaipojie2024_2.C类）</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331178.png" alt="Untitled"></p><p>但是还是按照正常逻辑思路来</p><p>如果你的010Editor里面没有对应模板</p><p>可以进入下载：<a href="https://blog.csdn.net/treasure_lili/article/details/103071527">010 editor 应用templates分析ELF和dex文件_010editor 分析elf-CSDN博客</a></p><p>下载完成以后在010Editor里面的Template选项栏里面找到edit template添加我们刚刚下载好的DEX模板</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331974.png" alt="Untitled"></p><p>运行模板，效果如下</p><p>![Untitled](D:\笔记\笔记2\1\暑期考核题目wp edeb07c901e84bfaa9d0beabecb339a3\Untitled 11.png)</p><p>最下方报错</p><p>Alder32 checksum did not match, expected 22DCEA4C but got C607EA12<br>Sha1 checksum did not match, expected AA63B92A4B9CA5F53A514B9D620230485C80F0E2 but got DA6A6ECE23966B5BFAA9E922D501E8BB94CA4F9C<br>Result &#x3D; 2 warnings found, template may not have run successfully!</p><p>所以选择修复DEX</p><p>网上随便找个修复教程将这两处的数据修改为正确的即可，当然也可以单独针对这两个部分合理使用AI进行脚本书写</p><p>修复后的dex再次拖入010则报错消失</p><p>这个时候将dex单独拖入jadx也可以正确的显示出com.zj.wuaipojie2024_2.C类了</p><p>其实这个地方可以看到signature（后面会用来进行签名校验的比较，所以这个题如果进行冲打包改了签名的话应该是不可以的）</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331754.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331242.png" alt="Untitled"></p><p>关注第二个框框，结合下面的两个函数我们可以知道，这个地方就是getStaticMethod返回为<code>com.zj.wuaipojie2024_2.A</code> 类，d方法，而这个方法是通过read方法读取data目录下的decode.dex,然后再被fix函数调用生成2.dex（即被修复完成）</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312331660.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332387.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332610.png" alt="Untitled"></p><p>所以我们现在有一个思路就是直接将data目录1.dex的数据赋值给decode.dex,然后再次运行程序获得修复完成的2.dex</p><p>但是要注意，获得1.dex的时候要避免输入默认的正确的密码锁密码“01234”，不然不会走生成1.dex的checkpassword函数</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332067.png" alt="Untitled"></p><p>继续再次运行但是发现原路径下没有2.dex，发现是在getStaticMethod将生成的2.dex删了</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332294.png" alt="Untitled"></p><p>使用frida尝试了下将2.dex勾出来，没成功</p><p>换思路</p><p>我们知道最后修复后是<code>com.zj.wuaipojie2024_2.A</code> 类中的d方法</p><p>通过<code>com.p000zj.wuaipojie2024_2</code> 下的函数（分析参数传递）</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332408.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332749.png" alt="Untitled"></p><p>再结合最初我们分析的isValidate的参数，发现这里的i,i2,i3即为<code>array.A_offset</code> 中的值</p><p>使用NP管理器</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332055.png" alt="Untitled"></p><p>使用ARSC打开方式</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332299.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332707.png" alt="Untitled"></p><p>找到对应的值</p><p>即   i &#x3D; 0 , i2 &#x3D; 3 , i3 &#x3D; 7908</p><p>在fix函数中，发现偏移量的计算与encodeClassDate有关</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332571.png" alt="Untitled"></p><p>跟进</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332027.png" alt="Untitled"></p><p>发现对数据进行了toULEB128——通常用于将整数编码为无符号 LEB128 格式的字节数组，是一种变长编码方式，用于有效地编码小整数</p><p>经过对比发现是标准编码，所以直接通过在线网站进行数转换即可</p><p><a href="http://www.dwenzhao.cn/cal/mcu/leb128.html">无符号LEB128编码转换 (dwenzhao.cn)</a></p><p>7908 转换过来是E4 3D</p><p>所以我们用010打开classes.dex，</p><p>struct class_def_item_list dex_class_defs——&gt;struct class_def_item class_def[0]——&gt;struct class_data_item class_data——&gt;struct encoded_method_list direct_methods——&gt;struct encoded_method method[3]——&gt;struct uleb128 code_off</p><p>然后修改下方的数据，修改后再次使用最开始的脚本进行恢复</p><p>![Untitled](D:\笔记\笔记2\1\暑期考核题目wp edeb07c901e84bfaa9d0beabecb339a3\Untitled 26.png)</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332265.png" alt="Untitled"></p><p>再次打开classes.dex，发现A.d数据被恢复</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs processing">publicstatic <span class="hljs-built_in">String</span> <span class="hljs-title function_">m1d</span>(Context context, <span class="hljs-built_in">String</span> <span class="hljs-built_in">str</span>) &#123;<br><br>        MainActivity.<span class="hljs-property">sSS</span>(<span class="hljs-built_in">str</span>);<br><br>        <span class="hljs-built_in">String</span> signInfo = Utils.<span class="hljs-property">getSignInfo</span>(context);<br><br><span class="hljs-keyword">if</span> (signInfo ==<span class="hljs-literal">null</span> || !signInfo.<span class="hljs-property">equals</span>(C0002C.<span class="hljs-property">SIGNATURE</span>)) &#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//签名校验，如果签名信息为空或不匹配预期的签名常量，返回空字符串</span><br><br>        &#125;<br><br>        StringBuffer stringBuffer =<span class="hljs-keyword">new </span><span class="hljs-class title_">StringBuffer</span>();<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> (stringBuffer.<span class="hljs-property">length</span>() &lt; <span class="hljs-number">9</span> &amp;&amp; i &lt; <span class="hljs-number">40</span>) &#123;<br><br><span class="hljs-type">int</span> i2 = i + <span class="hljs-number">1</span>;<br><br>            <span class="hljs-built_in">String</span> substring = <span class="hljs-string">&quot;0485312670fb07047ebd2f19b91e1c5f&quot;</span>.<span class="hljs-property">substring</span>(i, i2);<br><br><span class="hljs-keyword">if</span> (!stringBuffer.<span class="hljs-property">toString</span>().<span class="hljs-property">contains</span>(substring)) &#123;<br><br>                stringBuffer.<span class="hljs-property">append</span>(substring);<br><br>            &#125;<br><br>            i = i2;<br><br>        &#125;<br><br><span class="hljs-keyword">return</span> !<span class="hljs-built_in">str</span>.<span class="hljs-property">equals</span>(stringBuffer.<span class="hljs-property">toString</span>().<span class="hljs-property">toUpperCase</span>()) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;唉!哪有什么亿载沉睡的玄天帝，不过是一位被诅咒束缚的旧日之尊，在灯枯之际挣扎的南柯一梦罢了。有缘人，这份机缘就赠予你了。坐标在B.d&quot;</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>分析这段代码我们可以知道stringBuffer长度为9，所以密码是“048531267”</p><p>同时得到提示“坐标在B.d”处</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332341.png" alt="Untitled"></p><p>通过之前在np管理器中获取的数据</p><p>我们可以知道为[1,1,8108],8108转换后的数据是AC 3F</p><p>同样找到B.d，修改code_off处数据</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332811.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332091.png" alt="Untitled"></p><p>修改后继续使用脚本修复</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332924.png" alt="Untitled"></p><p>所以flag是 </p><p>flagmd5(sha1{048531267+’id’})</p><h1 id="deeprev"><a href="#deeprev" class="headerlink" title="deeprev"></a>deeprev</h1><p>使用finger进行符号恢复</p><p>找到main函数并进行重命名</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312332673.png" alt="Untitled"></p><p>如下</p><p>int __cdecl main(int argc, const char **argv, const char **envp)<br>{<br>double v3; &#x2F;&#x2F; xmm0_8<br>double v4; &#x2F;&#x2F; xmm1_8<br>double v5; &#x2F;&#x2F; xmm2_8<br>double v6; &#x2F;&#x2F; xmm3_8<br>double v7; &#x2F;&#x2F; xmm6_8<br>double v8; &#x2F;&#x2F; xmm7_8<br>__int64 v9; &#x2F;&#x2F; r8<br>__int64 v10; &#x2F;&#x2F; r9<br>double v11; &#x2F;&#x2F; xmm4_8<br>double v12; &#x2F;&#x2F; xmm5_8<br>__int64 v14; &#x2F;&#x2F; [rsp+0h] [rbp-20h]<br>unsigned int v15; &#x2F;&#x2F; [rsp+1Ch] [rbp-4h]<br>sub_402150();&#x2F;&#x2F;打开文件 “re3”,将 unk_4BC380 的内容写入到该文件中，然后关闭文件，调用 mprotect_0 函数设置内存保护<br>v15 &#x3D; fork();<br>if ( v15 )<br>{<br>sub_401F2F(v15);<br>remove(“re3”);<br>}<br>else<br>{<br>sub_44CC50(0LL, 0LL, 0LL, 0LL, v9, v10, (char)argv);<br>sub_44B680((__int64)”re3”, (__int64)”re3”, v3, v4, v5, v6, v11, v12, v7, v8, *(_QWORD *)(v14 + 8), 0LL);<br>}<br>return 0;<br>}</p><p>学习一下fork的性质：<a href="https://www.jianshu.com/p/c9d0fab9516d?ivk_sa=1024320u">fork函数 - 简书 (jianshu.com)</a></p><p>打开unk_4BC380将文件re3的数据提取出来</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">_int64 <span class="hljs-title function_">sub_402150</span>(<span class="hljs-params"></span>)<br>&#123;<br>__int64 v1; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br>v1 = <span class="hljs-title function_">sub_40CFA0</span>(<span class="hljs-string">&quot;re3&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>);<br><span class="hljs-title function_">fwrite</span>(&amp;unk_4BC380, 1LL, (unsigned int)b_length, v1);<br><span class="hljs-title function_">fclose</span>(v1);<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">mprotect_0</span>(<span class="hljs-string">&quot;re3&quot;</span>, 511LL);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过数据长度b_length为5CF0h，lazy_dumper导出ELF数据，导出为ELF文件</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333525.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333691.png" alt="Untitled"></p><p>将得到的ELF文件使用IDA打开，发现没有main函数，进入start函数，发现爆红无法生成伪代码，我们全选start函数后u取消识别，再次全选c识别成代码,Force强制转换成代码形式后再次在start点p创建函数</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333534.png" alt="Untitled"></p><p>出现main函数</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333565.png" alt="Untitled"></p><p>对绿色数据区域c转换成代码，再在main处p创建函数</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333716.png" alt="Untitled"></p><p>得到main函数</p><p>__int64 __fastcall main(int a1, char **a2, char **a3)<br>{<br>  struct __jmp_buf_tag env[1]; &#x2F;&#x2F; [rsp+10h] [rbp-850h] BYREF<br>  struct __jmp_buf_tag v5[1]; &#x2F;&#x2F; [rsp+E0h] [rbp-780h] BYREF<br>  struct __jmp_buf_tag v6[1]; &#x2F;&#x2F; [rsp+1B0h] [rbp-6B0h] BYREF<br>  struct __jmp_buf_tag v7[1]; &#x2F;&#x2F; [rsp+280h] [rbp-5E0h] BYREF<br>  char v8[640]; &#x2F;&#x2F; [rsp+350h] [rbp-510h] BYREF<br>  char v9[636]; &#x2F;&#x2F; [rsp+5D0h] [rbp-290h] BYREF<br>  int v10; &#x2F;&#x2F; [rsp+84Ch] [rbp-14h]<br>  int v11; &#x2F;&#x2F; [rsp+850h] [rbp-10h]<br>  int v12; &#x2F;&#x2F; [rsp+854h] [rbp-Ch]<br>  int v13; &#x2F;&#x2F; [rsp+858h] [rbp-8h]<br>  int v14; &#x2F;&#x2F; [rsp+85Ch] [rbp-4h]<br>  __int64 savedregs; &#x2F;&#x2F; [rsp+860h] [rbp+0h] BYREF</p><p>  v14 &#x3D; 1;<br>  if ( a1 !&#x3D; 2 )<br>    return 0LL;<br>  ((void (__fastcall *)(char *, char **, char **))loc_2490)(a2[1], a2, a3);<br>  ((void (__fastcall *)(void *, char *, char *))loc_21F9)(&amp;unk_55C0, v9, v8);<br>  v13 &#x3D; _setjmp(env);<br>  if ( v13 &lt;&#x3D; 24 )<br>  {<br>    v11 &#x3D; _setjmp(v5);<br>    if ( v11 &lt; byte_50A0[25 * v13] )<br>    {<br>      if ( byte_50A0[25 * v13 + 1 + v11] !&#x3D; *((char *)&amp;savedregs + 25 * v13 + v11 - 655) )<br>        v14 &#x3D; 0;<br>      longjmp(v5, v11 + 1);<br>    }<br>    longjmp(env, v13 + 1);<br>  }<br>  v12 &#x3D; _setjmp(v6);<br>  if ( v12 &lt;&#x3D; 24 )<br>  {<br>    v10 &#x3D; _setjmp(v7);<br>    if ( v10 &lt; byte_5320[25 * v12] )<br>    {<br>      if ( byte_5320[25 * v12 + 1 + v10] !&#x3D; *((char *)&amp;savedregs + 25 * v12 + v10 - 1295) )<br>        v14 &#x3D; 0;<br>      longjmp(v7, v10 + 1);<br>    }<br>    longjmp(v6, v12 + 1);<br>  }<br>  if ( v14 &#x3D;&#x3D; 1 )<br>    puts(“GOOD JOB”);<br>  return 0LL;<br>}</p><p>对loc_2490进行相同操作最后创建为函数</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333246.png" alt="Untitled"></p><p>sub_2490即对数据进行读取并存储</p><p>而loc_21F9则不行，经过c转换后可以看到int 3，所以我们猜测这个地方被做了处理，为smc或者其他加密形式，而可以猜测执行的时候这个地方是触发中断后将这个信号传递给主进程，然后主进程对这个地方进行解密</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333805.png" alt="Untitled"></p><p>我们再回到最开始的题目进行分析</p><p>打开父进程的函数，其中sub_44CC50可以得出是ptrace函数，而又因为我们知道在re3文件中是中断信号然后返回父进程，而这里刚好通过if中捕获中断状态（具体可以看下文）的值然后来分别进行两个相似的操作，所以我们可以判断re3文件中的是smc</p><p>__int64 __fastcall sub_401F2F(unsigned int pid)<br>{<br>  __int64 v1; &#x2F;&#x2F; r8<br>  __int64 v2; &#x2F;&#x2F; r9<br>  unsigned int v3; &#x2F;&#x2F; ecx<br>  __int64 v4; &#x2F;&#x2F; rdx<br>  __int64 result; &#x2F;&#x2F; rax<br>  __int64 v6; &#x2F;&#x2F; r8<br>  __int64 v7; &#x2F;&#x2F; r9<br>  __int64 v8; &#x2F;&#x2F; r8<br>  __int64 v9; &#x2F;&#x2F; r9<br>  __int64 v10; &#x2F;&#x2F; r8<br>  __int64 v11; &#x2F;&#x2F; r9<br>  __int64 v12; &#x2F;&#x2F; r8<br>  __int64 v13; &#x2F;&#x2F; r9<br>  __int64 v14; &#x2F;&#x2F; r8<br>  __int64 v15; &#x2F;&#x2F; r9<br>  char v16; &#x2F;&#x2F; [rsp+0h] [rbp-130h]<br>  char v17; &#x2F;&#x2F; [rsp+0h] [rbp-130h]<br>  char v18; &#x2F;&#x2F; [rsp+0h] [rbp-130h]<br>  char v19; &#x2F;&#x2F; [rsp+0h] [rbp-130h]<br>  unsigned int v20; &#x2F;&#x2F; [rsp+10h] [rbp-120h]<br>  __int64 v21; &#x2F;&#x2F; [rsp+18h] [rbp-118h]<br>  int v22; &#x2F;&#x2F; [rsp+2Ch] [rbp-104h] BYREF<br>  unsigned __int64 v23[16]; &#x2F;&#x2F; [rsp+30h] [rbp-100h] BYREF<br>  __int64 v24; &#x2F;&#x2F; [rsp+B0h] [rbp-80h]<br>  unsigned __int64 v25; &#x2F;&#x2F; [rsp+108h] [rbp-28h]<br>  __int64 v26; &#x2F;&#x2F; [rsp+110h] [rbp-20h]<br>  __int64 v27; &#x2F;&#x2F; [rsp+118h] [rbp-18h]<br>  int i; &#x2F;&#x2F; [rsp+124h] [rbp-Ch]<br>  __int64 v29; &#x2F;&#x2F; [rsp+128h] [rbp-8h]</p><p>  sub_44B360(pid, 0LL, 0);<br>  ptrace(7LL, pid, 0LL, 0LL, v1, v2, v16);      &#x2F;&#x2F; 通过调用系统调用 sys_ptrace 来对目标进程进行控制和调试<br>  v27 &#x3D; sub_401A30(pid);<br>  v3 &#x3D; sub_4017E5();<br>  result &#x3D; v4;<br>  v20 &#x3D; v3;<br>  v21 &#x3D; v4;<br>  for ( i &#x3D; 0; i &lt;&#x3D; 2; ++i )<br>  {<br>    v22 &#x3D; 0;<br>    sub_44B360(pid, &amp;v22, 0);<br>    result &#x3D; v22 &amp; 0x7F;<br>    if ( (v22 &amp; 0x7F) &#x3D;&#x3D; 0 )<br>      break;<br>    ptrace(12LL, pid, 0LL, v23, v6, v7, v17);<br>    v26 &#x3D; v24 - 1;<br>    v25 &#x3D; ptrace(1LL, pid, v24 - 1, 0LL, v8, v9, v18);<br>    if ( v25 &#x3D;&#x3D; 0xCAFEB055BFCCLL )<br>    {<br>      v29 &#x3D; v26;<br>      decode(pid, v26, v27, v20, v21);&#x2F;&#x2F;经过分析和下面的encode函数形式基本是一样的<br>      v24 &#x3D; v26 + 10;<br>      ptrace(13LL, pid, 0LL, v23, v12, v13, v19);<br>    }<br>    else if ( v25 &#x3D;&#x3D; 0xCAFE1055BFCCLL )<br>    {<br>      encode(pid, v29, v26, v27, v20, v21);<br>      v24 &#x3D; v26 + 10;<br>      ptrace(13LL, pid, 0LL, v23, v14, v15, v19);<br>    }<br>    result &#x3D; ptrace(7LL, pid, 0LL, 0LL, v10, v11, v19);<br>  }<br>  return result;<br>}</p><p>上面的分析中我们可以通过对ptrace函数的第一个参数按m，然后搜索ptrace，获得具体的函数名称</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333403.png" alt="Untitled"></p><p>而ptrace的函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> ptrace（<span class="hljs-class"><span class="hljs-keyword">enum</span> _<span class="hljs-title">ptrace_request</span> <span class="hljs-title">request</span>,<span class="hljs-title">pid_t</span> <span class="hljs-title">pid</span>,<span class="hljs-title">void</span> * <span class="hljs-title">addr</span> ,<span class="hljs-title">void</span> *<span class="hljs-title">data</span>）;</span><br></code></pre></td></tr></table></figure><p>对照下图作用：</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333771.png" alt="Untitled"></p><p>进入sub_44B360：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">sub_44B360</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> a1, <span class="hljs-type">int</span> *a2, <span class="hljs-type">int</span> a3)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// r8d</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> upid; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br><br>  <span class="hljs-keyword">if</span> ( __readfsdword(<span class="hljs-number">0x18</span>u) )<br>  &#123;<br>    _librt_enable_asynccancel();<br>    v4 = sys_wait4(a1, a2, a3, <span class="hljs-number">0LL</span>);<br>    <span class="hljs-keyword">if</span> ( v4 &gt; <span class="hljs-number">0xFFFFFFFFFFFFF000</span>LL )<br>    &#123;<br>      __writefsdword(<span class="hljs-number">0xFFFFFFC0</span>, -v4);<br>      LODWORD(v4) = <span class="hljs-number">-1</span>;<br>    &#125;<br>    upid = v4;<br>    _librt_disable_asynccancel(v5);<br>    <span class="hljs-keyword">return</span> upid;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    result = sys_wait4(a1, a2, a3, <span class="hljs-number">0LL</span>);<br>    <span class="hljs-keyword">if</span> ( result &gt; <span class="hljs-number">0xFFFFFFFFFFFFF000</span>LL )<br>    &#123;<br>      __writefsdword(<span class="hljs-number">0xFFFFFFC0</span>, -result);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0xFFFFFFFF</span>LL;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析发现这个函数就是父进程等待子进程，接收子进程信号</p><p>所以我们改变函数名称后</p><p>如图</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333210.png" alt="Untitled"></p><p>在sub_4017E5中</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333907.png" alt="Untitled"></p><p>我们会发现很多很奇怪的数据，分析这个函数就是在提取下面的数据</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333453.png" alt="Untitled"></p><p>退出继续看</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333458.png" alt="Untitled"></p><p>发现v25处的比较数据看上去有点奇怪</p><p>我们去提取出来的ELF中找找</p><p>可以分别在21F9的开头处和结尾处看到使用mov将刚刚上面提到的两个值赋值到寄存器，所以我们可以推断v24-1返回地址处的值v25即为此处值</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333554.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333977.png" alt="Untitled"></p><p>在调试过程中，发现arr处为8723，与刚刚在函数中提取到的奇怪数据是一样的</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333465.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333569.png" alt="Untitled"></p><p>h进行十六进制的转换，发现是2213</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333731.png" alt="Untitled"></p><p>刚好于与re3中mov 后的地址是吻合的，所以我们猜测其实刚刚奇怪数据的地方是在传入子进程里面的对应地址的数据</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333672.png" alt="Untitled"></p><p>在解密函数里面，根据PTRACE_PEEKTEXT的性质我们知道v28就是我们最后需要获取的解密数据</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333138.png" alt="Untitled"></p><p>那么其实分析下来最后程序的逻辑就是</p><p>父进程等待子进程运行，然后子进程中通过int 3进行切换到主程序中的判断语句，然后通过Mov xxx赋值来进行先解密运行完成后再加密回去的操作。而v28经过调试其实可以发现是最开始的奇怪数据中的后半部分解密函数后经过</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333600.png" alt="Untitled"></p><p>处理后得到的数据</p><p>使用idapython打印即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">print(hex(get_reg_value(<span class="hljs-string">&quot;RAX&quot;</span>),end= <span class="hljs-string">&quot; , &quot;</span>)<br></code></pre></td></tr></table></figure><p>但貌似不大行，试了很多次，后面才知道进入解密处的时候调试是需要传入参数的</p><p>也可以解密后直接去最开始的地方提取数据</p><p>获得：</p><p>xorKey &#x3D; {8723: 2533025110152939745, 8739: 5590097037203163468, 8755: 17414346542877855401, 8771: 17520503086133755340, 8787: 12492599841064285544, 8803: 12384833368350302160, 8819: 11956541642520230699, 8835: 12628929057681570616, 8851: 910654967627959011, 8867: 5684234031469876551, 8883: 6000358478182005051, 8899: 3341586462889168127, 8915: 11094889238442167020, 8931: 17237527861538956365, 8947: 17178915143649401084, 8963: 11176844209899222046, 8979: 18079493192679046363, 8995: 7090159446630928781, 9011: 863094436381699168, 9027: 6906972144372600884, 9043: 16780793948225765908, 9059: 7086655467811962655, 9075: 13977154540038163446, 9091: 7066662532691991888, 9107: 15157921356638311270, 9123: 12585839823593393444, 9139: 1360651393631625694, 9155: 2139328426318955142, 9171: 2478274715212481947, 9187: 12876028885252459748, 9203: 18132176846268847269, 9219: 17242441603067001509, 9235: 8492111998925944081, 9251: 14679986489201789069, 9267: 13188777131396593592, 9283: 5298970373130621883, 9299: 525902164359904478, 9315: 2117701741234018776, 9331: 9158760851580517972}</p><p>addr &#x3D; 0x2213</p><p>while True:<br>    data &#x3D; get_qword(addr)<br>    key &#x3D; xorKey[addr]<br>    dec &#x3D; data ^ key<br>    idc.patch_qword(addr, dec)<br>    addr +&#x3D; 16</p><p>将上面脚本放到re3里面运行，运行后去除一些0和int 3</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312333293.png" alt="Untitled"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c">BYTE *__fastcall <span class="hljs-title function_">sub_21F9</span><span class="hljs-params">(__int64 a1, __int64 a2, __int64 a3)</span><br>&#123;<br>  _BYTE *result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+20h] [rbp-28h]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+24h] [rbp-24h]</span><br>  <span class="hljs-type">char</span> v6; <span class="hljs-comment">// [rsp+28h] [rbp-20h]</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [rsp+2Ch] [rbp-1Ch]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+30h] [rbp-18h]</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [rsp+34h] [rbp-14h]</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [rsp+38h] [rbp-10h]</span><br>  <span class="hljs-type">char</span> v11; <span class="hljs-comment">// [rsp+3Ch] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [rsp+40h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+44h] [rbp-4h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">24</span>; ++i )<br>  &#123;<br>    v12 = <span class="hljs-number">0</span>;<br>    v11 = <span class="hljs-number">0</span>;<br>    v10 = <span class="hljs-number">0</span>;<br>    v9 = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> ( v12 &lt;= <span class="hljs-number">24</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( *(_BYTE *)(<span class="hljs-number">25</span> * i + v12 + a1) )<br>      &#123;<br>        ++v11;<br>        v10 = <span class="hljs-number">1</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v10 )<br>        &#123;<br>          *(_BYTE *)(a2 + <span class="hljs-number">25LL</span> * i + v9) = v11;<br>          v11 = <span class="hljs-number">0</span>;<br>          ++v9;<br>        &#125;<br>        v10 = <span class="hljs-number">0</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( ++v12 == <span class="hljs-number">25</span> &amp;&amp; v10 )<br>      &#123;<br>        *(_BYTE *)(a2 + <span class="hljs-number">25LL</span> * i + v9) = v11;<br>        v11 = <span class="hljs-number">0</span>;<br>        ++v9;<br>      &#125;<br>    &#125;<br>    result = (_BYTE *)(<span class="hljs-number">25LL</span> * i + a2);<br>    *result = v9 - <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">24</span>; ++j )<br>  &#123;<br>    v7 = <span class="hljs-number">0</span>;<br>    v6 = <span class="hljs-number">0</span>;<br>    v5 = <span class="hljs-number">0</span>;<br>    v4 = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> ( v7 &lt;= <span class="hljs-number">24</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( *(_BYTE *)(<span class="hljs-number">25</span> * v7 + j + a1) )<br>      &#123;<br>        ++v6;<br>        v5 = <span class="hljs-number">1</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v5 )<br>        &#123;<br>          *(_BYTE *)(a3 + <span class="hljs-number">25LL</span> * j + v4) = v6;<br>          v6 = <span class="hljs-number">0</span>;<br>          ++v4;<br>        &#125;<br>        v5 = <span class="hljs-number">0</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( ++v7 == <span class="hljs-number">25</span> )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v5 )<br>        &#123;<br>          *(_BYTE *)(a3 + <span class="hljs-number">25LL</span> * j + v4) = v6;<br>          v6 = <span class="hljs-number">0</span>;<br>          ++v4;<br>        &#125;<br>      &#125;<br>    &#125;<br>    result = (_BYTE *)(<span class="hljs-number">25LL</span> * j + a3);<br>    *result = v4 - <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据搜索得知这个是数织，先盲用上面的两个数组数据去在线网站盲试，结果不行</p><p>所以我们的思路是去看看哪里对这个进行了修改，前往init段和preinit段，修复一下函数</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334923.png" alt="Untitled"></p><p>char *sub_265C()<br>{<br>  unsigned int v0; &#x2F;&#x2F; eax<br>  char *result; &#x2F;&#x2F; rax<br>  char v2[639]; &#x2F;&#x2F; [rsp+0h] [rbp-300h] BYREF<br>  char needle[2]; &#x2F;&#x2F; [rsp+27Fh] [rbp-81h] BYREF<br>  char v4; &#x2F;&#x2F; [rsp+281h] [rbp-7Fh]<br>  char v5[4]; &#x2F;&#x2F; [rsp+282h] [rbp-7Eh] BYREF<br>  __int16 v6; &#x2F;&#x2F; [rsp+286h] [rbp-7Ah]<br>  char v7[4]; &#x2F;&#x2F; [rsp+288h] [rbp-78h] BYREF<br>  __int16 v8; &#x2F;&#x2F; [rsp+28Ch] [rbp-74h]<br>  char v9[2]; &#x2F;&#x2F; [rsp+28Eh] [rbp-72h] BYREF<br>  char v10; &#x2F;&#x2F; [rsp+290h] [rbp-70h]<br>  char format[8]; &#x2F;&#x2F; [rsp+291h] [rbp-6Fh] BYREF<br>  int v12; &#x2F;&#x2F; [rsp+299h] [rbp-67h]<br>  __int16 v13; &#x2F;&#x2F; [rsp+29Dh] [rbp-63h]<br>  char v14; &#x2F;&#x2F; [rsp+29Fh] [rbp-61h]<br>  char haystack[16]; &#x2F;&#x2F; [rsp+2A0h] [rbp-60h] BYREF<br>  char s[32]; &#x2F;&#x2F; [rsp+2B0h] [rbp-50h] BYREF<br>  __int64 v17; &#x2F;&#x2F; [rsp+2D0h] [rbp-30h]<br>  int v18; &#x2F;&#x2F; [rsp+2DCh] [rbp-24h]<br>  FILE *stream; &#x2F;&#x2F; [rsp+2E0h] [rbp-20h]<br>  int ii; &#x2F;&#x2F; [rsp+2E8h] [rbp-18h]<br>  int n; &#x2F;&#x2F; [rsp+2ECh] [rbp-14h]<br>  int m; &#x2F;&#x2F; [rsp+2F0h] [rbp-10h]<br>  int k; &#x2F;&#x2F; [rsp+2F4h] [rbp-Ch]<br>  int j; &#x2F;&#x2F; [rsp+2F8h] [rbp-8h]<br>  int i; &#x2F;&#x2F; [rsp+2FCh] [rbp-4h]</p><p>  *(_QWORD *)format &#x3D; 0xEAABA1EDE1FCFEA1LL;<br>  v12 &#x3D; -268763743;<br>  v13 &#x3D; -1030;<br>  v14 &#x3D; -3;<br>  *(_WORD *)v9 &#x3D; -5399;<br>  v10 &#x3D; -20;<br>  *(_DWORD *)v7 &#x3D; -268633374;<br>  v8 &#x3D; -5139;<br>  *(_DWORD *)v5 &#x3D; -268633347;<br>  v6 &#x3D; -5139;<br>  *(_WORD *)needle &#x3D; -5401;<br>  v4 &#x3D; -17;<br>  for ( i &#x3D; 0; i &lt;&#x3D; 14; ++i )<br>    format[i] ^&#x3D; 0x8Eu;<br>  for ( j &#x3D; 0; j &lt;&#x3D; 2; ++j )<br>    v9[j] ^&#x3D; 0x8Eu;<br>  for ( k &#x3D; 0; k &lt;&#x3D; 5; ++k )<br>    v7[k] ^&#x3D; 0x8Eu;<br>  for ( m &#x3D; 0; m &lt;&#x3D; 5; ++m )<br>    v5[m] ^&#x3D; 0x8Eu;<br>  for ( n &#x3D; 0; n &lt;&#x3D; 5; ++n )<br>    needle[n] ^&#x3D; 0x8Eu;<br>  v0 &#x3D; getppid();<br>  snprintf(s, 0x1EuLL, format, v0);<br>  stream &#x3D; fopen(s, “r”);<br>  fgets(haystack, 16, stream);<br>  fclose(stream);<br>  result &#x3D; (char *)(strstr(haystack, needle) || strstr(haystack, v9) || strstr(haystack, v7) || strstr(haystack, v5));<br>  v18 &#x3D; (int)result;<br>  if ( !(_DWORD)result )<br>  {<br>    qmemcpy(v2, &amp;unk_32A0, 0x271uLL);<br>    result &#x3D; (char *)&amp;unk_5834 - 1940;<br>    v17 &#x3D; (__int64)&amp;unk_5834 - 1940;<br>    for ( ii &#x3D; 0; ii &lt;&#x3D; 24; ++ii )<br>      result &#x3D; (char *)memcpy((void *)(25 * ii + v17), &amp;v2[25 * ii], (unsigned __int8)v2[25 * ii] + 1);<br>  }<br>  return result;<br>}</p><p>__int64 sub_257D()<br>{<br>  char v1[640]; &#x2F;&#x2F; [rsp+0h] [rbp-290h] BYREF<br>  __int64 v2; &#x2F;&#x2F; [rsp+280h] [rbp-10h]<br>  int i; &#x2F;&#x2F; [rsp+28Ch] [rbp-4h]</p><p>  qmemcpy(v1, &amp;unk_3020, 0x271uLL);<br>  v2 &#x3D; (__int64)&amp;unk_5838 - 1304;<br>  for ( i &#x3D; 0; i &lt;&#x3D; 24; ++i )<br>    memcpy((void *)(25 * i + v2), &amp;v1[25 * i], (unsigned __int8)v1[25 * i] + 1);<br>  return nullsub_2();<br>}</p><p>可以看到上面两个函数的赋值操作,到&amp;unk_32A0和&amp;unk_3020，把它们dump出来，然后按每 25个数据取出非0的数字就可以了（第一个数据是显示当前有多少非0的数，也不需要），可以手搓</p><p>box1 &#x3D; [0x05, 0x05, 0x05, 0x03, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0x01, 0x05,<br>        0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x05, 0x01, 0x02, 0x04, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x05, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,<br>        0x01, 0x01, 0x01, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0x02, 0x06, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x02, 0x02, 0x01, 0x01,<br>        0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x06, 0x02, 0x05, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03,<br>        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x02,<br>        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x05, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x03, 0x05, 0x01, 0x01, 0x01,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x08, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x01, 0x01, 0x03, 0x05, 0x05, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03,<br>        0x05, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x01, 0x02, 0x04, 0x01, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x04, 0x01, 0x01, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0x01, 0x02, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x05, 0x04, 0x03,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x04, 0x02, 0x05, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,<br>        0x01, 0x02, 0x01, 0x01, 0x01, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]<br>box2 &#x3D; [0x06, 0x05, 0x01, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x03, 0x01, 0x03,<br>        0x01, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x08, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0x04, 0x01, 0x03, 0x02, 0x01, 0x03,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x04, 0x04, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x02, 0x02, 0x01,<br>        0x02, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x08, 0x01, 0x01, 0x01, 0x01, 0x03, 0x04, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,<br>        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x03,<br>        0x01, 0x03, 0x01, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x01, 0x04, 0x01, 0x01,<br>        0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x07, 0x08, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x04, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x02, 0x02,<br>        0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0x05, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x06, 0x0C, 0x02, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x07, 0x02,<br>        0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x09, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,<br>        0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,<br>        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]<br>import binascii<br>import binhex<br>print(bytes.fromhex(hex(0xEAE7 ^ 0x8e8e)[2:]))<br>box1 &#x3D; box1[:625]<br>print(box2 &#x3D;&#x3D; box1)<br>import numpy</p><h1 id="box1-numpy-array-box1-reshape-25-25"><a href="#box1-numpy-array-box1-reshape-25-25" class="headerlink" title="box1 &#x3D; numpy.array(box1).reshape(25, 25)"></a>box1 &#x3D; numpy.array(box1).reshape(25, 25)</h1><p>box1 &#x3D; numpy.array(box2).reshape(25, 25)<br>for x in box1:<br>    t &#x3D; x[1:]<br>    print(“ “.join(map(hex, t)))</p><p>拿到在线网站上去试</p><p><a href="https://handsomeone.github.io/Nonogram/#solver">Nonogram (handsomeone.github.io)</a></p><p>flag{I LOVE PLAY ctf_QWB 2022}</p><h1 id="Ferris-proxy"><a href="#Ferris-proxy" class="headerlink" title="Ferris_proxy"></a>Ferris_proxy</h1><p>分析题目可知题目意思应该是两个程序之间的通信被流量包所捕获，我们需要解密这个流量包找到其中的flag</p><p>前述：</p><p>wireshark可以捕获一般的网络数据包文件，例如cap，pcap，pcapng，pcap.gz这几种，前三种直接双击打开即可，最后一种拖入wireshark即可</p><p>打开后如下</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334174.png" alt="Untitled"></p><p>我们可以根据</p><p><a href="https://blog.csdn.net/zzwwhhpp/article/details/113077747">网络分析工具——WireShark的使用（超详细）-CSDN博客</a>中</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334402.png" alt="Untitled"></p><p>比对知道中间的为数据列表区域</p><p>下图中的框住的三行代表TCP的三次握手</p><p>过程分别为：</p><p>1.客户端发送一个SYN&#x3D;1，ACK&#x3D;0标志的数据包给服务端，请求进行连接</p><p>2.服务端收到请求并且允许连接的话，就会发送一个SYN&#x3D;1，ACK&#x3D;1标志的数据包给发送端，告诉它，可以通讯了，并且让客户端发送一个确认数据包</p><p>3.服务端发送一个SYN&#x3D;0，ACK&#x3D;1的数据包给客户端，告诉它连接已被确认，这就是第三次握手。TCP连接建立，开始通讯。</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334053.png" alt="Untitled"></p><p>所以我们可以通过框出来的地方知道客户端（client)是50671，服务端(server)是8888</p><p>当然也可以使用strace命令对题目中的client进行查看，发现客户端的端口是8888</p><p>因为这里是客户端向服务端发送信息，所以我们的追踪过程应该是从本机端口50671到本机端口8888，data就在这么一个模式的数据包中，所有50671-&gt;8888的发送包下都有一个data数据，所以我们捕获发送数据</p><p>通过右键点击第三次握手，选择追踪流</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334715.png" alt="Untitled"></p><p>获取从客户端到服务端的数据</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334043.png" alt="Untitled"></p><p>在下方选择原始数据形式后</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334948.png" alt="Untitled"></p><p>分析流量包</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334996.png" alt="Untitled"></p><p>得到数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">00000008000000000000000000000008000000000000000100000048000000010000000001001</span>db2ee547837c2b0394f9316a3c672109c854769d9627ce715aa82ae76af4fc7d468903ffa4f7c9d4afcf139528ceb24cb5f64a192287282ee7fd076992f000000480000000100000000e73f0a730b98e032e90afaf73b8ddab1e821432c3e1c2c51396914f53fb304f26cbc8f85ec68462ff85dfb0979648d43003291ccb9418e7b4016f5d3325d4083000000480000000100000000d44c5aff410f28c841fb51c2e982244d7f7370fb6b73d6e5caba56c1b4b8f96bea190aa8d66e7e37d76fe2e5fef7f78b0de90e12eefda3a36177583412ca074e00000048000000010000000096a1796af867e440a72ee81e36e05f3b73c3341f6166b804bf83c3d0b47df74cc77405595ce44d3ccfb739496b8acb78fdb02bcd510851b3e3de015fc06eadb40000000a00000001000000000f8e0000004800000001000000010100320b119809b793abf357a7f78b0742ee93a957e563a5a94fdb09804e89596f2597a2cb9ae9f5161d5fda88ff050e47b1d28bebc6563465d2e7959e8a624a000000480000000100000001cd39b2053c17021f93030e3b9bc7149ff5423faf64693932f76a8dbffa526fff7c076845b1d31967efca0b56b066e8bacedc1927e629c6d0e87f61bf14ee3039000000480000000100000001053d668ef1855426257ce68cdbc2f66919a2f9efbcb632daa6170cb8246ab7a2348032f48cefdbc3aadcee6b9ab867371346bbe90fd69d213705ed1de38922b300000048000000010000000145bbbf8e0b10c5436e5974f46426d3efdbeaba819ea5d049bb420219a426336e14bc36e5753cb71fb21a2b78f699918a0045a8badddd69646ed65a59e17feec80000000a0000000100000001b30c000000280000000100000001503fdd267309866142ae96b3197515b72ccd766dedbc09d61c25f0c3fa79ebd40000002800000001000000002accc966ccaf48a147471171fb9589c95c561100d6548ad979f328e43bcfe0750000002c00000001000000000000001023a5457e1fa2e2f4a23242b1e61a597d1458bee4871e6f44e9296820014728300000002c000000010000000100000010bd688bc8657972730f1d9a5c340cd555602957fa44cf643423bb23734bf8490b0000003c000000010000000000000020a6f95ec809bac678aa1f4a74a0094e00d33e42da057331c95a61c6b5c3cd24daefeb367e01d3765e91643e37e2ac95e90000003c000000010000000100000020184ff5940c47e4fc42a2bd1f61b304f5fdfc5e453104a3946d06c4897a86f7d2872c948ff06b270b4d024446df8b60fa0000004800000001000000000000020044f4cf64a905e470a2d8091e5320c0b8a370193fe44728340c454361c84578f3b469963d12fa608ab96bf2e8c9c2116010d50e151b6407308d3cb6a2000000480000000100000000bc02026a76b5be1d66cf03d90ea5303a5091b48d370ac186402138606da35c90fe7efb0a21f0a177896f496ba40f02e079b82218be0124ab7de5d4f48cfd921e000000480000000100000000323d2847d03880fa5cb48533939141115c3dc15fa32a82be59d78826e3d37f5cac12010ce10c850df63626f94657a5beacf7d502b59fc10f571959ce6101b8d6000000480000000100000000704e541c930ca3a8d156d7f6122fda7bbdffed9b9bc6160f4ec8ace48978bd458869a636a7d8798d7dbd503e0c41aad82496578df4fbffbd3c5c885dc0bd3dee0000004800000001000000006d6af1efc82365f1619286e7a612155d87038f4ccb39e25e0660f9f2d320ae4321996b69187ba68abdf3e6ab41abfa2dd359c7eaa5d344fc1acb97b58dd44d86000000480000000100000000d444d17c165ee78e1d55f5c42b1f1bcf9c0f302588b68d26d2a308250c42d1df13be07693aa0f42cefcb9dc1688216478a1a041c9a0c66308b3e4a5135fd2f0f0000004800000001000000002c7d9df81c7c9ccb7422089f94c0fa54067e6c4fc634c725c9aa9710aaedd671f72cf9287f38de6111ace6c0c32ed568569b45743abfc519e23aabccdf30a9af000000480000000100000000d1bbcab1224daf8ccfb5e6dbf42ee924935b990eee7abe70ac5537426236e0ff1b2ac4748c665d3aba61c4685798ae62126d89220cd5ae8c6a7c32e33ce1236d0000001c0000000100000000b802088e5e303c8389880c09c3925053cc210825000000080000000200000000000000480000000100000001000001d06fe6d3c4b7761ffea3dea5ca1b75305f3bd828925e041baabc00aa51f93e5d59aa6c5c024e1de93ccabbcc7736271de03665a2b170a42faca2e869980000004800000001000000016c6b50fecd4e0e1a9ca070fafa04c06a12f27af94d5430ccce129ada67c3040d444b772758195366025267bfea9e35cbaaf816022b34755d5ac2a4d7df857732000000480000000100000001ede0bf60b0ca23f40635dcbda76eaf3b59faa140dee0b2480aacd8df765ba5cfd1347f22c9415006210eb4f224332b5cfcac7be98e0da94f74693d8af22e1fad0000004800000001000000010614feada5c2aa494e61a0b2a848b82833860d6c1213c4aceebcbe55f419403ecd843835f14f2caa8310be6bfad7ad2054df500a54268b17530183ef4c49f1c50000004800000001000000011ed33f223e632356012a42484c1241d41ec5426ba94c0c4887a8206b86b41ac73ca8b79d90256d391190bcb2256e881642c5a0fbc178691cf9ec983e1f1db4000000004800000001000000012c5043530d28ce81e89c0a71baeb821ff0240d18fbac0e01b0952bb62b91354597b9061dc440318ce3eabd95742607546c414ebf3da32879b2af3500d08cb4e9000000480000000100000001b404a5293b85aadaa3d595d38992c219ddd7a4e5f00c09af477eea99477b3d53ac6b67c49f0cbd5a7ff038904dfc1a3b58cabe2c25dcb86fa55a53f3d362f0510000002c000000010000000128bf591667dcd1d600abe1db48f49b17a5ad9d5650f7793af7a24341b771a9247f1eb4800000000800000002000000010000000800000000000000020000000800000000000000030000004800000001000000030100abcf924576de63087c8695ccda3705e8670c770f2bfda1dafdeddcd09b2aa6d485c6a87ff31c14300ddb660576ceed52047318a30d3c05c9848b0a1fb05300000048000000010000000387d378e9cbb8914e496a633595c7f68da097afd4fbd0380b4eafe790ffe999b81ceeff32eea4d8fa4279606c7c491ec4eb4a7ef5bf614307c21bd3a314db9d2e000000480000000100000003e9f505f08c464e1f5f123bcc180305bb5a30f2c382493a1cc6d6e5e189e75950f75c8a790aef2c1fae18436c9d6f4840a9eacbf04139a2b25042c27f3a3fd756000000480000000100000003faeaff92d731e354d03dc46cbe8a001188dde35e753c259de359181678d94e47d90709345f6c9975288dbecfe1a6cf2eb7a14978854bbc73d3ac7d0a72cc3ef40000000a0000000100000003c41a0000004800000001000000020100d92f41b75bb8ced6be2fbbc0ba1cfeeebdf15826ce92ba78ef4cd0f6d47ff04e9e593cfc5fc7eac8109effce7e75f547873ab559186885edf0e519f73aed00000048000000010000000243421e08dea79fd12889b2845ca365803bb4aa23c50d0c298e6649121b6d9101f32d15a043ffdbc93e7665617fa7b4b3f01db76f5472c5aa3a085da5683efcc4000000480000000100000002bf9a240df9afc3596d4b3613ae9a2184340561c896a60cc577e6ca507b5e6548ccfcd8bccf27de73deaaf04fab707a20c6aa94febdf8a0a5532c0f4c73958e11000000480000000100000002fc1437567ccd886b5496cabb117993f31afe25f53d92721877892e472bf8bba1743b827e277f500d51b7f74f4682e943be0d3ebfdc30742e211dc3eba51dac8b0000000a00000001000000029074000000280000000100000003e836256016a5f8ca1e29732b7332d9776bdc6694a9df6c1172183f65916f83d50000002c000000010000000300000010f46cbf6896be858f5c2f86ee3c162359c545b1f5bd1eec0cd03e2b7bf9c1b4b90000003c000000010000000300000020c580aa8aad81a2800fadf74749e79c323da65a6d11e8fb517d60ba36a0113b345be7c0fce390fba664776b676d82fdbe000000480000000100000003000002002292a593b68fdbf615d43c123747cf1f1583619708368b471b4a37c8eed21e07d14a7bf309f45335592134c5cc7a18152de20bb7d2fb753bee9131d90000004800000001000000033076a9d57efa379e4f7f4700116d786c586b49523454dd9b3ae7cfde0416d9bfbb486eed31f88fec8128cd1e0bf783c8978c04fde5f1bbe67ecbe1c76e0596f5000000480000000100000003579bbdb311093c2a3bb58b848be88302ab2bb6c24bf076a694de2b2fa1a8eff53fcaa6800e938bdeee831498fcc72cc9b822dad5b2074d5bc292c766e44c13e000000048000000010000000331fffa94345676f294eceb259baa51107267136af1e829868e1a3c5e2514517bfcfaec78783afde2874c6d2f4cb8436ed421e67fe327e8c67c851da9446ef226000000480000000100000003daff3194609bf5a05c1e6ec1e085854275ee81dbee01c92e2cb357faeba811424b80bd9b204d70675aaf026f2f23bb0e882271bad34ff5294cc05cd7fc0740ac0000004800000001000000034b5b49ca009d1836cfa176112aaf7775fa8c241bd45f861c1eec34dd2b9654e8144c74c1f80c9e0f23cae4503ae85de975f74d250be667a1f6285c9951a8f8c90000004800000001000000032fb4e2dd32d6fdd7e93fe24e23b9762099e1b12f5d9cae6dae7df3401e33931a8af65803c1538716bdba05948c8818f92791010ef8d6d315fb97bccdf2c2fbbf000000480000000100000003b97cd2e80a232dcf417da8ac1b835bf9dab15816bc1e2e0c07214e531ac922ca2f5ddbb26f8d599805feb5f6ae1c6e3fe08ef5cf7dbd60eb407892d6e72a67a30000001c0000000100000003e7d781f18b675dad11f1f49600057e8094628ad00000002800000001000000024ac9c87b674dcd932d2e9d3a4b7c16a3989e750fa3a8895e8dd0971c56fb96780000002c000000010000000200000010cf6ca67cfe59cd5f110c1586de9c2186cfb7213784043ffb017fdf5cfa74ac320000003c000000010000000200000020a03a82bae4627fc74de8c75437e5b077aa3d63e5745f61f47362954b80f53ede6867267605b7383f55e6a80aefcae153000000080000000200000003<br></code></pre></td></tr></table></figure><p>现在开始分析client程序</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334747.png" alt="Untitled"></p><p>rust写的，嘶</p><p>shift +F12 走一波 ，最开始硬编码处点开也可以看到，</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334700.png" alt="Untitled"></p><p>信息如下：</p><p>获得RSA公钥和私钥</p><ul><li><p>—-BEGIN RSA PUBLIC KEY—–<br>MIIBCgKCAQEA231sNrX6WxlQpfsy8u6VR9rw4H4lY93fspAmXefjDhQhYCPM+SypBvIgb&#x2F;w9f8AGkEwUlDQxfZCClz72GAuS9jrlsqg9LpSMZ+PJA<br>O0BDWisJCJtyyENW&#x2F;9VVPpJLA0SSeYuTYJ84WDAcjsb0T++V97TXlSiq9svXt16LDxCQJjRXv9O1UTBkDpGGZmnR4xLiQT+Px6KOqAsrJcAF0EJa<br>ji5aBfHVQdrXQwgmq8PEsfnvp2iQCLZ2iDPLlGbRahdFeigXXT4L6UvjpbFr&#x2F;9INvDb2+vQkRl7zlHVtUAMR4X5smW2nHHH5YyTi1cOvMFsN+oPG<br>xgBGpSqYCxmPwINwIDAQAB<br>—–END RSA PUBLIC KEY—–</p></li><li><p>mkey:explorer</p></li><li><p>—-BEGIN PRIVATE KEY—–<br>MIIEvQIBADANBgkqhkiG9w0BAQEFASCBKcwggSjAgEAAoIBAQC93GDINPM6HX2NN3bCznyri2rDHDVcamzA&#x2F;rPDXi9Mb2hu1Ypqek4km&#x2F;kf4MKDsr<br>OU&#x2F;3T5mcdx5kA80s7mBWlGaItg&#x2F;sy6dsh2XOoKVEHcZYyrbSAbkYrT9CoLLMJlipbsalKenkW9JlHB0h+vwv&#x2F;rAwXJ9IMSc4RQkvjn&#x2F;QKuBPhcXf<br>rfaAIKNO0L+iqUL3asFM2CF8DXZXy8pLAxMy2PDJLtb0I&#x2F;rXDWRImlBcIWBrhg7lDA0UxWXDD1i5MmMlvxmyho1F8Brh7ietK3XW7LWshD2ARID<br>gPoTZ7lZm7P9JbKSN+Uk7fay6LdkJXYszfT89Owmi7tmfUQ41fcBAgMBAAGCggEAWyGJru+Dg&#x2F;Sd44t6peY4lVy3fO&#x2F;GxRz+qHeTjojX2HAkppn<br>GHM96q3XWkWYHHu&#x2F;Ets6n+msQOcIRldwx01QHp6yrJI&#x2F;CJkkLrq6yjhfu1dTWlFK+XhsQQT&#x2F;ZVq&#x2F;GBdzBF+qdHLAGnV7ZmUCqVyIipGLqbPw4VC<br>2Ltr2kUBhlDySAA+gCnUrPyVi6O9OFcyDepKMy481gZLLijakINejYrsbdCInz2omHq12w&#x2F;50tuf1s4XMWJN+A0g1Hx+tTk2jDX1Wqg&#x2F;htmJhjG<br>qTj02GLJ&#x2F;CJQjRodEdA7mx3HGwhisigeZgHTdPgP1B5Z9NXwUg9Qxln72D4mGhLCGYcw8VQKBgQD6+oltv1i44BO&#x2F;ROUJkZPTLWeoBrxP2OOli4<br>aOSilLifeGrUQOSUtvcFHOxzy5RrhvX89f3GnklXcGyH XD03wg0&#x2F;hqL0HM1EzNLmWkJW0Ng5WRFFgfcQIKbWBK9SHhAmKzkHtZPq6NwN8MbZUF<br>vndxDtcSOdH0&#x2F;TbMtCMYYs0MswKBgQDBqM7QxWT6qebCU4YOV+5uwnP+hAunsWkvVW7pHgiPnZ8ARRZ9iFIqqiVRvKeeyZBEK22eOJNguz6Cqfz<br>2451D&#x2F;AHA7sXht+1D9GCE&#x2F;ebvUw+lPNQIRKkAgwQ8Dx+R6ikaUGzUKYhmWYJ5xgS9ZALZ+k4+rSjFg9jVjFjT7xQvewKBgHo9bJI3kE77VKLkO2<br>ndrdI9Wy9LmIyLZtVKj87d8B8Ko7TEz1DmAgfU&#x2F;QNppvnWqB4W3DokcK8U3VRAbptidgLHG0ccnT&#x2F;WZ1HIN1kroWHjpQV0kzc9I3FQtIXNvyKItu<br>oehPWCwiHovrqe5OZXTnWSdM47uzdH3Vj2o+FMvfJhAoGAQvusbTGZd8oEcvqIx7VKVy0TCdmKXnpSs3iNYDxvIZ2XPXSoDst0ACXRuq&#x2F;SGm4FZ<br>E7RH4TaFP8u4+sAADVCVB16Tc1IzIXdnz+LkvRvSCAmrTSY8jMtcWvfrxZcCRBBH0TqH4guEZisNIp1YTySb+rP3YXvMEImYdalcsii5rkCgYEA<br>imnWJ5aFN3TDt3h76CL3nRQegnzekJBjXZfcrHdExkgNChWjiz+WU&#x2F;FW&#x2F;Z87xMxtfIEwwzzIQHxbKZhgzO&#x2F;Up2eXdqH59DvauggbiS3h4p9k2kx<br>WTocztaRvdftMW0ncmA4yCKiUQEmWD784JCyxOupNNfr2rgViWggVBEtJUIg&#x3D;&#x3D;<br>—–END PRIVATE KEY—–</p></li></ul><p>在非对称加密中，公钥用于加密数据或验证签名，而私钥用于解密数据或生成签名</p><p>服务器通常会将其公钥公开给客户端，以便客户端使用该公钥加密需要发送给服务器的敏感信息。所以这个client程序的publickey应该是server的</p><p>开始调试，这里不得不说这个真的太难调了，很卡（），也去切换了wsl（最开始甚至还调试不了，瞎忙活半天配了个库后面终于能调了）</p><p>提一些关键步骤：</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334863.png" alt="Untitled"></p><p>最终在return处被遣返退出调试</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334940.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334196.png" alt="Untitled"></p><p>继续静态分析</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334219.png" alt="Untitled"></p><p>监听端口，我们可以在这里找到accept函数</p><p>![Untitled](D:\笔记\笔记2\1\暑期考核题目wp edeb07c901e84bfaa9d0beabecb339a3\Untitled 69.png)</p><p>里面的connect处我们点开字符串发现这个地方是在连接端口</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334418.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334619.png" alt="Untitled"></p><p>总结上面的流程就是前面部分的逻辑就是客户端连接127.0.0.1:8888端口，然后同时开启了RC4的流加密，此链路进行加密，然后开启监听12345端口(bind) ，等待连接（accept)</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334900.png" alt="Untitled"></p><p>通过搜索我们可以知道 <code>process_connection</code> 负责接受来自客户端的连接请求，负责处理数据的发送和接收，例如读取客户端发送的数据并做出响应。</p><p>在这里我们可以看到key_exchange以及它上方的crypto的new函数，表示开启了新的加密算法</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312334458.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312335954.png" alt="Untitled"></p><p>我们可以知道这个地方就是在检查密钥是否交换成功，点击进入</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312335901.png" alt="Untitled"></p><p>点开函数</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312335236.png" alt="Untitled"></p><p>这里的主要逻辑是先随机生成字符串（v64)并保存到restr里面，然后再通过最开始我们获得的公钥进行RSA加密得到256字节发送给server</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312335436.png" alt="Untitled"></p><p>与此同时程序也读取server下发的16字节随机串通过公钥加密后的256字节，采用client的私钥对server发来的256字节进行解密，解密后字节存入v23中</p><p>然后使用前面client生成的16字节随机串和刚刚解密以后的server的随机串执行异或操作，得到新的密钥</p><p>然后我们对刚刚生成的新的密钥进行sha256并且将结果发送给server</p><p>最后进行比较</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312335875.png" alt="Untitled"></p><p>然后看到process_data_dec_in函数</p><p>发现AES—CBC,读取内容放入下面</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312335180.png" alt="Untitled"></p><p>最终解密函数</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312335994.png" alt="Untitled"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312335996.png" alt="Untitled"></p><p>进行RC4解密后</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407312335315.png" alt="Untitled"></p><p>获得数据</p><p>00000008000000000000000000000008000000000000000100000048000000010000000001001db2ee547837c2b0394f9316a3c672109c854769d9627ce715aa82ae76af4fc7d468903ffa4f7c9d4afcf139528ceb24cb5f64a192287282ee7fd076992f000000480000000100000000e73f0a730b98e032e90afaf73b8ddab1e821432c3e1c2c51396914f53fb304f26cbc8f85ec68462ff85dfb0979648d43003291ccb9418e7b4016f5d3325d4083000000480000000100000000d44c5aff410f28c841fb51c2e982244d7f7370fb6b73d6e5caba56c1b4b8f96bea190aa8d66e7e37d76fe2e5fef7f78b0de90e12eefda3a36177583412ca074e00000048000000010000000096a1796af867e440a72ee81e36e05f3b73c3341f6166b804bf83c3d0b47df74cc77405595ce44d3ccfb739496b8acb78fdb02bcd510851b3e3de015fc06eadb40000000a00000001000000000f8e0000004800000001000000010100320b119809b793abf357a7f78b0742ee93a957e563a5a94fdb09804e89596f2597a2cb9ae9f5161d5fda88ff050e47b1d28bebc6563465d2e7959e8a624a000000480000000100000001cd39b2053c17021f93030e3b9bc7149ff5423faf64693932f76a8dbffa526fff7c076845b1d31967efca0b56b066e8bacedc1927e629c6d0e87f61bf14ee3039000000480000000100000001053d668ef1855426257ce68cdbc2f66919a2f9efbcb632daa6170cb8246ab7a2348032f48cefdbc3aadcee6b9ab867371346bbe90fd69d213705ed1de38922b300000048000000010000000145bbbf8e0b10c5436e5974f46426d3efdbeaba819ea5d049bb420219a426336e14bc36e5753cb71fb21a2b78f699918a0045a8badddd69646ed65a59e17feec80000000a0000000100000001b30c000000280000000100000001503fdd267309866142ae96b3197515b72ccd766dedbc09d61c25f0c3fa79ebd40000002800000001000000002accc966ccaf48a147471171fb9589c95c561100d6548ad979f328e43bcfe0750000002c00000001000000000000001023a5457e1fa2e2f4a23242b1e61a597d1458bee4871e6f44e9296820014728300000002c000000010000000100000010bd688bc8657972730f1d9a5c340cd555602957fa44cf643423bb23734bf8490b0000003c000000010000000000000020a6f95ec809bac678aa1f4a74a0094e00d33e42da057331c95a61c6b5c3cd24daefeb367e01d3765e91643e37e2ac95e90000003c000000010000000100000020184ff5940c47e4fc42a2bd1f61b304f5fdfc5e453104a3946d06c4897a86f7d2872c948ff06b270b4d024446df8b60fa0000004800000001000000000000020044f4cf64a905e470a2d8091e5320c0b8a370193fe44728340c454361c84578f3b469963d12fa608ab96bf2e8c9c2116010d50e151b6407308d3cb6a2000000480000000100000000bc02026a76b5be1d66cf03d90ea5303a5091b48d370ac186402138606da35c90fe7efb0a21f0a177896f496ba40f02e079b82218be0124ab7de5d4f48cfd921e000000480000000100000000323d2847d03880fa5cb48533939141115c3dc15fa32a82be59d78826e3d37f5cac12010ce10c850df63626f94657a5beacf7d502b59fc10f571959ce6101b8d6000000480000000100000000704e541c930ca3a8d156d7f6122fda7bbdffed9b9bc6160f4ec8ace48978bd458869a636a7d8798d7dbd503e0c41aad82496578df4fbffbd3c5c885dc0bd3dee0000004800000001000000006d6af1efc82365f1619286e7a612155d87038f4ccb39e25e0660f9f2d320ae4321996b69187ba68abdf3e6ab41abfa2dd359c7eaa5d344fc1acb97b58dd44d86000000480000000100000000d444d17c165ee78e1d55f5c42b1f1bcf9c0f302588b68d26d2a308250c42d1df13be07693aa0f42cefcb9dc1688216478a1a041c9a0c66308b3e4a5135fd2f0f0000004800000001000000002c7d9df81c7c9ccb7422089f94c0fa54067e6c4fc634c725c9aa9710aaedd671f72cf9287f38de6111ace6c0c32ed568569b45743abfc519e23aabccdf30a9af000000480000000100000000d1bbcab1224daf8ccfb5e6dbf42ee924935b990eee7abe70ac5537426236e0ff1b2ac4748c665d3aba61c4685798ae62126d89220cd5ae8c6a7c32e33ce1236d0000001c0000000100000000b802088e5e303c8389880c09c3925053cc210825000000080000000200000000000000480000000100000001000001d06fe6d3c4b7761ffea3dea5ca1b75305f3bd828925e041baabc00aa51f93e5d59aa6c5c024e1de93ccabbcc7736271de03665a2b170a42faca2e869980000004800000001000000016c6b50fecd4e0e1a9ca070fafa04c06a12f27af94d5430ccce129ada67c3040d444b772758195366025267bfea9e35cbaaf816022b34755d5ac2a4d7df857732000000480000000100000001ede0bf60b0ca23f40635dcbda76eaf3b59faa140dee0b2480aacd8df765ba5cfd1347f22c9415006210eb4f224332b5cfcac7be98e0da94f74693d8af22e1fad0000004800000001000000010614feada5c2aa494e61a0b2a848b82833860d6c1213c4aceebcbe55f419403ecd843835f14f2caa8310be6bfad7ad2054df500a54268b17530183ef4c49f1c50000004800000001000000011ed33f223e632356012a42484c1241d41ec5426ba94c0c4887a8206b86b41ac73ca8b79d90256d391190bcb2256e881642c5a0fbc178691cf9ec983e1f1db4000000004800000001000000012c5043530d28ce81e89c0a71baeb821ff0240d18fbac0e01b0952bb62b91354597b9061dc440318ce3eabd95742607546c414ebf3da32879b2af3500d08cb4e9000000480000000100000001b404a5293b85aadaa3d595d38992c219ddd7a4e5f00c09af477eea99477b3d53ac6b67c49f0cbd5a7ff038904dfc1a3b58cabe2c25dcb86fa55a53f3d362f0510000002c000000010000000128bf591667dcd1d600abe1db48f49b17a5ad9d5650f7793af7a24341b771a9247f1eb4800000000800000002000000010000000800000000000000020000000800000000000000030000004800000001000000030100abcf924576de63087c8695ccda3705e8670c770f2bfda1dafdeddcd09b2aa6d485c6a87ff31c14300ddb660576ceed52047318a30d3c05c9848b0a1fb05300000048000000010000000387d378e9cbb8914e496a633595c7f68da097afd4fbd0380b4eafe790ffe999b81ceeff32eea4d8fa4279606c7c491ec4eb4a7ef5bf614307c21bd3a314db9d2e000000480000000100000003e9f505f08c464e1f5f123bcc180305bb5a30f2c382493a1cc6d6e5e189e75950f75c8a790aef2c1fae18436c9d6f4840a9eacbf04139a2b25042c27f3a3fd756000000480000000100000003faeaff92d731e354d03dc46cbe8a001188dde35e753c259de359181678d94e47d90709345f6c9975288dbecfe1a6cf2eb7a14978854bbc73d3ac7d0a72cc3ef40000000a0000000100000003c41a0000004800000001000000020100d92f41b75bb8ced6be2fbbc0ba1cfeeebdf15826ce92ba78ef4cd0f6d47ff04e9e593cfc5fc7eac8109effce7e75f547873ab559186885edf0e519f73aed00000048000000010000000243421e08dea79fd12889b2845ca365803bb4aa23c50d0c298e6649121b6d9101f32d15a043ffdbc93e7665617fa7b4b3f01db76f5472c5aa3a085da5683efcc4000000480000000100000002bf9a240df9afc3596d4b3613ae9a2184340561c896a60cc577e6ca507b5e6548ccfcd8bccf27de73deaaf04fab707a20c6aa94febdf8a0a5532c0f4c73958e11000000480000000100000002fc1437567ccd886b5496cabb117993f31afe25f53d92721877892e472bf8bba1743b827e277f500d51b7f74f4682e943be0d3ebfdc30742e211dc3eba51dac8b0000000a00000001000000029074000000280000000100000003e836256016a5f8ca1e29732b7332d9776bdc6694a9df6c1172183f65916f83d50000002c000000010000000300000010f46cbf6896be858f5c2f86ee3c162359c545b1f5bd1eec0cd03e2b7bf9c1b4b90000003c000000010000000300000020c580aa8aad81a2800fadf74749e79c323da65a6d11e8fb517d60ba36a0113b345be7c0fce390fba664776b676d82fdbe000000480000000100000003000002002292a593b68fdbf615d43c123747cf1f1583619708368b471b4a37c8eed21e07d14a7bf309f45335592134c5cc7a18152de20bb7d2fb753bee9131d90000004800000001000000033076a9d57efa379e4f7f4700116d786c586b49523454dd9b3ae7cfde0416d9bfbb486eed31f88fec8128cd1e0bf783c8978c04fde5f1bbe67ecbe1c76e0596f5000000480000000100000003579bbdb311093c2a3bb58b848be88302ab2bb6c24bf076a694de2b2fa1a8eff53fcaa6800e938bdeee831498fcc72cc9b822dad5b2074d5bc292c766e44c13e000000048000000010000000331fffa94345676f294eceb259baa51107267136af1e829868e1a3c5e2514517bfcfaec78783afde2874c6d2f4cb8436ed421e67fe327e8c67c851da9446ef226000000480000000100000003daff3194609bf5a05c1e6ec1e085854275ee81dbee01c92e2cb357faeba811424b80bd9b204d70675aaf026f2f23bb0e882271bad34ff5294cc05cd7fc0740ac0000004800000001000000034b5b49ca009d1836cfa176112aaf7775fa8c241bd45f861c1eec34dd2b9654e8144c74c1f80c9e0f23cae4503ae85de975f74d250be667a1f6285c9951a8f8c90000004800000001000000032fb4e2dd32d6fdd7e93fe24e23b9762099e1b12f5d9cae6dae7df3401e33931a8af65803c1538716bdba05948c8818f92791010ef8d6d315fb97bccdf2c2fbbf000000480000000100000003b97cd2e80a232dcf417da8ac1b835bf9dab15816bc1e2e0c07214e531ac922ca2f5ddbb26f8d599805feb5f6ae1c6e3fe08ef5cf7dbd60eb407892d6e72a67a30000001c0000000100000003e7d781f18b675dad11f1f49600057e8094628ad00000002800000001000000024ac9c87b674dcd932d2e9d3a4b7c16a3989e750fa3a8895e8dd0971c56fb96780000002c000000010000000200000010cf6ca67cfe59cd5f110c1586de9c2186cfb7213784043ffb017fdf5cfa74ac320000003c000000010000000200000020a03a82bae4627fc74de8c75437e5b077aa3d63e5745f61f47362954b80f53ede6867267605b7383f55e6a80aefcae153000000080000000200000003</p><p>参照整理数据后，如下</p><p>8 0 0<br>72 1 0 01001db2ee547837c2b0394f9316a3c672109c854769d9627ce715aa82ae76af4fc7d468903ffa4f7c9d4afcf139528ceb24cb5f64a192287282ee7fd076992f<br>72 1 0 e73f0a730b98e032e90afaf73b8ddab1e821432c3e1c2c51396914f53fb304f26cbc8f85ec68462ff85dfb0979648d43003291ccb9418e7b4016f5d3325d4083<br>72 1 0 d44c5aff410f28c841fb51c2e982244d7f7370fb6b73d6e5caba56c1b4b8f96bea190aa8d66e7e37d76fe2e5fef7f78b0de90e12eefda3a36177583412ca074e<br>72 1 0 96a1796af867e440a72ee81e36e05f3b73c3341f6166b804bf83c3d0b47df74cc77405595ce44d3ccfb739496b8acb78fdb02bcd510851b3e3de015fc06eadb4<br>10 1 0 0f8e<br>40 1 0 2accc966ccaf48a147471171fb9589c95c561100d6548ad979f328e43bcfe075<br>44 1 0 0000001023a5457e1fa2e2f4a23242b1e61a597d1458bee4871e6f44e929682001472830<br>60 1 0 00000020a6f95ec809bac678aa1f4a74a0094e00d33e42da057331c95a61c6b5c3cd24daefeb367e01d3765e91643e37e2ac95e9<br>72 1 0 0000020044f4cf64a905e470a2d8091e5320c0b8a370193fe44728340c454361c84578f3b469963d12fa608ab96bf2e8c9c2116010d50e151b6407308d3cb6a2<br>72 1 0 bc02026a76b5be1d66cf03d90ea5303a5091b48d370ac186402138606da35c90fe7efb0a21f0a177896f496ba40f02e079b82218be0124ab7de5d4f48cfd921e<br>72 1 0 323d2847d03880fa5cb48533939141115c3dc15fa32a82be59d78826e3d37f5cac12010ce10c850df63626f94657a5beacf7d502b59fc10f571959ce6101b8d6<br>72 1 0 704e541c930ca3a8d156d7f6122fda7bbdffed9b9bc6160f4ec8ace48978bd458869a636a7d8798d7dbd503e0c41aad82496578df4fbffbd3c5c885dc0bd3dee<br>72 1 0 6d6af1efc82365f1619286e7a612155d87038f4ccb39e25e0660f9f2d320ae4321996b69187ba68abdf3e6ab41abfa2dd359c7eaa5d344fc1acb97b58dd44d86<br>72 1 0 d444d17c165ee78e1d55f5c42b1f1bcf9c0f302588b68d26d2a308250c42d1df13be07693aa0f42cefcb9dc1688216478a1a041c9a0c66308b3e4a5135fd2f0f<br>72 1 0 2c7d9df81c7c9ccb7422089f94c0fa54067e6c4fc634c725c9aa9710aaedd671f72cf9287f38de6111ace6c0c32ed568569b45743abfc519e23aabccdf30a9af<br>72 1 0 d1bbcab1224daf8ccfb5e6dbf42ee924935b990eee7abe70ac5537426236e0ff1b2ac4748c665d3aba61c4685798ae62126d89220cd5ae8c6a7c32e33ce1236d<br>28 1 0 b802088e5e303c8389880c09c3925053cc210825<br>8 2 0<br>8 0 1<br>72 1 1 0100320b119809b793abf357a7f78b0742ee93a957e563a5a94fdb09804e89596f2597a2cb9ae9f5161d5fda88ff050e47b1d28bebc6563465d2e7959e8a624a<br>72 1 1 cd39b2053c17021f93030e3b9bc7149ff5423faf64693932f76a8dbffa526fff7c076845b1d31967efca0b56b066e8bacedc1927e629c6d0e87f61bf14ee3039<br>72 1 1 053d668ef1855426257ce68cdbc2f66919a2f9efbcb632daa6170cb8246ab7a2348032f48cefdbc3aadcee6b9ab867371346bbe90fd69d213705ed1de38922b3<br>72 1 1 45bbbf8e0b10c5436e5974f46426d3efdbeaba819ea5d049bb420219a426336e14bc36e5753cb71fb21a2b78f699918a0045a8badddd69646ed65a59e17feec8<br>10 1 1 b30c<br>40 1 1 503fdd267309866142ae96b3197515b72ccd766dedbc09d61c25f0c3fa79ebd4<br>44 1 1 00000010bd688bc8657972730f1d9a5c340cd555602957fa44cf643423bb23734bf8490b<br>60 1 1 00000020184ff5940c47e4fc42a2bd1f61b304f5fdfc5e453104a3946d06c4897a86f7d2872c948ff06b270b4d024446df8b60fa<br>72 1 1 000001d06fe6d3c4b7761ffea3dea5ca1b75305f3bd828925e041baabc00aa51f93e5d59aa6c5c024e1de93ccabbcc7736271de03665a2b170a42faca2e86998<br>72 1 1 6c6b50fecd4e0e1a9ca070fafa04c06a12f27af94d5430ccce129ada67c3040d444b772758195366025267bfea9e35cbaaf816022b34755d5ac2a4d7df857732<br>72 1 1 ede0bf60b0ca23f40635dcbda76eaf3b59faa140dee0b2480aacd8df765ba5cfd1347f22c9415006210eb4f224332b5cfcac7be98e0da94f74693d8af22e1fad<br>72 1 1 0614feada5c2aa494e61a0b2a848b82833860d6c1213c4aceebcbe55f419403ecd843835f14f2caa8310be6bfad7ad2054df500a54268b17530183ef4c49f1c5<br>72 1 1 1ed33f223e632356012a42484c1241d41ec5426ba94c0c4887a8206b86b41ac73ca8b79d90256d391190bcb2256e881642c5a0fbc178691cf9ec983e1f1db400<br>72 1 1 2c5043530d28ce81e89c0a71baeb821ff0240d18fbac0e01b0952bb62b91354597b9061dc440318ce3eabd95742607546c414ebf3da32879b2af3500d08cb4e9<br>72 1 1 b404a5293b85aadaa3d595d38992c219ddd7a4e5f00c09af477eea99477b3d53ac6b67c49f0cbd5a7ff038904dfc1a3b58cabe2c25dcb86fa55a53f3d362f051<br>44 1 1 28bf591667dcd1d600abe1db48f49b17a5ad9d5650f7793af7a24341b771a9247f1eb480<br>8 2 1<br>8 0 2<br>72 1 2 0100d92f41b75bb8ced6be2fbbc0ba1cfeeebdf15826ce92ba78ef4cd0f6d47ff04e9e593cfc5fc7eac8109effce7e75f547873ab559186885edf0e519f73aed<br>72 1 2 43421e08dea79fd12889b2845ca365803bb4aa23c50d0c298e6649121b6d9101f32d15a043ffdbc93e7665617fa7b4b3f01db76f5472c5aa3a085da5683efcc4<br>72 1 2 bf9a240df9afc3596d4b3613ae9a2184340561c896a60cc577e6ca507b5e6548ccfcd8bccf27de73deaaf04fab707a20c6aa94febdf8a0a5532c0f4c73958e11<br>72 1 2 fc1437567ccd886b5496cabb117993f31afe25f53d92721877892e472bf8bba1743b827e277f500d51b7f74f4682e943be0d3ebfdc30742e211dc3eba51dac8b<br>10 1 2 9074<br>40 1 2 4ac9c87b674dcd932d2e9d3a4b7c16a3989e750fa3a8895e8dd0971c56fb9678<br>44 1 2 00000010cf6ca67cfe59cd5f110c1586de9c2186cfb7213784043ffb017fdf5cfa74ac32<br>60 1 2 00000020a03a82bae4627fc74de8c75437e5b077aa3d63e5745f61f47362954b80f53ede6867267605b7383f55e6a80aefcae153<br>8 0 3<br>72 1 3 0100abcf924576de63087c8695ccda3705e8670c770f2bfda1dafdeddcd09b2aa6d485c6a87ff31c14300ddb660576ceed52047318a30d3c05c9848b0a1fb053<br>72 1 3 87d378e9cbb8914e496a633595c7f68da097afd4fbd0380b4eafe790ffe999b81ceeff32eea4d8fa4279606c7c491ec4eb4a7ef5bf614307c21bd3a314db9d2e<br>72 1 3 e9f505f08c464e1f5f123bcc180305bb5a30f2c382493a1cc6d6e5e189e75950f75c8a790aef2c1fae18436c9d6f4840a9eacbf04139a2b25042c27f3a3fd756<br>72 1 3 faeaff92d731e354d03dc46cbe8a001188dde35e753c259de359181678d94e47d90709345f6c9975288dbecfe1a6cf2eb7a14978854bbc73d3ac7d0a72cc3ef4<br>10 1 3 c41a<br>40 1 3 e836256016a5f8ca1e29732b7332d9776bdc6694a9df6c1172183f65916f83d5<br>44 1 3 00000010f46cbf6896be858f5c2f86ee3c162359c545b1f5bd1eec0cd03e2b7bf9c1b4b9<br>60 1 3 00000020c580aa8aad81a2800fadf74749e79c323da65a6d11e8fb517d60ba36a0113b345be7c0fce390fba664776b676d82fdbe<br>72 1 3 000002002292a593b68fdbf615d43c123747cf1f1583619708368b471b4a37c8eed21e07d14a7bf309f45335592134c5cc7a18152de20bb7d2fb753bee9131d9<br>72 1 3 3076a9d57efa379e4f7f4700116d786c586b49523454dd9b3ae7cfde0416d9bfbb486eed31f88fec8128cd1e0bf783c8978c04fde5f1bbe67ecbe1c76e0596f5<br>72 1 3 579bbdb311093c2a3bb58b848be88302ab2bb6c24bf076a694de2b2fa1a8eff53fcaa6800e938bdeee831498fcc72cc9b822dad5b2074d5bc292c766e44c13e0<br>72 1 3 31fffa94345676f294eceb259baa51107267136af1e829868e1a3c5e2514517bfcfaec78783afde2874c6d2f4cb8436ed421e67fe327e8c67c851da9446ef226<br>72 1 3 daff3194609bf5a05c1e6ec1e085854275ee81dbee01c92e2cb357faeba811424b80bd9b204d70675aaf026f2f23bb0e882271bad34ff5294cc05cd7fc0740ac<br>72 1 3 4b5b49ca009d1836cfa176112aaf7775fa8c241bd45f861c1eec34dd2b9654e8144c74c1f80c9e0f23cae4503ae85de975f74d250be667a1f6285c9951a8f8c9<br>72 1 3 2fb4e2dd32d6fdd7e93fe24e23b9762099e1b12f5d9cae6dae7df3401e33931a8af65803c1538716bdba05948c8818f92791010ef8d6d315fb97bccdf2c2fbbf<br>72 1 3 b97cd2e80a232dcf417da8ac1b835bf9dab15816bc1e2e0c07214e531ac922ca2f5ddbb26f8d599805feb5f6ae1c6e3fe08ef5cf7dbd60eb407892d6e72a67a3<br>28 1 3 e7d781f18b675dad11f1f49600057e8094628ad0<br>8 2 3 </p><p>最后整理一下思路，程序主要逻辑是</p><p>从主函数分析得到最开始在server与client建立连接时server端随机数生成了16字节的密钥，然后将它与publickey公钥进行加密，加密后将数据发送给server，同时也读取server端加密数据使用client端私钥解密以后将解密数据与最开始16字节加密后生成的新数据进行异或操作，得到新的密钥来进行了SHA-256，然后server与client间会进行密钥校验过程。如果校验正确，那么最后会将数据进行AES-CBC的模式解密。</p><p>如果我们要得到真正的正确发送的数据，那么我们需要获得server端生成的随机数</p>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP阅读笔记第二章</title>
    <link href="/2024/07/13/CSAPP%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2024/07/13/CSAPP%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="CSAPP阅读笔记第二章——信息的表示和处理"><a href="#CSAPP阅读笔记第二章——信息的表示和处理" class="headerlink" title="CSAPP阅读笔记第二章——信息的表示和处理"></a>CSAPP阅读笔记第二章——信息的表示和处理</h1><h2 id="前述："><a href="#前述：" class="headerlink" title="前述："></a>前述：</h2><p>我们研究三种最重要的数字表示——无符号数编码基于传统的二进制表示法，表示大于或者等于0的数字。补码编码是表示有符号整数的最常见的方式，有符号整数就是可以为正或者为负的数字。浮点数编码是表示实数的科学计数法以2为基数的版本。</p><p>整数的表示虽然只能编码一个相对较小的数值范围，但是这种表示方式是精确的，而浮点数虽然可以编码一个较大的数值范围，但是这种表示只是近似的。</p><h2 id="信息存储："><a href="#信息存储：" class="headerlink" title="信息存储："></a>信息存储：</h2><p>计算机程序将内存视为一个非常大的字节数组，称为虚拟内存。内存的每个字节都由一个唯一的数字来标识，称为它的地址。所有可能的地址的集合就称为虚拟地址空间。</p><h3 id="进制之间的转换"><a href="#进制之间的转换" class="headerlink" title="进制之间的转换"></a>进制之间的转换</h3><p>二进制转十六进制（分组转换）</p><p>十进制转十六进制 （辗转相除法）</p><p>十六进制转十进制</p><h3 id="字数据大小"><a href="#字数据大小" class="headerlink" title="字数据大小"></a>字数据大小</h3><h5 id="字长：指明指针数据的标称大小"><a href="#字长：指明指针数据的标称大小" class="headerlink" title="字长：指明指针数据的标称大小"></a>字长：指明指针数据的标称大小</h5><p>对于一个字长为w的位的机器来说，虚拟地址为 0~（2的w次方-1），程序最多访问2的w次方个字节。</p><p>32位机器的虚拟地址空间为 <strong>4GB</strong>，64 位字长的虚拟地址空间位 16 EB。</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407131409738.jpg" alt="98f038a8297af3d7840dbbb39f382a18"></p><p>当程序prog.c使用如下伪指令编译</p><p>linux&gt; gcc -m32 prog.c</p><p>该程序就可以在64或者32位机器上正确运行</p><p>而如果是使用linux&gt; gcc -m64 prog.c</p><p>那就只能在64位机器上运行</p><p>因此，我们将程序称为32位程序或64位程序时，区别在于该程序是如何编译的，而不是其运行的机器类型</p><p>c语言标准对不同数据类型的数字范围设置了下界，但却没有上界。</p><p><strong>int32_t</strong> 和 <strong>int64_t</strong> 类型分别为 4 字节和 8 字节，不受机器影响。使用确定大小的整数类型很有用。</p><h3 id="寻址和字节顺序"><a href="#寻址和字节顺序" class="headerlink" title="寻址和字节顺序"></a><strong>寻址和字节顺序</strong></h3><p><strong>两种字节存储法：</strong></p><ul><li><p><strong>小端法</strong>：数字的低位在前（前就是最小地址） </p><p>小位置上的数字在小地址，我们看到的图就会倒过来</p></li><li><p><strong>大端法</strong>：数字的高位在前</p></li></ul><p>大多数 Intel 都是小端法，不是所有。</p><p>例如：十六进制数字0x01234567</p><p>大端法</p><table><thead><tr><th>地址</th><th>0x100</th><th>0x101</th><th>0x102</th><th>0x103</th></tr></thead><tbody><tr><td><strong>数据</strong></td><td>01</td><td>23</td><td>45</td><td>67</td></tr></tbody></table><p>小端法</p><table><thead><tr><th>地址</th><th>0x100</th><th>0x101</th><th>0x102</th><th>0x103</th></tr></thead><tbody><tr><td><strong>数据</strong></td><td>67</td><td>45</td><td>23</td><td>01</td></tr></tbody></table><p>许多比较新的微处理器是双端法，就是说可以把他们配置成作为大端或者小端的机器运行，然而，实际情况是：一旦选择了操作系统，那么字节顺序也就固定下来。比如，用于许多移动电话的ARM微处理器，其硬件可以按小端或大端两种模式操作，但是这些芯片上最常见的两种操作系统——Android（来自Google）和IOS（来自Apple），却只能运行于小端模式。</p><h4 id="布尔代数"><a href="#布尔代数" class="headerlink" title="布尔代数"></a>布尔代数</h4><p><strong>布尔代数</strong>是在 0 和 1 基础上的定义</p><p>可以把字节看作是一个长为 8 的<strong>位向量</strong>。</p><p>位向量的一个应用是表示有限集合。如位向量 [0110 1001] 表示集合 A &#x3D; {0,3,5,6}。</p><h4 id="C-语言中的位级运算"><a href="#C-语言中的位级运算" class="headerlink" title="C 语言中的位级运算"></a><strong>C 语言中的位级运算</strong></h4><p>| 或     &amp;与      ~非</p><p>位运算的常见应用是实现<strong>掩码</strong>。掩码表示从一个字中选出的位的集合，如掩码 0xFF 表示一个字的低 8 位。</p><p>表达式 <strong>~0</strong> 可以生成一个全 1 的掩码，不管机器的字大小是多少。</p><h4 id="C-语言中的逻辑运算"><a href="#C-语言中的逻辑运算" class="headerlink" title="C 语言中的逻辑运算"></a><strong>C 语言中的逻辑运算</strong></h4><p>逻辑运算符 &amp;&amp; 和 || 如果第一个参数就能确定结果，就不再计算第二个参数</p><h4 id="C-语言中的移位运算"><a href="#C-语言中的移位运算" class="headerlink" title="C 语言中的移位运算"></a><strong>C 语言中的移位运算</strong></h4><p>左移 k 位丢掉最高的 k 位，并在右端补 k 个 0。</p><p>右移分为<strong>逻辑右移</strong>和<strong>算术右移</strong>。</p><p><strong>逻辑右移左端补 0，算术右移（有符号数）左端补最高有效位的值。</strong></p><p>C++和C都支持有符号（默认）和无符号数</p><p>Java只支持有符号数。</p><h4 id="整数数据类型"><a href="#整数数据类型" class="headerlink" title="整数数据类型"></a><strong>整数数据类型</strong></h4><p>在 64 位系统上</p><ul><li>i<strong>nt</strong>：4字节，可表示十进制数字位数：<strong>10位（-20~20亿以内）</strong></li><li><strong>long long</strong>：8字节，可表示十进制数字位数：<strong>19位（千亿亿级）</strong></li><li>long：8字节</li><li><strong>double</strong>：8字节，<strong>精度15位</strong>，可表示十进制数字位数<strong>308位</strong></li><li><strong>float</strong>：4字节，<strong>精度6位</strong>，可表示十进制数字<strong>38位</strong></li><li><strong>char</strong>：**-128~127**</li></ul><p>java 只支持有符号数。</p><p><strong>无符号数的编码</strong></p><p>无符号表示、补码表示与数据的映射都是双射，即一一对应。</p><p><strong>补码编码</strong></p><p>补码的定义实际就是<strong>将符号位解释为负权</strong>。</p><p>C 库头文件limit.h定义了一组常量来限定不同整数数据类型的取值范围。INT_MAX、INT_MIN、UINT_MAX</p><p>C 库头文件 中定义了 uint16_t, int32_t 等类型，用于声明确定宽度类型的整数。</p><p><strong>有符号数和无符号数之间的转换</strong></p><p>在有符号数与无符号数之间进行强制类型转换的结果是<strong>保持位值不变，只改变解释位的方式。</strong></p><p><strong>补码 x 转无符号数</strong></p><ul><li>x &gt;&#x3D; 0，值不变</li><li>x &lt; 0，转换后的值为 2^w + x</li></ul><p><strong>无符号数 x 转补码</strong></p><ul><li>x &lt; 2^(w-1)，值不变</li><li>x &gt;&#x3D; 2^(w-1)，转换后的值为 x - 2^w</li></ul><p><strong>C 语言中的有符号数和无符号数</strong></p><p>C 语言中有符号数和无符号数相加减，有符号被转换成无符号。</p><p><strong>扩展一个数字的位表示</strong></p><p>扩展无符号数使用零扩展，即在最高位前加 0</p><p>扩展有符号数使用符号扩展，即在最高位前加最高有效位的值</p><p> <strong>截断数字</strong></p><p>对一个 w 位的数字截断为一个 k 位数字，将丢弃高 w-k 位。</p><p>对于无符号数而言，截断后的数字实际上等于 w mod 2^k，即取余。</p><h3 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a><strong>整数运算</strong></h3><p><strong>无符号加法</strong></p><p>考虑溢出，C 语言不会将溢出作为错误发出信号</p><p>当 x+y &gt;&#x3D; 2^w，实际结果为 s &#x3D; x+y-2^w</p><p>对任意的 x+y，<strong>s &#x3D; (x+y) % 2^w</strong></p><p><strong>溢出的结果：</strong>和小于两个加数</p><p><strong>检验溢出的方式：</strong>如果 <strong>s，说明溢出</strong></p><p><strong>无符号数的非</strong>：~x &#x3D; 2^w - x (x&gt;0)</p><p> <strong>补码加法</strong></p><p>当 x+y &gt;&#x3D; 2^(w-1)， s &#x3D; x+y-2^w</p><p>当 x+y &lt; -2^(w-1)，s &#x3D; x+y+2^w</p><p><strong>正溢出的结果是负数，负溢出的结果是正数。</strong></p><p><strong>检验溢出的方式：</strong>当 x,y&gt;0 而 s&lt;&#x3D;0 是正溢出；当 x,y&lt;0 而 s&gt;&#x3D;0 是负溢出</p><p><strong>补码的非</strong></p><p>当 x &#x3D; TMin，-x &#x3D; TMin；当 x ≠ TMin，-x &#x3D; -x</p><p><strong>补码非的位级表示：****对每一位求补，结果再加 1</strong></p><p><strong>计算补码非的第二种方法：</strong>假设 k 是最右边的 1 的位置，对 k 左边的所有位取反</p><p><strong>无符号乘法</strong></p><p><strong>无符号乘法的积</strong> <strong>m &#x3D; (x*y) % 2^w</strong></p><p><strong>补码乘法</strong></p><p>可以认为补码乘法和无符号乘法的<strong>位级表示</strong>是一样的</p><p>C语言在运算时将 x,y 视为无符号数进行乘法运算，结果取余后将其按补码方式解释</p><p><strong>补码乘法的积</strong> <strong>m &#x3D; (x*y) % 2^w</strong></p><p><strong>乘以常数</strong></p><p>大多数机器上，整数乘法需要 <strong>10 个或更多</strong>的时钟周期，而加法、减法、位级运算和移位只需要 1 个时钟周期</p><p><strong>编译器对整数乘法进行优化的方式</strong>：用<strong>移位和加法或减法</strong>运算的组合来代替常数因子的乘法。</p><p>左移 k 位等于乘以 2^k</p><p>如 x * 14  &#x3D;  (x&lt;&lt;3)+(x&lt;&lt;2)+(x&lt;&lt;1)   &#x3D;   (x&lt;&lt;4)-(x&lt;&lt;2)</p><p><strong>判断如何移动的方式</strong>很简单：14 的位级表示为 1110，所以分别左移 3，2，1</p><p><strong>除以 2 的幂</strong></p><p>大多数机器上，整数除法更慢，需要 <strong>30 个或更多</strong>的始终周期。</p><p>（只有）除以 2 的幂可以用移位运算来代替，<strong>无符号采用<strong><strong>逻辑右移</strong></strong>，补码采用****算术右移</strong></p><p>对于有符号数而言，算术右移的结果相当于进行除法运算后<strong>向下舍入</strong></p><p>使用 <strong>(x+(1&lt;&gt;k</strong> 的结果相当于进行除法运算然后<strong>向零舍入</strong></p><p>代码实现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(x&lt;0 ? x+(1&lt;&lt;<span class="hljs-string">k)-1 : x) &gt;&gt; k</span>;         <br></code></pre></td></tr></table></figure><p>​     </p><p><strong>补码使用了与无符号算术运算相同的位级实现</strong>，包括加法、减法、乘法甚至除法。都有完全一样或非常类似的位级行为。</p><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数对于非常大，非常接近零，近似值计算都很有用</p><p><strong>二进制小数</strong></p><p>小数的二进制表示法只能表示那些能够写为 <strong>x * 2^w</strong> 的数，<strong>其他的数都是近似表示。x 必须可以由形如 2^i + 2^j + … + 2^n 的多项式表示</strong></p><p>浮点运算的不精确性可能产生严重后果</p><p><strong>IEEE 浮点表示</strong></p><p><strong>IEEE 浮点标准</strong>的表示形式为：<strong>V &#x3D; (-1)^S * M * 2^E</strong>，它分为三部分：</p><ol><li><strong>符号</strong>：<strong>S</strong> 决定是负数还是正数</li><li><strong>阶码</strong>：<strong>E</strong> 的作用是对浮点数加权</li><li><strong>尾数</strong>：<strong>M</strong> 是一个二进制小数，范围是 1<del>2-ε 或 0</del>1-ε</li></ol><p><strong>在对浮点数的位编码</strong>时：</p><ol><li>一个单独的符号位编码直接编码 S</li><li>k 位的<strong>阶码字段 e</strong> 编码 E；float 中 k&#x3D;8，double 中 <strong>k&#x3D;11</strong></li><li>n 位的<strong>小数字段 f</strong> 编码 M；float 中 n&#x3D;23，double 中 <strong>n&#x3D;52</strong></li></ol><p>E 和 M 的编码方式分为<strong>三种情况</strong>：</p><ol><li><p><strong>规格化的值：</strong>阶码字段即不全为 0 也不全为 1 时属于规格化值（0001~1110）</p></li><li><ol><li>阶码字段解释方式：**E &#x3D; e - (2^(k-1)-1)**；如 k&#x3D;4 时，E 的范围是 -6<del>7；单精度为 -126</del>127</li><li>小数字段解释方式：<strong>M &#x3D; 1 + f</strong></li></ol></li><li><p><strong>非规格化的值</strong>：阶码字段全为 0 时属于非规格化形式</p></li><li><ol><li>阶码字段解释方式：<strong>E &#x3D; 1 - (2^(k-1)-1)<strong>；</strong>与规格化值中 e &#x3D; 1 时的 E 相同</strong></li><li>小数字段解释方式：<strong>M &#x3D; f</strong></li></ol></li><li><p><strong>特殊值：</strong>阶码字段全为 1 时，分两种情况：</p></li><li><ol><li><strong>小数字段全为 0：表示无穷</strong></li><li><strong>小数字段非零：表示 NaN。</strong>比如 ∞-∞ 的结果就返回 NaN</li></ol></li><li><p><strong>数字示例</strong></p></li><li><p>0 有 +0.0 和 -0.0 两种表示方式</p></li><li><p>最大非规格化数到最小规格化数的过渡是平滑的。</p></li><li><p>浮点数能够使用正数排序函数来排序，即浮点数的位级表示当用整数方式来解释时是顺序的（正数升序负数降序）。</p></li><li><p>浮点数可表示的数的分布是不均匀的，越接近零时越稠密</p></li><li><p><strong>几个特殊的值的位级表示：</strong></p></li><li><ol><li>+0.0 全为 0</li><li><strong>最小的正非规格化值：</strong>最低有效位为 1，其他为 0</li><li><strong>最大的非规格化值：</strong>小数字段全为 1，其他为 0</li><li><strong>最小的正规格化值：</strong>阶码字段最低位为 1，其他为 0</li><li><strong>最大的规格化值：</strong>阶码字段最低位为 0，符号位为 0，其他为 1</li></ol></li><li><h5 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h5></li><li><p>因为范围和精度有限，浮点运算只能近似表示实数运算。</p></li><li><p>在浮点数的近似匹配上，IEEE 浮点格式定义了<strong>四种舍入方式（默认第一种）：</strong></p></li><li><ol><li><strong>向偶数舍入（向最接近的值舍入）</strong>：非中间值 (0.5) 四舍五入，中间值向偶数舍入。</li><li>向零舍入</li><li>向下舍入</li><li>向上舍入</li></ol></li><li><p>向偶数舍入可以计算一组数的平均数时避免统计偏差。</p></li><li><p>实际上这种舍入是发生在二进制小数上的。</p></li><li><p><strong>浮点运算</strong></p></li><li><p>IEEE 标准定义 1&#x2F;-0 &#x3D; -∞，1&#x2F;+0 &#x3D; +∞</p></li><li><p>浮点运算是<strong>可交换不可结合也不可分配</strong>的。</p></li><li><p>浮点加法满足<strong>加法和乘法上的单调性</strong>。如果 a&gt;&#x3D;b，则 x+a &gt;&#x3D; x+b</p></li><li><p>缺乏结合性和分配性会使一些简单问题变得很复杂</p></li><li><p><strong>C 语言中的浮点数</strong></p></li><li><p>在 int、float、double 间进行<strong>强制类型转换时的几种情况：</strong></p></li><li><ol><li>int 到 float：不会溢出，可能舍入</li><li>int 或 float 到 double：不会溢出也不会舍入</li><li>double 到 float：可能溢出和舍入</li><li><strong>float 或 double 到 int：</strong>向零舍入，很大时可能溢出，很接近零时也可能溢出。当从浮点转换到整数时如果溢出，转变结果都为 [1000]，因此一个正浮点可能得到一个负整数</li></ol></li><li><p><strong>把大的浮点数转换为整数是一种常见的错误。</strong></p></li><li><p><strong>要小心地使用浮点运算。</strong></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CSAPP笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP阅读笔记第一章</title>
    <link href="/2024/07/13/CSAPP%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2024/07/13/CSAPP%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="CSAPP阅读笔记第一章——计算机系统漫游"><a href="#CSAPP阅读笔记第一章——计算机系统漫游" class="headerlink" title="CSAPP阅读笔记第一章——计算机系统漫游"></a>CSAPP阅读笔记第一章——计算机系统漫游</h1><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>像hello.c这种只由ASCII字符构成的文件称为文本文件，所有其他文件都称为二进制文件</p><p>GCC编译器驱动程序读取源文件hello.c，并把它翻译成一个可执行目标文件hello。这个翻译过程分为四个阶段完成，执行这四个阶段的程序（预处理器，编译器，汇编器和链接器）一起构成了编译系统。</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407130040224.png" alt="img"></p><h3 id="源程序到可执行文件的过程"><a href="#源程序到可执行文件的过程" class="headerlink" title="源程序到可执行文件的过程"></a>源程序到可执行文件的过程</h3><h4 id="预处理阶段："><a href="#预处理阶段：" class="headerlink" title="预处理阶段："></a>预处理阶段：</h4><p>预处理器(cpp)根据字符#开头的命令修改原始的c程序。读取头文件中的内容并直接插入程序文本中。通常以.i作为文件扩展名。</p><p><strong>引入头文件，去除注释，处理所有的条件编译指令（#ifdef,#ifndef,#else,#elif,#endif），宏的替换，添加行号，保留所有的编译器指令</strong>。</p><h4 id="编译阶段："><a href="#编译阶段：" class="headerlink" title="编译阶段："></a>编译阶段：</h4><p>编译器（ccl)将文本文件hello.i翻译成文本文件hello.s,它包含一个汇编语言程序。</p><h5 id="主要是对预处理后的文件进行语法分析，词法分析，语义分析，符号汇总，然后生成汇编代码。"><a href="#主要是对预处理后的文件进行语法分析，词法分析，语义分析，符号汇总，然后生成汇编代码。" class="headerlink" title="主要是对预处理后的文件进行语法分析，词法分析，语义分析，符号汇总，然后生成汇编代码。"></a>主要<strong>是对预处理后的文件进行语法分析，词法分析，语义分析，符号汇总，然后生成汇编代码</strong>。</h5><h4 id="汇编阶段："><a href="#汇编阶段：" class="headerlink" title="汇编阶段："></a>汇编阶段：</h4><p>汇编器(as)将hello.s翻译成机器语言指令，并把这些指令打包成一种叫做可重定位目标程序的格式，并将结果保存在目标文件hello.o中。此时打开文件将会看到一堆乱码。</p><p><strong>汇编过程将汇编代码转成二进制文件。</strong></p><h4 id="链接阶段："><a href="#链接阶段：" class="headerlink" title="链接阶段："></a>链接阶段：</h4><p>链接器（ld）负责合并标准c库函数的.o文件，合并到我们原来的hello.o程序中。生成可执行文件。</p><h4 id="操作系统管理硬件"><a href="#操作系统管理硬件" class="headerlink" title="操作系统管理硬件"></a>操作系统管理硬件</h4><p>操作系统是应用程序和硬件之间插入的一层软件。所有应用程序对硬件的操作尝试都必须通过操作系统。</p><h3 id="计算机系统中抽象的重要性："><a href="#计算机系统中抽象的重要性：" class="headerlink" title="计算机系统中抽象的重要性："></a>计算机系统中抽象的重要性：</h3><p><strong>操作系统有两个基本功能</strong>：（1）防止硬件被失控的应用程序滥用；（2）向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备。</p><h5 id="操作系统通过几个基本的抽象概念-进程、虚拟内存和文件）来实现这两个功能"><a href="#操作系统通过几个基本的抽象概念-进程、虚拟内存和文件）来实现这两个功能" class="headerlink" title="操作系统通过几个基本的抽象概念(进程、虚拟内存和文件）来实现这两个功能:"></a>操作系统通过几个基本的抽象概念(进程、虚拟内存和文件）来实现这两个功能:</h5><p>文件是对O设备的抽象表示，</p><p>虚拟内存是对主存和磁盘I&#x2F;O设备的抽象表示，</p><p>进程则是对处理器、主存和I&#x2F;O设备的抽象表示。</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407130154531.png" alt="image-20240713015418489"></p><h4 id="进程-线程"><a href="#进程-线程" class="headerlink" title="进程&amp;线程"></a>进程&amp;线程</h4><p>进程是操作系统对一个正在运行的程序的一种抽象。在一个系统上可以<strong>同时运行多个进程</strong>，而每个进程都好像在<strong>独占地使用硬件</strong>。</p><p>而并发运行，则是说一个进程的指令和另个进程的指令是交错执行的。</p><h5 id="上下文："><a href="#上下文：" class="headerlink" title="上下文："></a>上下文：</h5><h5 id="操作系统保持和跟踪进程运行所需的所有状态信息（PC值，主存的内容等）。"><a href="#操作系统保持和跟踪进程运行所需的所有状态信息（PC值，主存的内容等）。" class="headerlink" title="操作系统保持和跟踪进程运行所需的所有状态信息（PC值，主存的内容等）。"></a>操作系统保持和跟踪进程运行所需的所有状态信息（PC值，主存的内容等）。</h5><h5 id="上下文切换："><a href="#上下文切换：" class="headerlink" title="上下文切换："></a>上下文切换：</h5><h6 id="一般来说不管单核还是多核，一个CPU看上去都像是在并发的执行多个进程，这是通过处理器在进程间切换来实现的，这就叫做上下文切换。"><a href="#一般来说不管单核还是多核，一个CPU看上去都像是在并发的执行多个进程，这是通过处理器在进程间切换来实现的，这就叫做上下文切换。" class="headerlink" title="一般来说不管单核还是多核，一个CPU看上去都像是在并发的执行多个进程，这是通过处理器在进程间切换来实现的，这就叫做上下文切换。"></a>一般来说不管单核还是多核，一个CPU看上去都像是在并发的执行多个进程，这是通过处理器在进程间切换来实现的，这就叫做上下文切换。</h6><p>操作系统通过控制处理器在进程间切换以达到交错执行的目的。</p><p>从一个进程到另一个进程的转换是由操作系统内核（ kernel）管理的。内核是操作系统代码常驻主存的部分。内核不是一个独立的进程。相反，它是系统管理全部进程所用代码和数据结构的集合。</p><h4 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h4><p>虚拟内存是一个抽象概念，它为每个进程提供了一个假象，即<strong>每个进程都在独占地使用主存</strong>。每个<strong>进程看到的内存都是一致的</strong>，称为虚拟地址空间。</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407130236020.jpg" alt="d9fdf3644a9839d48d293d1db5ad0562"></p><h5 id="程序代码和数据-对于所有进程来说，代码是从同一固定地址开始的，接着就是和C全局变量相对于的数据位置。"><a href="#程序代码和数据-对于所有进程来说，代码是从同一固定地址开始的，接着就是和C全局变量相对于的数据位置。" class="headerlink" title="程序代码和数据: 对于所有进程来说，代码是从同一固定地址开始的，接着就是和C全局变量相对于的数据位置。"></a>程序代码和数据: 对于所有进程来说，代码是从同一固定地址开始的，接着就是和C全局变量相对于的数据位置。</h5><p>存放可执行程序代码和代码中的全局变量。</p><h5 id="堆-代码和数据区在进程一开始运行时就被指定了大小，而调用malloc和free这样的c标准库函数时，堆可以在运行时动态的扩展和收缩。"><a href="#堆-代码和数据区在进程一开始运行时就被指定了大小，而调用malloc和free这样的c标准库函数时，堆可以在运行时动态的扩展和收缩。" class="headerlink" title="堆: 代码和数据区在进程一开始运行时就被指定了大小，而调用malloc和free这样的c标准库函数时，堆可以在运行时动态的扩展和收缩。"></a>堆: 代码和数据区在进程一开始运行时就被指定了大小，而调用malloc和free这样的c标准库函数时，堆可以在运行时动态的扩展和收缩。</h5><p>用于动态申请的内存变量，比如malloc函数申请的动态内存空间，可以向上扩展。</p><h5 id="共享库"><a href="#共享库" class="headerlink" title="共享库:"></a>共享库:</h5><p>用于存放C语言库函数的代码和数据。本例中即printf的代码和数据。</p><h5 id="栈："><a href="#栈：" class="headerlink" title="栈："></a>栈：</h5><p>位于虚拟地址空间的顶部，用于函数调用、存放局部变量等。当我们调用一个函数时，栈会向下扩展，返回时，向上收缩。</p><h5 id="内核虚拟内存"><a href="#内核虚拟内存" class="headerlink" title="内核虚拟内存:"></a>内核虚拟内存:</h5><p> 地址空间顶部的区域是为内核保留的。</p><h4 id="并发-并行"><a href="#并发-并行" class="headerlink" title="并发&amp;并行"></a>并发&amp;并行</h4><p><strong>并发</strong>：一个通用的概念，指一个同时有多个活动的系统</p><p>在微观上并不是同时执行的，只是<strong>把时间分成若干段，使多个进程快速交替的执行</strong>。</p><p><strong>并行</strong>：指用并发来使一个系统运行的更快。并行可以在多个抽象层次上运用</p><p>指在同一时刻，有<strong>多条指令在多个处理器上同时执行</strong>。所以无论从微观还是从宏观来看，二者都是一起执行的。</p><p><strong>超线程</strong>：超线程，有时称为同时多线程（ simultaneous multi-threading），是一项<strong>允许一个CPU执行多个控制流的技术</strong>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSAPP笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【绿城杯2021】babyvxworks wp</title>
    <link href="/2024/07/11/%E3%80%90%E7%BB%BF%E5%9F%8E%E6%9D%AF2021%E3%80%91babyvxworks/"/>
    <url>/2024/07/11/%E3%80%90%E7%BB%BF%E5%9F%8E%E6%9D%AF2021%E3%80%91babyvxworks/</url>
    
    <content type="html"><![CDATA[<h1 id="【绿城杯2021】babyvxworks-wp"><a href="#【绿城杯2021】babyvxworks-wp" class="headerlink" title="【绿城杯2021】babyvxworks wp"></a>【绿城杯2021】babyvxworks wp</h1><h4 id="前述："><a href="#前述：" class="headerlink" title="前述："></a>前述：</h4><p>其实记录这个题主要是要提醒自己三分逆向七分猜的道理，不要死扣……</p><p>打开通过字符串查找去找到main函数</p><p>发现无法生成伪代码，查看发现是花指令的原因，然后还有函数的尾部地址识别不正确的问题</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407110120818.png" alt="image-20240711012003666"></p><p>其实一般来说这个地方的0XE8是作为call指令的机械码不会呗显示出来的，但是这个地方被IDA识别了就减轻了一定程序的工作量了</p><p>选择将E8填充为90或者直接nop掉，下面的也是一样的，然后再按c选择转换为指令形式</p><p>然后发现还是无法生成伪代码</p><p>原因：下图中可以看到push后还有call的调用，很明显函数没有结束但是这个地方IDA却显示为函数sub_3D9 的末尾，所以我们需要选择将这个错误的识别给去掉，在IDA菜单栏Edit里面找到functions，选择delete functions，然后其他的也是一样的</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407110123177.png" alt="image-20240711012310144"></p><p>最后再再函数第一个retn处创建函数末尾，Edit-functions-set function end</p><p>然后再回到未正确识别的函数开头p创建函数开头或者直接对着代码块F5即可正确创建伪代码</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407110128336.png" alt="image-20240711012849280"></p><p>如下：</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407110147992.png" alt="image-20240711014732943"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407110148656.png" alt="image-20240711014800588"></p><p>看着挺头痛的其实直接追踪input即可</p><p>中间那一坨我们猜测是在对文件进行读取或其他操作</p><p>sub_34C0函数其实是在对Input进行长度的获取，即可以重命名为strlen</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407110149448.png" alt="image-20240711014937397"></p><p>然后我们观察do循环中v1和v38的赋值只有loc_330不同，后面为比较</p><p>所以猜测loc_330为加密函数</p><p>进入后发现只有一个异或操作和加法操作，循环次数为长度</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202407110152843.png" alt="image-20240711015243807"></p><p>exp:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-type">int</span> key[]=<br>&#123;<br><br><span class="hljs-number">188</span>, <span class="hljs-number">10</span>, <span class="hljs-number">187</span>, <span class="hljs-number">193</span>, <span class="hljs-number">213</span>, <span class="hljs-number">134</span>, <span class="hljs-number">127</span>, <span class="hljs-number">10</span>, <span class="hljs-number">201</span>, <span class="hljs-number">185</span>, <span class="hljs-number">81</span>, <span class="hljs-number">78</span>,<br><span class="hljs-number">136</span>, <span class="hljs-number">10</span>, <span class="hljs-number">130</span>, <span class="hljs-number">185</span>, <span class="hljs-number">49</span>, <span class="hljs-number">141</span>, <span class="hljs-number">10</span>, <span class="hljs-number">253</span>, <span class="hljs-number">201</span>, <span class="hljs-number">199</span>, <span class="hljs-number">127</span>, <span class="hljs-number">185</span>,<br><span class="hljs-number">17</span>, <span class="hljs-number">78</span>, <span class="hljs-number">185</span>, <span class="hljs-number">232</span>, <span class="hljs-number">141</span>, <span class="hljs-number">87</span><br>&#125;;<br><br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">30</span>;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">30</span>;j++)<br>&#123;<br>key[i]-=<span class="hljs-number">3</span>;<br>key[i]^=<span class="hljs-number">0x22</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,key[i]);<br>&#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>flag{helo_w0rld_W3lcome_70_R3}</p>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网鼎杯青龙组部分RE WP</title>
    <link href="/2024/06/17/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5Djocker/"/>
    <url>/2024/06/17/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5Djocker/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2020-青龙组-jocker"><a href="#网鼎杯-2020-青龙组-jocker" class="headerlink" title="[网鼎杯 2020 青龙组]jocker"></a>[网鼎杯 2020 青龙组]jocker</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cmp</span>=[<span class="hljs-number">0</span>x00000066, <span class="hljs-number">0</span>x0000006B, <span class="hljs-number">0</span>x00000063, <span class="hljs-number">0</span>x00000064, <span class="hljs-number">0</span>x0000007F, <span class="hljs-number">0</span>x00000061, <span class="hljs-number">0</span>x00000067, <span class="hljs-number">0</span>x00000064, <span class="hljs-number">0</span>x0000003B, <span class="hljs-number">0</span>x00000056, <span class="hljs-number">0</span>x0000006B, <span class="hljs-number">0</span>x00000061, <span class="hljs-number">0</span>x0000007B, <span class="hljs-number">0</span>x00000026, <span class="hljs-number">0</span>x0000003B, <span class="hljs-number">0</span>x00000050, <span class="hljs-number">0</span>x00000063, <span class="hljs-number">0</span>x0000005F, <span class="hljs-number">0</span>x0000004D, <span class="hljs-number">0</span>x0000005A, <span class="hljs-number">0</span>x00000071, <span class="hljs-number">0</span>x0000000C, <span class="hljs-number">0</span>x00000037, <span class="hljs-number">0</span>x00000066, <span class="hljs-number">0</span>x00000000]<br><span class="hljs-attribute">flag</span>=[<span class="hljs-number">0</span>]*<span class="hljs-number">25</span><br><span class="hljs-attribute">flag_str</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attribute">for</span> i in range (<span class="hljs-number">24</span>):<br><br>    <span class="hljs-attribute">if</span>((i&amp;<span class="hljs-number">1</span>)!=<span class="hljs-number">0</span>):<br>        <span class="hljs-attribute">flag</span>[i]=cmp[i]+i<br>    <span class="hljs-attribute">else</span>:<br>        <span class="hljs-attribute">flag</span>[i]=cmp[i]^i<br>    <span class="hljs-attribute">flag_str</span>+=chr(flag[i])<br><span class="hljs-attribute">print</span>(flag_str)<br><br><br></code></pre></td></tr></table></figure><p>获得</p><p>flag{fak3_alw35_sp_me!!}</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202406171800811.png" alt="image-20240617180033775"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202406171800283.png" alt="image-20240617180012150"></p><p>之前的步骤需要处理一下IDA识别里面的堆栈不平衡的问题</p><p>其实不解决这个问题也能做，但是遇到了就学下吧</p><p>来源：</p><p><a href="https://blog.csdn.net/dj0379/article/details/8699219?utm_source=app&app_version=4.5.5">IDA为什么产生 sp-analysis failed 错误？-CSDN博客</a></p><p><a href="https://blog.csdn.net/singleyellow/article/details/79152804">sp-analysis failed-CSDN博客</a></p><p>总结一下：</p><p>1、确定本函数的栈大小、传入参数数量、是否保存寄存器，对本函数做响应修改</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202406172348925.png" alt="img"></p><p>2、在本函数内部分析每一行的栈指针，看ida有没识别错误的，如果有识别错误的通过Alt+K修改过来</p><p>这个地方还要注意一下最开始得到假flag的时候提取数据的时候没有去注意具体的数据的类型</p><h1 id="网鼎杯-2020-青龙组-singal"><a href="#网鼎杯-2020-青龙组-singal" class="headerlink" title="[网鼎杯 2020 青龙组]singal"></a>[网鼎杯 2020 青龙组]singal</h1><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-meta">#<span class="hljs-keyword">include</span>&lt;stdio.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>&lt;string.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>&lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>&lt;windows.h&gt;</span><br><br>using namespace std;<span class="hljs-comment">//注意要把中间的数据0都去掉，避免出现死循环</span><br>unsigned char opcode[<span class="hljs-number">114</span>] = &#123;<br>    <span class="hljs-number">0</span>x0000000A, <span class="hljs-number">0</span>x00000004, <span class="hljs-number">0</span>x00000010, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x00000003, <span class="hljs-number">0</span>x00000005, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000004,<br>    <span class="hljs-number">0</span>x00000020, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x00000005, <span class="hljs-number">0</span>x00000003, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000003, <span class="hljs-number">0</span>x00000002, <span class="hljs-number">0</span>x00000008,<br>    <span class="hljs-number">0</span>x0000000B, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x0000000C, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x00000004, <span class="hljs-number">0</span>x00000004, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000005,<br>    <span class="hljs-number">0</span>x00000003, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x00000003, <span class="hljs-number">0</span>x00000021, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x0000000B, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x0000000B,<br>    <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000004, <span class="hljs-number">0</span>x00000009, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x00000003, <span class="hljs-number">0</span>x00000020, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000002,<br>    <span class="hljs-number">0</span>x00000051, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x00000004, <span class="hljs-number">0</span>x00000024, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x0000000C, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x0000000B,<br>    <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000005, <span class="hljs-number">0</span>x00000002, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x00000002, <span class="hljs-number">0</span>x00000025, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000002,<br>    <span class="hljs-number">0</span>x00000036, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x00000004, <span class="hljs-number">0</span>x00000041, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000002, <span class="hljs-number">0</span>x00000020, <span class="hljs-number">0</span>x00000008,<br>    <span class="hljs-number">0</span>x00000005, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000005, <span class="hljs-number">0</span>x00000003, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x00000002, <span class="hljs-number">0</span>x00000025,<br>    <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000004, <span class="hljs-number">0</span>x00000009, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x00000003, <span class="hljs-number">0</span>x00000020, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000002,<br>    <span class="hljs-number">0</span>x00000041, <span class="hljs-number">0</span>x00000008, <span class="hljs-number">0</span>x0000000C, <span class="hljs-number">0</span>x00000001, <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>x00000022, <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>x0000003F,<br>    <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>x00000034, <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>x00000032, <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>x00000072, <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>x00000033,<br>    <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>x00000018, <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>xFFFFFFA7, <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>x00000031, <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>xFFFFFFF1,<br>    <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>x00000028, <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>xFFFFFF84, <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>xFFFFFFC1, <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>x0000001E,<br>    <span class="hljs-number">0</span>x00000007, <span class="hljs-number">0</span>x0000007A<br>&#125;;<br><br>unsigned char input[<span class="hljs-number">1024</span>]=<span class="hljs-string">&quot;flag&#123;hbcacjnicejwklmlkmkmbXHcb&#125;&quot;</span>;<br><br><span class="hljs-comment">//unsigned char opcode[114]=&#123;0&#125;;</span><br><br><br><br>int result; <span class="hljs-comment">// eax</span><br><br><br><br>int main(void)&#123;<br><br>int i;<br><span class="hljs-comment">//for(i=0;i&lt;456;i++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//memcpy(&amp;opcode[i],&amp;ida_chars[i*4],4);</span><br><span class="hljs-comment">//&#125;</span><br>char v4; <span class="hljs-comment">// [esp+DBh] [ebp-1Dh]</span><br>int v5; <span class="hljs-comment">// [esp+DCh] [ebp-1Ch]</span><br>int v6; <span class="hljs-comment">// [esp+E0h] [ebp-18h]</span><br>int v7; <span class="hljs-comment">// [esp+E4h] [ebp-14h]</span><br>int v8; <span class="hljs-comment">// [esp+E8h] [ebp-10h]</span><br>int <span class="hljs-variable">_eip</span>; <span class="hljs-comment">// [esp+ECh] [ebp-Ch]</span><br><br><span class="hljs-variable">_eip</span> = <span class="hljs-number">0</span>;<br>v8 = <span class="hljs-number">0</span>;<br>v7 = <span class="hljs-number">0</span>;<br>v6 = <span class="hljs-number">0</span>;<br>v5 = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>&#123;<br><br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">_eip</span> &gt;= <span class="hljs-number">114</span> )<br>return <span class="hljs-number">0</span>;<br><span class="hljs-keyword">switch</span> ( opcode[<span class="hljs-variable">_eip</span>] )<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>printf(<span class="hljs-string">&quot;%x\t#1:\t input[%d]=%d;\n&quot;</span>,<span class="hljs-variable">_eip</span>,v6,v4);<br>input[v6 + <span class="hljs-number">100</span>] = v4;<br>++<span class="hljs-variable">_eip</span>;<br>++v6;<br>++v8;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>printf(<span class="hljs-string">&quot;%x\t#2:\t v4(%d)=opcode[%d](%d)+input[%d](%d)\n&quot;</span>,<span class="hljs-variable">_eip</span>,opcode[<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>]+input[v8],<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>,opcode[<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>],v8,input[v8]);<br>v4 = opcode[<span class="hljs-variable">_eip</span> + <span class="hljs-number">1</span>] + input[v8];<br><span class="hljs-variable">_eip</span> += <span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>printf(<span class="hljs-string">&quot;%x\t#3:\t v4(%d)=input[%d](%d)-opcode[%d](%d)\n&quot;</span>,<span class="hljs-variable">_eip</span>,input[v8]-opcode[<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>],v8,input[v8],<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>,opcode[<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>]);<br>v4 = input[v8] - opcode[<span class="hljs-variable">_eip</span> + <span class="hljs-number">1</span>];<br><span class="hljs-variable">_eip</span> += <span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>printf(<span class="hljs-string">&quot;%x\t#4:\t v4(%d)=opcode[%d](%d)^input[%d](%d)\n&quot;</span>,<span class="hljs-variable">_eip</span>,opcode[<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>]^input[v8],<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>,opcode[<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>],v8,input[v8]);<br>v4 = opcode[<span class="hljs-variable">_eip</span> + <span class="hljs-number">1</span>] ^ input[v8];<br><span class="hljs-variable">_eip</span> += <span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>printf(<span class="hljs-string">&quot;%x\t#5:\t v4(%d)=opcode[%d](%d)*input[%d](%d)\n&quot;</span>,<span class="hljs-variable">_eip</span>,opcode[<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>]*input[v8],<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>,opcode[<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>],v8,input[v8]);<br>v4 = opcode[<span class="hljs-variable">_eip</span> + <span class="hljs-number">1</span>] * input[v8];<br><span class="hljs-variable">_eip</span> += <span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>printf(<span class="hljs-string">&quot;%x\t#6:\t eip++\n&quot;</span>,<span class="hljs-variable">_eip</span>);<br>++<span class="hljs-variable">_eip</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>printf(<span class="hljs-string">&quot;%x\t #7:\t input[%d](%d)!=opcode[%d](%d)\n&quot;</span>,<span class="hljs-variable">_eip</span>,v7+<span class="hljs-number">100</span>,input[v7+<span class="hljs-number">100</span>],<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>,opcode[<span class="hljs-variable">_eip</span>+<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">if</span> ( input[v7 + <span class="hljs-number">100</span>] != opcode[<span class="hljs-variable">_eip</span> + <span class="hljs-number">1</span>] )<br>&#123;<br>printf(<span class="hljs-string">&quot;what a shame...\n\n&quot;</span>);<br><span class="hljs-comment">//exit(0);</span><br>&#125;<br>++v7;<br><span class="hljs-variable">_eip</span> += <span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>printf(<span class="hljs-string">&quot;%x\t#8:\t input[%d]=v4(%d)\n&quot;</span>,<span class="hljs-variable">_eip</span>,v5,v4);<br>input[v5] = v4;<br>++<span class="hljs-variable">_eip</span>;<br>++v5;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>printf(<span class="hljs-string">&quot;%x\t#10:\tinput flag\n&quot;</span>,<span class="hljs-variable">_eip</span>);<br><span class="hljs-comment">//read(input);</span><br>++<span class="hljs-variable">_eip</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>printf(<span class="hljs-string">&quot;%x\t#11:\t v4(%d)=input[%d]-1\n&quot;</span>,<span class="hljs-variable">_eip</span>,input[v8]-<span class="hljs-number">1</span>,v8);<br>v4 = input[v8] - <span class="hljs-number">1</span>;<br>++<span class="hljs-variable">_eip</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>printf(<span class="hljs-string">&quot;%x\t#12:\t v4(%d)=input[%d]+1\n&quot;</span>,<span class="hljs-variable">_eip</span>,input[v8]+<span class="hljs-number">1</span>,v8);<br>v4 = input[v8] + <span class="hljs-number">1</span>;<br>++<span class="hljs-variable">_eip</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br><br>&#125; <br><br></code></pre></td></tr></table></figure><p>运行得到结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>       #<span class="hljs-number">10</span>:    input flag<br><span class="hljs-attribute">1</span>       #<span class="hljs-number">4</span>:      v4(<span class="hljs-number">118</span>)=opcode[<span class="hljs-number">2</span>](<span class="hljs-number">16</span>)^input[<span class="hljs-number">0</span>](<span class="hljs-number">102</span>)<br><span class="hljs-attribute">3</span>       #<span class="hljs-number">8</span>:      input[<span class="hljs-number">0</span>]=v4(<span class="hljs-number">118</span>)<br><span class="hljs-attribute">4</span>       #<span class="hljs-number">3</span>:      v4(<span class="hljs-number">113</span>)=input[<span class="hljs-number">0</span>](<span class="hljs-number">118</span>)-opcode[<span class="hljs-number">5</span>](<span class="hljs-number">5</span>)<br><span class="hljs-attribute">6</span>       #<span class="hljs-number">1</span>:      input[<span class="hljs-number">0</span>]=<span class="hljs-number">113</span>;<br><br><span class="hljs-attribute">7</span>       #<span class="hljs-number">4</span>:      v4(<span class="hljs-number">76</span>)=opcode[<span class="hljs-number">8</span>](<span class="hljs-number">32</span>)^input[<span class="hljs-number">1</span>](<span class="hljs-number">108</span>)<br><span class="hljs-attribute">9</span>       #<span class="hljs-number">8</span>:      input[<span class="hljs-number">1</span>]=v4(<span class="hljs-number">76</span>)<br><span class="hljs-attribute">a</span>       #<span class="hljs-number">5</span>:      v4(<span class="hljs-number">228</span>)=opcode[<span class="hljs-number">11</span>](<span class="hljs-number">3</span>)*input[<span class="hljs-number">1</span>](<span class="hljs-number">76</span>)<br><span class="hljs-attribute">c</span>       #<span class="hljs-number">1</span>:      input[<span class="hljs-number">1</span>]=-<span class="hljs-number">28</span>;<br><br><span class="hljs-attribute">d</span>       #<span class="hljs-number">3</span>:      v4(<span class="hljs-number">95</span>)=input[<span class="hljs-number">2</span>](<span class="hljs-number">97</span>)-opcode[<span class="hljs-number">14</span>](<span class="hljs-number">2</span>)<br><span class="hljs-attribute">f</span>       #<span class="hljs-number">8</span>:      input[<span class="hljs-number">2</span>]=v4(<span class="hljs-number">95</span>)<br><span class="hljs-attribute">10</span>      #<span class="hljs-number">11</span>:     v4(<span class="hljs-number">94</span>)=input[<span class="hljs-number">2</span>]-<span class="hljs-number">1</span><br><span class="hljs-attribute">11</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">2</span>]=<span class="hljs-number">94</span>;<br><br><span class="hljs-attribute">12</span>      #<span class="hljs-number">12</span>:     v4(<span class="hljs-number">104</span>)=input[<span class="hljs-number">3</span>]+<span class="hljs-number">1</span><br><span class="hljs-attribute">13</span>      #<span class="hljs-number">8</span>:      input[<span class="hljs-number">3</span>]=v4(<span class="hljs-number">104</span>)<br><span class="hljs-attribute">14</span>      #<span class="hljs-number">4</span>:      v4(<span class="hljs-number">108</span>)=opcode[<span class="hljs-number">21</span>](<span class="hljs-number">4</span>)^input[<span class="hljs-number">3</span>](<span class="hljs-number">104</span>)<br><span class="hljs-attribute">16</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">3</span>]=<span class="hljs-number">108</span>;<br><br><span class="hljs-attribute">17</span>      #<span class="hljs-number">5</span>:      v4(<span class="hljs-number">369</span>)=opcode[<span class="hljs-number">24</span>](<span class="hljs-number">3</span>)*input[<span class="hljs-number">4</span>](<span class="hljs-number">123</span>)<br><span class="hljs-attribute">19</span>      #<span class="hljs-number">8</span>:      input[<span class="hljs-number">4</span>]=v4(<span class="hljs-number">113</span>)<br><span class="hljs-attribute">1a</span>      #<span class="hljs-number">3</span>:      v4(<span class="hljs-number">80</span>)=input[<span class="hljs-number">4</span>](<span class="hljs-number">113</span>)-opcode[<span class="hljs-number">27</span>](<span class="hljs-number">33</span>)<br><span class="hljs-attribute">1c</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">4</span>]=<span class="hljs-number">80</span>;<br><br><span class="hljs-attribute">1d</span>      #<span class="hljs-number">11</span>:     v4(<span class="hljs-number">103</span>)=input[<span class="hljs-number">5</span>]-<span class="hljs-number">1</span><br><span class="hljs-attribute">1e</span>      #<span class="hljs-number">8</span>:      input[<span class="hljs-number">5</span>]=v4(<span class="hljs-number">103</span>)<br><span class="hljs-attribute">1f</span>      #<span class="hljs-number">11</span>:     v4(<span class="hljs-number">102</span>)=input[<span class="hljs-number">5</span>]-<span class="hljs-number">1</span><br><span class="hljs-attribute">20</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">5</span>]=<span class="hljs-number">102</span>;<br><br><span class="hljs-attribute">21</span>      #<span class="hljs-number">4</span>:      v4(<span class="hljs-number">107</span>)=opcode[<span class="hljs-number">34</span>](<span class="hljs-number">9</span>)^input[<span class="hljs-number">6</span>](<span class="hljs-number">98</span>)<br><span class="hljs-attribute">23</span>      #<span class="hljs-number">8</span>:      input[<span class="hljs-number">6</span>]=v4(<span class="hljs-number">107</span>)<br><span class="hljs-attribute">24</span>      #<span class="hljs-number">3</span>:      v4(<span class="hljs-number">75</span>)=input[<span class="hljs-number">6</span>](<span class="hljs-number">107</span>)-opcode[<span class="hljs-number">37</span>](<span class="hljs-number">32</span>)<br><span class="hljs-attribute">26</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">6</span>]=<span class="hljs-number">75</span>;<br><br><span class="hljs-attribute">27</span>      #<span class="hljs-number">2</span>:      v4(<span class="hljs-number">180</span>)=opcode[<span class="hljs-number">40</span>](<span class="hljs-number">81</span>)+input[<span class="hljs-number">7</span>](<span class="hljs-number">99</span>)<br><span class="hljs-attribute">29</span>      #<span class="hljs-number">8</span>:      input[<span class="hljs-number">7</span>]=v4(-<span class="hljs-number">76</span>)<br><span class="hljs-attribute">2a</span>      #<span class="hljs-number">4</span>:      v4(<span class="hljs-number">144</span>)=opcode[<span class="hljs-number">43</span>](<span class="hljs-number">36</span>)^input[<span class="hljs-number">7</span>](<span class="hljs-number">180</span>)<br><span class="hljs-attribute">2c</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">7</span>]=-<span class="hljs-number">112</span>;<br><br><span class="hljs-attribute">2d</span>      #<span class="hljs-number">12</span>:     v4(<span class="hljs-number">98</span>)=input[<span class="hljs-number">8</span>]+<span class="hljs-number">1</span><br><span class="hljs-attribute">2e</span>      #<span class="hljs-number">8</span>:      input[<span class="hljs-number">8</span>]=v4(<span class="hljs-number">98</span>)<br><span class="hljs-attribute">2f</span>      #<span class="hljs-number">11</span>:     v4(<span class="hljs-number">97</span>)=input[<span class="hljs-number">8</span>]-<span class="hljs-number">1</span><br><span class="hljs-attribute">30</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">8</span>]=<span class="hljs-number">97</span>;<br><br><span class="hljs-attribute">31</span>      #<span class="hljs-number">5</span>:      v4(<span class="hljs-number">198</span>)=opcode[<span class="hljs-number">50</span>](<span class="hljs-number">2</span>)*input[<span class="hljs-number">9</span>](<span class="hljs-number">99</span>)<br><span class="hljs-attribute">33</span>      #<span class="hljs-number">8</span>:      input[<span class="hljs-number">9</span>]=v4(-<span class="hljs-number">58</span>)<br><span class="hljs-attribute">34</span>      #<span class="hljs-number">2</span>:      v4(<span class="hljs-number">235</span>)=opcode[<span class="hljs-number">53</span>](<span class="hljs-number">37</span>)+input[<span class="hljs-number">9</span>](<span class="hljs-number">198</span>)<br><span class="hljs-attribute">36</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">9</span>]=-<span class="hljs-number">21</span>;<br><br><span class="hljs-attribute">37</span>      #<span class="hljs-number">2</span>:      v4(<span class="hljs-number">160</span>)=opcode[<span class="hljs-number">56</span>](<span class="hljs-number">54</span>)+input[<span class="hljs-number">10</span>](<span class="hljs-number">106</span>)<br><span class="hljs-attribute">39</span>      #<span class="hljs-number">8</span>:      input[<span class="hljs-number">10</span>]=v4(-<span class="hljs-number">96</span>)<br><span class="hljs-attribute">3a</span>      #<span class="hljs-number">4</span>:      v4(<span class="hljs-number">225</span>)=opcode[<span class="hljs-number">59</span>](<span class="hljs-number">65</span>)^input[<span class="hljs-number">10</span>](<span class="hljs-number">160</span>)<br><span class="hljs-attribute">3c</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">10</span>]=-<span class="hljs-number">31</span>;<br><br><span class="hljs-attribute">3d</span>      #<span class="hljs-number">2</span>:      v4(<span class="hljs-number">142</span>)=opcode[<span class="hljs-number">62</span>](<span class="hljs-number">32</span>)+input[<span class="hljs-number">11</span>](<span class="hljs-number">110</span>)<br><span class="hljs-attribute">3f</span>      #<span class="hljs-number">8</span>:      input[<span class="hljs-number">11</span>]=v4(-<span class="hljs-number">114</span>)<br><span class="hljs-attribute">40</span>      #<span class="hljs-number">5</span>:      v4(<span class="hljs-number">142</span>)=opcode[<span class="hljs-number">65</span>](<span class="hljs-number">1</span>)*input[<span class="hljs-number">11</span>](<span class="hljs-number">142</span>)<br><span class="hljs-attribute">42</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">11</span>]=-<span class="hljs-number">114</span>;<br><br><span class="hljs-attribute">43</span>      #<span class="hljs-number">5</span>:      v4(<span class="hljs-number">315</span>)=opcode[<span class="hljs-number">68</span>](<span class="hljs-number">3</span>)*input[<span class="hljs-number">12</span>](<span class="hljs-number">105</span>)<br><span class="hljs-attribute">45</span>      #<span class="hljs-number">8</span>:      input[<span class="hljs-number">12</span>]=v4(<span class="hljs-number">59</span>)<br><span class="hljs-attribute">46</span>      #<span class="hljs-number">2</span>:      v4(<span class="hljs-number">96</span>)=opcode[<span class="hljs-number">71</span>](<span class="hljs-number">37</span>)+input[<span class="hljs-number">12</span>](<span class="hljs-number">59</span>)<br><span class="hljs-attribute">48</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">12</span>]=<span class="hljs-number">96</span>;<br><br><span class="hljs-attribute">49</span>      #<span class="hljs-number">4</span>:      v4(<span class="hljs-number">106</span>)=opcode[<span class="hljs-number">74</span>](<span class="hljs-number">9</span>)^input[<span class="hljs-number">13</span>](<span class="hljs-number">99</span>)<br><span class="hljs-attribute">4b</span>      #<span class="hljs-number">8</span>:      input[<span class="hljs-number">13</span>]=v4(<span class="hljs-number">106</span>)<br><span class="hljs-attribute">4c</span>      #<span class="hljs-number">3</span>:      v4(<span class="hljs-number">74</span>)=input[<span class="hljs-number">13</span>](<span class="hljs-number">106</span>)-opcode[<span class="hljs-number">77</span>](<span class="hljs-number">32</span>)<br><span class="hljs-attribute">4e</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">13</span>]=<span class="hljs-number">74</span>;<br><br><span class="hljs-attribute">4f</span>      #<span class="hljs-number">2</span>:      v4(<span class="hljs-number">166</span>)=opcode[<span class="hljs-number">80</span>](<span class="hljs-number">65</span>)+input[<span class="hljs-number">14</span>](<span class="hljs-number">101</span>)<br><span class="hljs-attribute">51</span>      #<span class="hljs-number">8</span>:      input[<span class="hljs-number">14</span>]=v4(-<span class="hljs-number">90</span>)<br><span class="hljs-attribute">52</span>      #<span class="hljs-number">12</span>:     v4(<span class="hljs-number">167</span>)=input[<span class="hljs-number">14</span>]+<span class="hljs-number">1</span><br><span class="hljs-attribute">53</span>      #<span class="hljs-number">1</span>:      input[<span class="hljs-number">14</span>]=-<span class="hljs-number">89</span>;<br><br><span class="hljs-attribute">54</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">100</span>](<span class="hljs-number">113</span>)!=opcode[<span class="hljs-number">85</span>](<span class="hljs-number">34</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">56</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">101</span>](<span class="hljs-number">228</span>)!=opcode[<span class="hljs-number">87</span>](<span class="hljs-number">63</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">58</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">102</span>](<span class="hljs-number">94</span>)!=opcode[<span class="hljs-number">89</span>](<span class="hljs-number">52</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">5a</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">103</span>](<span class="hljs-number">108</span>)!=opcode[<span class="hljs-number">91</span>](<span class="hljs-number">50</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">5c</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">104</span>](<span class="hljs-number">80</span>)!=opcode[<span class="hljs-number">93</span>](<span class="hljs-number">114</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">5e</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">105</span>](<span class="hljs-number">102</span>)!=opcode[<span class="hljs-number">95</span>](<span class="hljs-number">51</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">60</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">106</span>](<span class="hljs-number">75</span>)!=opcode[<span class="hljs-number">97</span>](<span class="hljs-number">24</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">62</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">107</span>](<span class="hljs-number">144</span>)!=opcode[<span class="hljs-number">99</span>](<span class="hljs-number">167</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">64</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">108</span>](<span class="hljs-number">97</span>)!=opcode[<span class="hljs-number">101</span>](<span class="hljs-number">49</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">66</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">109</span>](<span class="hljs-number">235</span>)!=opcode[<span class="hljs-number">103</span>](<span class="hljs-number">241</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">68</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">110</span>](<span class="hljs-number">225</span>)!=opcode[<span class="hljs-number">105</span>](<span class="hljs-number">40</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">6a</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">111</span>](<span class="hljs-number">142</span>)!=opcode[<span class="hljs-number">107</span>](<span class="hljs-number">132</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">6c</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">112</span>](<span class="hljs-number">96</span>)!=opcode[<span class="hljs-number">109</span>](<span class="hljs-number">193</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">6e</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">113</span>](<span class="hljs-number">74</span>)!=opcode[<span class="hljs-number">111</span>](<span class="hljs-number">30</span>)<br><span class="hljs-attribute">what</span> a shame...<br><br><span class="hljs-attribute">70</span>       #<span class="hljs-number">7</span>:     input[<span class="hljs-number">114</span>](<span class="hljs-number">167</span>)!=opcode[<span class="hljs-number">113</span>](<span class="hljs-number">122</span>)<br><span class="hljs-attribute">what</span> a shame...<br></code></pre></td></tr></table></figure><p>只有case7处是在直接比较输入的数据和最后已知的opcode的指令（opcode[i+1])</p><p>那么就是取opcode指令里面的是7的下一个数据</p><p>下面得到的[34,63,52,50,114,51,24,167,49,241,40,132,193,30,122]数据则为输入正确的flag以后经过处理最后得到的数据</p><p>然后再根据最后每一位得到的input挨个推出就行</p><p>也可以选择angr一把梭</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pf">import angr<br>project = angr.Project(&#x27;signal.exe&#x27;)     <span class="hljs-comment">#创建项目,加载二进制文件</span><br><span class="hljs-keyword">state</span> = project.factory.entry_state()    <span class="hljs-comment">#创建state</span><br>sim = project.factory.simgr(<span class="hljs-keyword">state</span>)        <span class="hljs-comment">#创建sim</span><br>sim.explore(find=<span class="hljs-number">0</span>x40175e,avoid=<span class="hljs-number">0</span>x4016e6) <span class="hljs-comment"># 希望到达的和避免的分支</span><br>if sim.found:<br>    res = sim.found[<span class="hljs-number">0</span>]<br>    res = res.posix.dumps(<span class="hljs-number">0</span>)<br>    print(<span class="hljs-string">&quot;[+] Success! Solution is: &#123;&#125;&quot;</span>.format(res.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)))<br></code></pre></td></tr></table></figure><p>详情</p><p>[BUUCTF-<a href="https://blog.csdn.net/weixin_52369224/article/details/121319151">网鼎杯 2020 青龙组]singal——angr学习记录_退出angr环境-CSDN博客</a></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202406190102199.png" alt="image-20240619010216074"></p><p>注意angr脚本中的地址</p><p>此处判断循环结束，故find地址为0x40175e，避免出现what a shame…，故avoid地址为0x4016e6</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202406190125392.png" alt="image-20240619012543353"></p><h1 id="网鼎杯-2022-青龙组-fakeshell"><a href="#网鼎杯-2022-青龙组-fakeshell" class="headerlink" title="[网鼎杯 2022 青龙组]fakeshell"></a>[网鼎杯 2022 青龙组]fakeshell</h1><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202406190132716.png" alt="image-20240619013219664"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202406191242857.png" alt="image-20240619124204767"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202406191242101.png" alt="image-20240619124238057"></p><p><a href="https://www.52pojie.cn/thread-326995-1-1.html">UPX防脱壳机脱壳、去除特征码、添加花指令小探 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p><a href="https://www.cnblogs.com/Clovershrub/p/17196774.html">UPX壳的修改 - Clovershrub - 博客园 (cnblogs.com)</a></p><p>里面有的upx标志位写的是FUK0和FUK1，分别修改为UPX0和UPX1，55 50 58 30，55 50 58 31</p><p><a href="https://blog.csdn.net/qq_21438461/article/details/125754216">【C&#x2F;C++ 跳转函数】setjmp 和 longjmp 函数的巧妙运用： C 语言错误处理实践-CSDN博客</a></p><p>j___intrinsic_setjmp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">setjmp：保存当前程序的执行状态，并返回一个标记，用于后续判断是第一次调用还是通过 longjmp 返回。<br>longjmp：将程序状态恢复到之前由 setjmp 所保存的状态，从而直接跳转到 setjmp 处继续执行。<br></code></pre></td></tr></table></figure><p>使用事例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">jmp_buf env;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> ret = ___intrinsic_setjmp(env, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// Normal execution path</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Setting jump point...\n&quot;</span>);<br>        <span class="hljs-built_in">some_function</span>(); <span class="hljs-comment">// Calls longjmp to env</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// After longjmp has jumped back here</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Returned from longjmp!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">some_function</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Jumping to setjmp point...\n&quot;</span>);<br>    <span class="hljs-built_in">longjmp</span>(env, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>exp:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cmp</span>=[<span class="hljs-number">0</span>x0000004B, <span class="hljs-number">0</span>x00000048, <span class="hljs-number">0</span>x00000079, <span class="hljs-number">0</span>x00000013, <span class="hljs-number">0</span>x00000045, <span class="hljs-number">0</span>x00000030, <span class="hljs-number">0</span>x0000005C, <span class="hljs-number">0</span>x00000049, <span class="hljs-number">0</span>x0000005A, <span class="hljs-number">0</span>x00000079, <span class="hljs-number">0</span>x00000013, <span class="hljs-number">0</span>x00000070, <span class="hljs-number">0</span>x0000006D, <span class="hljs-number">0</span>x00000078, <span class="hljs-number">0</span>x00000013, <span class="hljs-number">0</span>x0000006F, <span class="hljs-number">0</span>x00000048, <span class="hljs-number">0</span>x0000005D, <span class="hljs-number">0</span>x00000064, <span class="hljs-number">0</span>x00000064]<br><span class="hljs-attribute">key</span>=[<span class="hljs-number">0</span>]*<span class="hljs-number">20</span><br><span class="hljs-attribute">flag</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attribute">for</span> i in range (<span class="hljs-number">20</span>):<br>    <span class="hljs-attribute">key</span>[i]=(cmp[i]^<span class="hljs-number">0</span>x50)-<span class="hljs-number">10</span><br>    <span class="hljs-attribute">key</span>[i]^=<span class="hljs-number">0</span>x66<br>    <span class="hljs-attribute">flag</span>+=chr(key[i])<br><span class="hljs-attribute">print</span>(flag)<br></code></pre></td></tr></table></figure><p>[2022网鼎杯青龙组部分wp–re两题（challenge，Fakeshell）_<a href="https://blog.csdn.net/weixin_51681694/article/details/126883101">2022网鼎杯青龙组]fakeshell题目下载-CSDN博客</a></p><p><a href="https://mykonos-x.github.io/2023/09/28/%E7%BD%91%E9%BC%8E%E6%9D%AF2022-%E9%9D%92%E9%BE%99%E7%BB%84-Fakeshell/">网鼎杯2022 青龙组 Fakeshell | Fight for the good in your heart. (mykonos-x.github.io)</a></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202406191525559.png" alt="image-20240619152538434"></p><h1 id="网鼎杯-2022-青龙组-Handmake"><a href="#网鼎杯-2022-青龙组-Handmake" class="headerlink" title="[网鼎杯 2022 青龙组]Handmake"></a>[网鼎杯 2022 青龙组]Handmake</h1><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202406191730619.png" alt="image-20240619173005574"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">jjxXf</span>=[<span class="hljs-number">37</span>, <span class="hljs-number">73</span>, <span class="hljs-number">151</span>, <span class="hljs-number">135</span>, <span class="hljs-number">65</span>, <span class="hljs-number">58</span>, <span class="hljs-number">241</span>, <span class="hljs-number">90</span>, <span class="hljs-number">33</span>, <span class="hljs-number">86</span>, <span class="hljs-number">71</span>, <span class="hljs-number">41</span>, <span class="hljs-number">102</span>, <span class="hljs-number">241</span>, <span class="hljs-number">213</span>, <span class="hljs-number">234</span>, <span class="hljs-number">67</span>, <span class="hljs-number">144</span>, <span class="hljs-number">139</span>, <span class="hljs-number">20</span>, <span class="hljs-number">112</span>, <span class="hljs-number">150</span>, <span class="hljs-number">41</span>, <span class="hljs-number">7</span>, <span class="hljs-number">158</span>, <span class="hljs-number">251</span>, <span class="hljs-number">167</span>, <span class="hljs-number">249</span>, <span class="hljs-number">24</span>, <span class="hljs-number">129</span>, <span class="hljs-number">72</span>, <span class="hljs-number">64</span>, <span class="hljs-number">83</span>, <span class="hljs-number">142</span>, <span class="hljs-number">166</span>, <span class="hljs-number">236</span>, <span class="hljs-number">67</span>, <span class="hljs-number">18</span>, <span class="hljs-number">211</span>, <span class="hljs-number">100</span>, <span class="hljs-number">91</span>, <span class="hljs-number">38</span>, <span class="hljs-number">83</span>, <span class="hljs-number">147</span>, <span class="hljs-number">40</span>, <span class="hljs-number">78</span>, <span class="hljs-number">239</span>, <span class="hljs-number">113</span>, <span class="hljs-number">232</span>, <span class="hljs-number">83</span>, <span class="hljs-number">227</span>, <span class="hljs-number">47</span>, <span class="hljs-number">192</span>, <span class="hljs-number">227</span>, <span class="hljs-number">70</span>, <span class="hljs-number">167</span>, <span class="hljs-number">201</span>, <span class="hljs-number">249</span>, <span class="hljs-number">156</span>, <span class="hljs-number">101</span>, <span class="hljs-number">216</span>, <span class="hljs-number">159</span>, <span class="hljs-number">116</span>, <span class="hljs-number">210</span>, <span class="hljs-number">152</span>, <span class="hljs-number">234</span>, <span class="hljs-number">38</span>, <span class="hljs-number">145</span>, <span class="hljs-number">198</span>, <span class="hljs-number">58</span>, <span class="hljs-number">24</span>, <span class="hljs-number">183</span>, <span class="hljs-number">72</span>, <span class="hljs-number">143</span>, <span class="hljs-number">136</span>, <span class="hljs-number">234</span>, <span class="hljs-number">246</span>]<br><span class="hljs-attribute">KdlaH</span>=[<span class="hljs-number">191</span>, <span class="hljs-number">140</span>, <span class="hljs-number">114</span>, <span class="hljs-number">245</span>, <span class="hljs-number">142</span>, <span class="hljs-number">55</span>, <span class="hljs-number">190</span>, <span class="hljs-number">30</span>, <span class="hljs-number">161</span>, <span class="hljs-number">18</span>, <span class="hljs-number">200</span>, <span class="hljs-number">7</span>, <span class="hljs-number">21</span>, <span class="hljs-number">59</span>, <span class="hljs-number">17</span>, <span class="hljs-number">44</span>, <span class="hljs-number">34</span>, <span class="hljs-number">181</span>, <span class="hljs-number">109</span>, <span class="hljs-number">116</span>, <span class="hljs-number">146</span>, <span class="hljs-number">145</span>, <span class="hljs-number">189</span>, <span class="hljs-number">68</span>, <span class="hljs-number">142</span>, <span class="hljs-number">113</span>, <span class="hljs-number">0</span>, <span class="hljs-number">33</span>, <span class="hljs-number">46</span>, <span class="hljs-number">184</span>, <span class="hljs-number">21</span>, <span class="hljs-number">33</span>, <span class="hljs-number">66</span>, <span class="hljs-number">99</span>, <span class="hljs-number">124</span>, <span class="hljs-number">167</span>, <span class="hljs-number">201</span>, <span class="hljs-number">88</span>, <span class="hljs-number">133</span>, <span class="hljs-number">20</span>, <span class="hljs-number">211</span>, <span class="hljs-number">67</span>, <span class="hljs-number">133</span>, <span class="hljs-number">250</span>, <span class="hljs-number">62</span>, <span class="hljs-number">28</span>, <span class="hljs-number">138</span>, <span class="hljs-number">229</span>, <span class="hljs-number">105</span>, <span class="hljs-number">102</span>, <span class="hljs-number">125</span>, <span class="hljs-number">124</span>, <span class="hljs-number">208</span>, <span class="hljs-number">180</span>, <span class="hljs-number">50</span>, <span class="hljs-number">146</span>, <span class="hljs-number">67</span>, <span class="hljs-number">39</span>, <span class="hljs-number">55</span>, <span class="hljs-number">240</span>, <span class="hljs-number">239</span>, <span class="hljs-number">203</span>, <span class="hljs-number">230</span>, <span class="hljs-number">142</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90</span>, <span class="hljs-number">205</span>, <span class="hljs-number">27</span>, <span class="hljs-number">128</span>, <span class="hljs-number">136</span>, <span class="hljs-number">151</span>, <span class="hljs-number">140</span>, <span class="hljs-number">222</span>, <span class="hljs-number">92</span>, <span class="hljs-number">152</span>, <span class="hljs-number">1</span>, <span class="hljs-number">222</span>, <span class="hljs-number">138</span>, <span class="hljs-number">254</span>, <span class="hljs-number">246</span>, <span class="hljs-number">223</span>, <span class="hljs-number">224</span>, <span class="hljs-number">236</span>, <span class="hljs-number">33</span>, <span class="hljs-number">60</span>, <span class="hljs-number">170</span>, <span class="hljs-number">189</span>, <span class="hljs-number">77</span>, <span class="hljs-number">124</span>, <span class="hljs-number">72</span>, <span class="hljs-number">135</span>, <span class="hljs-number">46</span>, <span class="hljs-number">235</span>, <span class="hljs-number">17</span>, <span class="hljs-number">32</span>, <span class="hljs-number">28</span>, <span class="hljs-number">245</span>]<br><span class="hljs-attribute">spVwk</span>=[<span class="hljs-number">108</span>, <span class="hljs-number">39</span>, <span class="hljs-number">231</span>, <span class="hljs-number">242</span>, <span class="hljs-number">53</span>, <span class="hljs-number">26</span>, <span class="hljs-number">133</span>, <span class="hljs-number">50</span>, <span class="hljs-number">68</span>, <span class="hljs-number">118</span>, <span class="hljs-number">33</span>, <span class="hljs-number">64</span>, <span class="hljs-number">20</span>, <span class="hljs-number">130</span>, <span class="hljs-number">161</span>, <span class="hljs-number">202</span>, <span class="hljs-number">37</span>, <span class="hljs-number">229</span>, <span class="hljs-number">229</span>, <span class="hljs-number">119</span>, <span class="hljs-number">4</span>, <span class="hljs-number">255</span>, <span class="hljs-number">70</span>, <span class="hljs-number">105</span>, <span class="hljs-number">178</span>, <span class="hljs-number">219</span>, <span class="hljs-number">208</span>, <span class="hljs-number">145</span>, <span class="hljs-number">113</span>, <span class="hljs-number">226</span>, <span class="hljs-number">32</span>, <span class="hljs-number">96</span>, <span class="hljs-number">59</span>, <span class="hljs-number">239</span>, <span class="hljs-number">213</span>, <span class="hljs-number">204</span>, <span class="hljs-number">117</span>, <span class="hljs-number">50</span>, <span class="hljs-number">163</span>, <span class="hljs-number">5</span>, <span class="hljs-number">41</span>, <span class="hljs-number">71</span>, <span class="hljs-number">62</span>, <span class="hljs-number">246</span>, <span class="hljs-number">92</span>, <span class="hljs-number">43</span>, <span class="hljs-number">157</span>, <span class="hljs-number">2</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>, <span class="hljs-number">141</span>, <span class="hljs-number">75</span>, <span class="hljs-number">224</span>, <span class="hljs-number">151</span>, <span class="hljs-number">46</span>, <span class="hljs-number">194</span>, <span class="hljs-number">233</span>, <span class="hljs-number">141</span>, <span class="hljs-number">244</span>, <span class="hljs-number">12</span>, <span class="hljs-number">170</span>, <span class="hljs-number">251</span>, <span class="hljs-number">84</span>, <span class="hljs-number">188</span>, <span class="hljs-number">249</span>, <span class="hljs-number">135</span>, <span class="hljs-number">67</span>, <span class="hljs-number">245</span>, <span class="hljs-number">230</span>, <span class="hljs-number">93</span>, <span class="hljs-number">84</span>, <span class="hljs-number">254</span>, <span class="hljs-number">32</span>, <span class="hljs-number">221</span>, <span class="hljs-number">178</span>, <span class="hljs-number">202</span>, <span class="hljs-number">252</span>]<br><span class="hljs-attribute">out1</span>=[<span class="hljs-number">0</span>]*<span class="hljs-number">78</span><br><span class="hljs-attribute">out2</span>=[<span class="hljs-number">0</span>]*<span class="hljs-number">98</span><br><span class="hljs-attribute">input1</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attribute">input2</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attribute">for</span> i in range(len(jjxXf)):<br>    <span class="hljs-attribute">out1</span>[i] = spVwk[i] ^ jjxXf[i]<br>    <span class="hljs-attribute">input1</span>+=chr(out1[i])<br><span class="hljs-attribute">print</span>(input1)<br><span class="hljs-attribute">jutvH</span>=[<span class="hljs-number">246</span>, <span class="hljs-number">226</span>, <span class="hljs-number">2</span>, <span class="hljs-number">128</span>, <span class="hljs-number">250</span>, <span class="hljs-number">23</span>, <span class="hljs-number">202</span>, <span class="hljs-number">118</span>, <span class="hljs-number">196</span>, <span class="hljs-number">50</span>, <span class="hljs-number">187</span>, <span class="hljs-number">98</span>, <span class="hljs-number">118</span>, <span class="hljs-number">84</span>, <span class="hljs-number">127</span>, <span class="hljs-number">72</span>, <span class="hljs-number">2</span>, <span class="hljs-number">211</span>, <span class="hljs-number">24</span>, <span class="hljs-number">26</span>, <span class="hljs-number">241</span>, <span class="hljs-number">229</span>, <span class="hljs-number">212</span>, <span class="hljs-number">43</span>, <span class="hljs-number">224</span>, <span class="hljs-number">93</span>, <span class="hljs-number">32</span>, <span class="hljs-number">86</span>, <span class="hljs-number">70</span>, <span class="hljs-number">209</span>, <span class="hljs-number">118</span>, <span class="hljs-number">73</span>, <span class="hljs-number">98</span>, <span class="hljs-number">11</span>, <span class="hljs-number">29</span>, <span class="hljs-number">212</span>, <span class="hljs-number">233</span>, <span class="hljs-number">107</span>, <span class="hljs-number">165</span>, <span class="hljs-number">119</span>, <span class="hljs-number">178</span>, <span class="hljs-number">47</span>, <span class="hljs-number">233</span>, <span class="hljs-number">159</span>, <span class="hljs-number">76</span>, <span class="hljs-number">111</span>, <span class="hljs-number">170</span>, <span class="hljs-number">132</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">93</span>, <span class="hljs-number">21</span>, <span class="hljs-number">190</span>, <span class="hljs-number">194</span>, <span class="hljs-number">93</span>, <span class="hljs-number">249</span>, <span class="hljs-number">38</span>, <span class="hljs-number">84</span>, <span class="hljs-number">23</span>, <span class="hljs-number">132</span>, <span class="hljs-number">135</span>, <span class="hljs-number">174</span>, <span class="hljs-number">198</span>, <span class="hljs-number">232</span>, <span class="hljs-number">97</span>, <span class="hljs-number">52</span>, <span class="hljs-number">174</span>, <span class="hljs-number">111</span>, <span class="hljs-number">233</span>, <span class="hljs-number">231</span>, <span class="hljs-number">249</span>, <span class="hljs-number">172</span>, <span class="hljs-number">176</span>, <span class="hljs-number">61</span>, <span class="hljs-number">245</span>, <span class="hljs-number">100</span>, <span class="hljs-number">186</span>, <span class="hljs-number">170</span>, <span class="hljs-number">157</span>, <span class="hljs-number">190</span>, <span class="hljs-number">133</span>, <span class="hljs-number">150</span>, <span class="hljs-number">217</span>, <span class="hljs-number">78</span>, <span class="hljs-number">76</span>, <span class="hljs-number">146</span>, <span class="hljs-number">207</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">36</span>, <span class="hljs-number">198</span>, <span class="hljs-number">69</span>, <span class="hljs-number">137</span>, <span class="hljs-number">39</span>, <span class="hljs-number">26</span>, <span class="hljs-number">60</span>, <span class="hljs-number">255</span>]<br><span class="hljs-attribute">for</span> i in range (<span class="hljs-number">96</span>):<br>    <span class="hljs-attribute">out2</span>[i] = jutvH[i] ^ KdlaH[i]<br>    <span class="hljs-attribute">input2</span>+=chr(out2[i])<br><span class="hljs-attribute">print</span>(input2)<br><br></code></pre></td></tr></table></figure><p>得到提示</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Input <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> <span class="hljs-function"><span class="hljs-keyword">function</span>, <span class="hljs-title">which</span> <span class="hljs-title">has</span> <span class="hljs-title">6</span> <span class="hljs-title">parameters</span> <span class="hljs-title">and</span> <span class="hljs-title">the</span> <span class="hljs-title">third</span> <span class="hljs-title">named</span> <span class="hljs-variable">gLIhR</span>: </span><br>输入第一个函数，该函数有<span class="hljs-number">6</span>个参数，第三个参数名为 <span class="hljs-variable">gLIhR</span><br>Input <span class="hljs-keyword">the</span> <span class="hljs-keyword">second</span> <span class="hljs-function"><span class="hljs-keyword">function</span>, <span class="hljs-title">which</span> <span class="hljs-title">has</span> <span class="hljs-title">3</span> <span class="hljs-title">callers</span> <span class="hljs-title">and</span> <span class="hljs-title">invokes</span> <span class="hljs-title">the</span> <span class="hljs-title">function</span> <span class="hljs-title">named</span> <span class="hljs-title">cHZv5op8rOmlAkb6</span>: </span><br>输入第二个函数，该函数有<span class="hljs-number">3</span>个调用者，并调用名为 cHZv5op8rOmlAkb6 的函数<br><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202406191747909.png" alt="image-20240619174701813"></p><p>针对提示要找的第一个函数有6个参数第三个参数是“gLIhR”，可以使用正则表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">func \w+\(\w+\s+\[\]\w+,\s+\w+\s+\w+,\s+gLIhR\s+\w+,\s+\w+\s+\w+,\s+\w+\s+\w+,\s+\w+\s+\w+\)<br></code></pre></td></tr></table></figure><p><code>\w</code>代表一个单词字符，匹配以下字符：</p><ul><li>所有大小写字母(A-Z,a-z)</li><li>所有数字(0-9)</li><li>下划线(_)</li></ul><p><code>\s</code>代表空白字符，匹配以下字符：</p><ul><li>空格</li><li>制表符</li><li>换行符</li><li>回车符</li><li>垂直制表符</li><li>换页符</li></ul><p>参考：<a href="https://mykonos-x.github.io/2023/09/25/%E7%BD%91%E9%BC%8E%E6%9D%AF2022-%E9%9D%92%E9%BE%99%E7%BB%84-Handmake/">网鼎杯2022 青龙组 Handmake | Fight for the good in your heart. (mykonos-x.github.io)</a></p><p>第一个函数：ZlXDJkH3OZN4Mayd</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ZlXDJkH3OZN4Mayd</span><span class="hljs-params">(swlvV []<span class="hljs-type">byte</span>, S5aOL <span class="hljs-type">string</span>, gLIhR <span class="hljs-type">string</span>, QIErK <span class="hljs-type">string</span>, mxqoA <span class="hljs-type">string</span>, hTBet <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    eBS9X := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">20</span>)<br>    WX5YT := [<span class="hljs-number">16</span>]<span class="hljs-type">byte</span>&#123;<br>        <span class="hljs-number">169</span>, <span class="hljs-number">43</span>, <span class="hljs-number">100</span>, <span class="hljs-number">115</span>, <span class="hljs-number">202</span>, <span class="hljs-number">185</span>, <span class="hljs-number">130</span>, <span class="hljs-number">174</span>, <span class="hljs-number">238</span>, <span class="hljs-number">233</span>, <span class="hljs-number">147</span>, <span class="hljs-number">43</span>, <span class="hljs-number">149</span>, <span class="hljs-number">7</span>, <span class="hljs-number">229</span>, <span class="hljs-number">119</span>&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++ &#123;<br>        eBS9X[i] += WX5YT[i] ^ swlvV[i]<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(eBS9X)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">YrXQd = bytes<span class="hljs-selector-class">.hex</span>(<span class="hljs-string">&#x27;ZlXDJkH3OZN4Mayd&#x27;</span><span class="hljs-selector-class">.encode</span>())<br>flag1 = YrXQd<span class="hljs-selector-attr">[22]</span> + YrXQd<span class="hljs-selector-attr">[19]</span> + YrXQd<span class="hljs-selector-attr">[20]</span> + YrXQd<span class="hljs-selector-attr">[21]</span> + YrXQd<span class="hljs-selector-attr">[28]</span> + YrXQd<span class="hljs-selector-attr">[10]</span> + YrXQd<span class="hljs-selector-attr">[20]</span> + YrXQd<span class="hljs-selector-attr">[7]</span> + YrXQd<span class="hljs-selector-attr">[29]</span> + YrXQd<span class="hljs-selector-attr">[14]</span> + YrXQd<span class="hljs-selector-attr">[0]</span> + YrXQd<span class="hljs-selector-attr">[18]</span> + YrXQd<span class="hljs-selector-attr">[3]</span> + YrXQd<span class="hljs-selector-attr">[24]</span> + YrXQd<span class="hljs-selector-attr">[27]</span> + YrXQd<span class="hljs-selector-attr">[31]</span><br> <br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag1)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag1</span>:<span class="hljs-number">3</span>a4e76449355c414<br></code></pre></td></tr></table></figure><p>第二个函数：UhnCm82SDGE0zLYO</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UhnCm82SDGE0zLYO</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br>    SythK := []<span class="hljs-type">byte</span>&#123;<br>        <span class="hljs-number">159</span>, <span class="hljs-number">141</span>, <span class="hljs-number">72</span>, <span class="hljs-number">106</span>, <span class="hljs-number">196</span>, <span class="hljs-number">62</span>, <span class="hljs-number">16</span>, <span class="hljs-number">205</span>, <span class="hljs-number">170</span>, <span class="hljs-number">159</span>, <span class="hljs-number">36</span>, <span class="hljs-number">232</span>, <span class="hljs-number">125</span>, <span class="hljs-number">239</span>, <span class="hljs-number">208</span>, <span class="hljs-number">3</span>&#125;<br>    <span class="hljs-keyword">var</span> Vw2mJ, Nij87, zVclR <span class="hljs-type">string</span><br>    <span class="hljs-keyword">return</span> cHZv5op8rOmlAkb6(SythK, Vw2mJ, Nij87, zVclR)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cHZv5op8rOmlAkb6</span><span class="hljs-params">(HIGXt []<span class="hljs-type">byte</span>, VGvny <span class="hljs-type">string</span>, ZOkKV <span class="hljs-type">string</span>, eU0uD <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    QTk4l := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">20</span>)<br>    Ek08m := [<span class="hljs-number">16</span>]<span class="hljs-type">byte</span>&#123;<br>        <span class="hljs-number">167</span>, <span class="hljs-number">238</span>, <span class="hljs-number">45</span>, <span class="hljs-number">89</span>, <span class="hljs-number">160</span>, <span class="hljs-number">95</span>, <span class="hljs-number">34</span>, <span class="hljs-number">175</span>, <span class="hljs-number">158</span>, <span class="hljs-number">169</span>, <span class="hljs-number">20</span>, <span class="hljs-number">217</span>, <span class="hljs-number">68</span>, <span class="hljs-number">137</span>, <span class="hljs-number">231</span>, <span class="hljs-number">54</span>&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++ &#123;<br>        QTk4l[i] += Ek08m[i] ^ HIGXt[i]<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(QTk4l)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后异或得到结果</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">Ek08m</span> = [<span class="hljs-number">167</span>, <span class="hljs-number">238</span>, <span class="hljs-number">45</span>, <span class="hljs-number">89</span>, <span class="hljs-number">160</span>, <span class="hljs-number">95</span>, <span class="hljs-number">34</span>, <span class="hljs-number">175</span>, <span class="hljs-number">158</span>, <span class="hljs-number">169</span>, <span class="hljs-number">20</span>, <span class="hljs-number">217</span>, <span class="hljs-number">68</span>, <span class="hljs-number">137</span>, <span class="hljs-number">231</span>, <span class="hljs-number">54</span>]<br><span class="hljs-symbol">Sythk</span> = [<span class="hljs-number">159</span>, <span class="hljs-number">141</span>, <span class="hljs-number">72</span>, <span class="hljs-number">106</span>, <span class="hljs-number">196</span>, <span class="hljs-number">62</span>, <span class="hljs-number">16</span>, <span class="hljs-number">205</span>, <span class="hljs-number">170</span>, <span class="hljs-number">159</span>, <span class="hljs-number">36</span>, <span class="hljs-number">232</span>, <span class="hljs-number">125</span>, <span class="hljs-number">239</span>, <span class="hljs-number">208</span>, <span class="hljs-number">3</span>]<br>ans = []<br>for i in range(len(<span class="hljs-symbol">Ek08m</span>)):<br>    ans.append(<span class="hljs-symbol">Ek08m</span>[i] ^ <span class="hljs-symbol">Sythk</span>[i])<br>for i in ans:<br>    print(chr(i), end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">flag2:8ce3da2b46019f75<br></code></pre></td></tr></table></figure><p> flag{3a4e76449355c4148ce3da2b46019f75}</p><p>网上查看别人的wp发现其实可以通过直接对go文件进行编译，或者直接运行，就可以在终端直接获得上述提示输出，然后直接找到对应的函数进行输入就可以得到正确的flag</p><p>（这里要注意一个细节，源码里面的scanf中间没有fmt.Scanln()，如果直接输入第一个函数回车然后输入第二个函数的时候会把回车当成第二个输入然后直接退出程序运行）</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202406192103400.png" alt="image-20240619210359330"></p>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓简单密码</title>
    <link href="/2024/05/29/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    <url>/2024/05/29/%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓简单密码"><a href="#安卓简单密码" class="headerlink" title="安卓简单密码"></a>安卓简单密码</h1><h2 id="消息摘要算法（单向散列函数）"><a href="#消息摘要算法（单向散列函数）" class="headerlink" title="消息摘要算法（单向散列函数）"></a>消息摘要算法（单向散列函数）</h2><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>不管明文多长散列后密文定长</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xiaojianbang.app;<br><br><span class="hljs-keyword">import</span> java.security.MessageDigest;<span class="hljs-comment">//MessageDigest消息摘要</span><br><br><span class="hljs-comment">/* loaded from: classes.dex */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">md5_1</span><span class="hljs-params">(String args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>, <span class="hljs-string">&quot;BC&quot;</span>);<span class="hljs-comment">//可以直接理解为得到了一个MD5对象</span><br>        md.update(args.getBytes());<span class="hljs-comment">//获取输入数据</span><br>        <span class="hljs-keyword">return</span> Utils.byteToHexString(md.digest());<span class="hljs-comment">//将刚刚放到摘要里面的数据转变成字符串拿出来</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">md5_1</span><span class="hljs-params">(String args, <span class="hljs-type">boolean</span> bool)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>, <span class="hljs-string">&quot;BC&quot;</span>);<br>        md.update(args.getBytes(), <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">return</span> Utils.byteToHexString(md.digest(<span class="hljs-string">&quot;xiaojianbang&quot;</span>.getBytes()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MD5本质来说是16个字节，我们平时看到的一般是32位的原因是把这16个字节进行了HEX的编码，两个十六进制数代表一个字节</p><p>32个十六进制数</p><p>update是可以被调用多次的</p><h2 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xiaojianbang.app;<br><br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><br><span class="hljs-comment">/* loaded from: classes.dex */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SHA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">sha_1</span><span class="hljs-params">(String args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;SHA-1&quot;</span>, <span class="hljs-string">&quot;BC&quot;</span>);<br>        md.update(args.getBytes());<br>        <span class="hljs-keyword">return</span> Utils.byteToHexString(md.digest());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">sha_2</span><span class="hljs-params">(String args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;SHA-1&quot;</span>, <span class="hljs-string">&quot;BC&quot;</span>);<br>        md.update(args.getBytes(), <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">return</span> Utils.byteToHexString(md.digest(<span class="hljs-string">&quot;xiaojianbang&quot;</span>.getBytes()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相对于MD5来说没有什么区别</p><h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> com.<span class="hljs-property">xiaojianbang</span>.<span class="hljs-property">app</span>;<br><br><span class="hljs-keyword">import</span> javax.<span class="hljs-property">crypto</span>.<span class="hljs-property">Mac</span>;<br><span class="hljs-keyword">import</span> javax.<span class="hljs-property">crypto</span>.<span class="hljs-property">SecretKey</span>;<br><span class="hljs-keyword">import</span> javax.<span class="hljs-property">crypto</span>.<span class="hljs-property">spec</span>.<span class="hljs-property">SecretKeySpec</span>;<br><br><span class="hljs-comment">/* loaded from: classes.dex */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MAC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-title function_">mac_1</span>(<span class="hljs-built_in">String</span> args) <span class="hljs-keyword">throws</span> Exception &#123;<br>        SecretKey <span class="hljs-built_in">key</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">SecretKeySpec</span>(<span class="hljs-string">&quot;87654321&quot;</span>.<span class="hljs-property">getBytes</span>(), <span class="hljs-string">&quot;HmacSHA1&quot;</span>);<span class="hljs-comment">//密钥  算法名</span><br>        Mac mac = Mac.<span class="hljs-property">getInstance</span>(<span class="hljs-string">&quot;HmacSHA1&quot;</span>);<br>        mac.<span class="hljs-property">init</span>(<span class="hljs-built_in">key</span>);<span class="hljs-comment">//初始化密钥</span><br>        mac.<span class="hljs-property">update</span>(args.<span class="hljs-property">getBytes</span>());<span class="hljs-comment">//加入明文</span><br>        <span class="hljs-keyword">return</span> Utils.<span class="hljs-property">byteToHexString</span>(mac.<span class="hljs-property">doFinal</span>());<span class="hljs-comment">//计算结果</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-title function_">mac_2</span>(<span class="hljs-built_in">String</span> args) <span class="hljs-keyword">throws</span> Exception &#123;<br>        SecretKey <span class="hljs-built_in">key</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">SecretKeySpec</span>(<span class="hljs-string">&quot;87654321&quot;</span>.<span class="hljs-property">getBytes</span>(), <span class="hljs-string">&quot;HmacSHA1&quot;</span>);<br>        Mac mac = Mac.<span class="hljs-property">getInstance</span>(<span class="hljs-string">&quot;HmacSHA1&quot;</span>);<br>        mac.<span class="hljs-property">init</span>(<span class="hljs-built_in">key</span>);<br>        mac.<span class="hljs-property">update</span>(args.<span class="hljs-property">getBytes</span>(), <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">return</span> Utils.<span class="hljs-property">byteToHexString</span>(mac.<span class="hljs-property">doFinal</span>(<span class="hljs-string">&quot;xiaojianbang&quot;</span>.<span class="hljs-property">getBytes</span>()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SecretKeySpec一般用来实例化一个密钥</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xiaojianbang.app;<br><br><span class="hljs-keyword">import</span> android.util.Base64;<br><span class="hljs-keyword">import</span> java.security.spec.AlgorithmParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.SecretKey;<br><span class="hljs-keyword">import</span> javax.crypto.SecretKeyFactory;<br><span class="hljs-keyword">import</span> javax.crypto.spec.DESKeySpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><br><span class="hljs-comment">/* loaded from: classes.dex */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DES</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">des_1</span><span class="hljs-params">(String args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> SecretKeyFactory.getInstance(<span class="hljs-string">&quot;DES&quot;</span>).generateSecret(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DESKeySpec</span>(<span class="hljs-string">&quot;12345678&quot;</span>.getBytes()));<span class="hljs-comment">//密钥</span><br>        <span class="hljs-type">AlgorithmParameterSpec</span> <span class="hljs-variable">iv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(<span class="hljs-string">&quot;87654321&quot;</span>.getBytes());<span class="hljs-comment">//iv</span><br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;DES/CBC/PKCS5Padding&quot;</span>);<br>        cipher.init(<span class="hljs-number">1</span>, secretKey, iv);<br>        cipher.update(args.getBytes());<span class="hljs-comment">//明文获取</span><br>        <span class="hljs-keyword">return</span> Base64.encodeToString(cipher.doFinal(), <span class="hljs-number">0</span>);<span class="hljs-comment">//结果获取</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">des_2</span><span class="hljs-params">(String args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> SecretKeyFactory.getInstance(<span class="hljs-string">&quot;DES&quot;</span>).generateSecret(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DESKeySpec</span>(<span class="hljs-string">&quot;12345678&quot;</span>.getBytes()));<br>        <span class="hljs-type">AlgorithmParameterSpec</span> <span class="hljs-variable">iv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(<span class="hljs-string">&quot;87654321&quot;</span>.getBytes());<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;DES/CBC/PKCS5Padding&quot;</span>);<span class="hljs-comment">//如果这个地方模式不是CBC而是ECB的话，就不需要iv了</span><br>        cipher.init(<span class="hljs-number">1</span>, secretKey, iv);<br>        <span class="hljs-keyword">return</span> Base64.encodeToString(cipher.doFinal(args.getBytes()), <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>DES密钥固定8个字节，大于8字节舍弃</p><p>DESKeySpec重要的类，其实底层还是调用的SecretKeySpec</p><p>RSA，AES,DES，3DES都是用这个cipher类去加密的</p><h2 id="DESede"><a href="#DESede" class="headerlink" title="DESede"></a>DESede</h2><p>和DES没什么区别就是长度为24的密钥（3倍）</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.xiaojianbang.app;<br><br><span class="hljs-keyword">import</span> android.util.Base64;<br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.SecretKey;<br><span class="hljs-keyword">import</span> javax.crypto.SecretKeyFactory;<br><span class="hljs-keyword">import</span> javax.crypto.spec.DESedeKeySpec;<br><br><span class="hljs-comment">/* loaded from: classes.dex */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">DESede</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> desede(<span class="hljs-keyword">String</span> args) throws Exception &#123;<br>        SecretKey secretKey = SecretKeyFactory.getInstance(<span class="hljs-string">&quot;DESede&quot;</span>).generateSecret(<span class="hljs-keyword">new</span> <span class="hljs-type">DESedeKeySpec</span>(<span class="hljs-string">&quot;123456781234567812345678&quot;</span>.getBytes()));<br>        Cipher cipher = Cipher.getInstance(<span class="hljs-string">&quot;DESede/ECB/PKCS5Padding&quot;</span>);<br>        cipher.init(<span class="hljs-number">1</span>, secretKey);<br>        cipher.update(args.getBytes());<br>        <span class="hljs-keyword">return</span> Base64.encodeToString(cipher.doFinal(<span class="hljs-string">&quot;xiaojianbang&quot;</span>.getBytes()), <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xiaojianbang.app;<br><br><span class="hljs-keyword">import</span> android.util.Base64;<br><span class="hljs-keyword">import</span> java.security.spec.AlgorithmParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><br><span class="hljs-comment">/* loaded from: classes.dex */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AES</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">aes</span><span class="hljs-params">(String args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(<span class="hljs-string">&quot;1234567890abcdef1234567890abcdef&quot;</span>.getBytes(), <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-type">AlgorithmParameterSpec</span> <span class="hljs-variable">iv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(<span class="hljs-string">&quot;1234567890abcdef&quot;</span>.getBytes());<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">aes</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>);<br>        aes.init(<span class="hljs-number">1</span>, key, iv);<br>        <span class="hljs-keyword">return</span> Base64.encodeToString(aes.doFinal(args.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>)), <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>非对称加密算法<br>RSA<br>1、使用公钥加密，使用私钥解密</p><p>2.公钥是公开的，私钥保密<br>3、加密处理安全，但是性能极差，单次加密长度有限制<br>pkcs1padding   明文最大字节数为密钥字节数-11 密文与密钥等长</p><p>NoPadding   明文最大字节数为密钥字节数     密文与密钥等长</p><p>4、RSA既可用于数据交换，也可用于数据校验<br>数据校验通常结合消息摘要算法MD5withRSA等<br>5、两种加密算法常见结合套路<br>随机生成密钥<br>密钥用于AES&#x2F;DES&#x2F;3DES加密数据</p><p>RSA对密钥加密<br>提交加密后的密钥和加密后的数据给服务器</p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xiaojianbang.app;<br><br><span class="hljs-keyword">import</span> android.util.Base64;<br><span class="hljs-keyword">import</span> java.security.KeyFactory;<br><span class="hljs-keyword">import</span> java.security.PrivateKey;<br><span class="hljs-keyword">import</span> java.security.PublicKey;<br><span class="hljs-keyword">import</span> java.security.Signature;<br><span class="hljs-keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;<br><span class="hljs-keyword">import</span> java.security.spec.X509EncodedKeySpec;<br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><br><span class="hljs-comment">/* loaded from: classes.dex */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RSA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">pubKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC9xhBZOWWF5Icw384mJksmaJ53RBLPUbEq5hXWW4Xgf82r6Zj24e3MWOnBTcblDodXYtSsaRJilosdTQVWGetJewebKmyqh1l1lUagS1/dbII9GsGat5zMboMHLWUO9NoBS9VDxqYL2VLppNEj/Xe39gBRHIiSnmtggiHuYsEv8wIDAQAB&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">priKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAJWFpHc6vuy5SXAdSXYvLfq5WZuhnf4eGi+iAOMuBET0JtpSiRLZ6oZpUV9vEBTEVOE0O5er98EP5J1SCmmZxmsjDgcww/gC0TaoklAf8rE9aZtcfsu/70KKw209g6W9Yn8YdGp/3HdMEqON4nYKO5XGU8ENfrf4RyKXYlH2SVVrAgMBAAECgYAJ0TeGOI42nsfKm7GqF9juAGN4y3jDKZjQjdN/FxNir6Epboffe/1hC+My3+jvZCCqlLJg+AKRY4jAJ5XVbypO3tHRd9uLFgCjzREJ09J6SWyNj3KFKCkJ4vpaO0jbUAAtFGlLElc6ZtHNKabeJ0ECOgcIvVsfHpP47j1GTRU8oQJBAMXsksEmrIvCJ0l5mdDX73nRJzbxDK6m7jndE4fBe0h3Wl06iBCfuaS2x+PTjmiRWvfFu2B1/9E9Tt0jc4FQS3ECQQDBZUKZjnv6rKtwqBj1EqjIXVF2SAsttW/6vTpg6mhHYITlrqQqrt1NJ5+6PRVQr1FLDxPArNVSdoz6MFIIAiibAkA+3K+Tt0PQM78koAGRijPePea1lYPQqOY67JN6Z6JPVtEVkTSMCx78SK1eF+BAKAJ7dYrYzUGN5Gn65HqYFLeRAkBcBOFWjSxCjwwX03PkkBdNFtHe9NKU0iLQ7F6tpHsvkyZI3vrv8DoOLw9aHxxYQsLscuUUJWhvD0du97TgaJ6HAkEAoRXjsQO2UmgQcddE2e6Uxp5riOuWIEEzoW6YssCW9BznCnwXy/xamrTKhoW2cIHwn6cFx+MFmyaK5T0xAtF5pw==&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PublicKey <span class="hljs-title function_">getPublicKey</span><span class="hljs-params">(String key)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] keyBytes = Base64.decode(key, <span class="hljs-number">0</span>);<span class="hljs-comment">//可以理解为去获取生成公钥的字节</span><br>        <span class="hljs-type">X509EncodedKeySpec</span> <span class="hljs-variable">keySpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">X509EncodedKeySpec</span>(keyBytes);<span class="hljs-comment">//RSA公钥解析的API X509EncodedKeySpec</span><br>        <span class="hljs-type">KeyFactory</span> <span class="hljs-variable">keyFactory</span> <span class="hljs-operator">=</span> KeyFactory.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<span class="hljs-comment">//指定类型为RSA</span><br>        <span class="hljs-type">PublicKey</span> <span class="hljs-variable">publicKey</span> <span class="hljs-operator">=</span> keyFactory.generatePublic(keySpec);<span class="hljs-comment">//最后调用keyFactory去生成公钥</span><br>        <span class="hljs-keyword">return</span> publicKey;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PrivateKey <span class="hljs-title function_">getPrivateKey</span><span class="hljs-params">(String key)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] keyBytes = Base64.decode(key, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">PKCS8EncodedKeySpec</span> <span class="hljs-variable">keySpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS8EncodedKeySpec</span>(keyBytes);<br>        <span class="hljs-type">KeyFactory</span> <span class="hljs-variable">keyFactory</span> <span class="hljs-operator">=</span> KeyFactory.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyFactory.generatePrivate(keySpec);<br>        <span class="hljs-keyword">return</span> privateKey;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">sign</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">priK</span> <span class="hljs-operator">=</span> getPrivateKey(priKey);<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">sig</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;SHA256withRSA&quot;</span>);<br>        sig.initSign(priK);<br>        sig.update(data.getBytes());<br>        <span class="hljs-keyword">return</span> Base64.encodeToString(sig.sign(), <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verify</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data, <span class="hljs-type">byte</span>[] sign)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">PublicKey</span> <span class="hljs-variable">pubK</span> <span class="hljs-operator">=</span> getPublicKey(pubKey);<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">sig</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;SHA256withRSA&quot;</span>);<br>        sig.initVerify(pubK);<br>        sig.update(data);<br>        <span class="hljs-keyword">return</span> sig.verify(sign);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] encrypt(<span class="hljs-type">byte</span>[] plaintext) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">PublicKey</span> <span class="hljs-variable">publicKey</span> <span class="hljs-operator">=</span> getPublicKey(pubKey);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;RSA/None/NoPadding&quot;</span>, <span class="hljs-string">&quot;BC&quot;</span>);<br>        cipher.init(<span class="hljs-number">1</span>, publicKey);<span class="hljs-comment">//初始化的时候括号里面第一个位置的数据是1或者2，1代表加密，2代表解密</span><br>        <span class="hljs-type">byte</span>[] bt_encrypted = cipher.doFinal(plaintext);<br>        <span class="hljs-keyword">return</span> bt_encrypted;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decrypt(<span class="hljs-type">byte</span>[] encrypted) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> getPrivateKey(priKey);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;RSA/None/PKCS1Padding&quot;</span>, <span class="hljs-string">&quot;BC&quot;</span>);<br>        cipher.init(<span class="hljs-number">2</span>, privateKey);<br>        <span class="hljs-type">byte</span>[] bt_original = cipher.doFinal(encrypted);<br>        <span class="hljs-keyword">return</span> bt_original;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">rsa</span><span class="hljs-params">(String args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] cipher = encrypt(<span class="hljs-string">&quot;xiaojianbang&quot;</span>.getBytes());<br>        <span class="hljs-keyword">return</span> Base64.encodeToString(cipher, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>PKCS填充的话会使得每一次加密数据都不一样</p><h2 id="RSA-HEX"><a href="#RSA-HEX" class="headerlink" title="RSA HEX"></a>RSA HEX</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xiaojianbang.app;<br><br><span class="hljs-keyword">import</span> android.util.Base64;<br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.security.KeyFactory;<br><span class="hljs-keyword">import</span> java.security.PublicKey;<br><span class="hljs-keyword">import</span> java.security.spec.RSAPublicKeySpec;<br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><br><span class="hljs-comment">/* loaded from: classes.dex */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RSAHex</span> &#123;<br><br>    <span class="hljs-comment">/* renamed from: N */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">f34N</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a32f7530324569c1d86dec45140c21ae0a6950d5331d22c591ab8c2834ecfbdf51682f494bbc07d17d7ff2b634fd13080954d9e145b6389ca3f23da22d52c1f70fdf716e56868cd7a49c3e8a13c30a18bdfd612d685efe8e36723e15d06446f0de4039a7cae690e96a23a3ba9193d80f1ad3afb1b70a76e2a927dba8fb63d6fb&quot;</span>;<br><br>    <span class="hljs-comment">/* renamed from: E */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">f33E</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;010001&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PublicKey <span class="hljs-title function_">createPublicKey</span><span class="hljs-params">(String stringN, String stringE)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(stringN, <span class="hljs-number">16</span>);<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">E</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(stringE, <span class="hljs-number">16</span>);<br>        <span class="hljs-type">RSAPublicKeySpec</span> <span class="hljs-variable">spec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RSAPublicKeySpec</span>(N, E);<br>        <span class="hljs-type">KeyFactory</span> <span class="hljs-variable">kf</span> <span class="hljs-operator">=</span> KeyFactory.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        <span class="hljs-keyword">return</span> kf.generatePublic(spec);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createPublicKey</span><span class="hljs-params">(String stringN)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(stringN);<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">E</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;65537&quot;</span>);<br>        <span class="hljs-type">RSAPublicKeySpec</span> <span class="hljs-variable">spec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RSAPublicKeySpec</span>(N, E);<br>        <span class="hljs-type">KeyFactory</span> <span class="hljs-variable">kf</span> <span class="hljs-operator">=</span> KeyFactory.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        <span class="hljs-keyword">return</span> Base64.encodeToString(kf.generatePublic(spec).getEncoded(), <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] encrypt(String message, PublicKey key) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        cipher.init(<span class="hljs-number">1</span>, key);<br>        <span class="hljs-type">byte</span>[] data = cipher.doFinal(message.getBytes());<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">rsaHex</span><span class="hljs-params">(String args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> Base64.encodeToString(encrypt(args, createPublicKey(f34N, f33E)), <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数字签名验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">sign</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">priK</span> <span class="hljs-operator">=</span> getPrivateKey(priKey);<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">sig</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;SHA256withRSA&quot;</span>);<br>        sig.initSign(priK);<br>        sig.update(data.getBytes());<br>        <span class="hljs-keyword">return</span> Base64.encodeToString(sig.sign(), <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verify</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data, <span class="hljs-type">byte</span>[] sign)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">PublicKey</span> <span class="hljs-variable">pubK</span> <span class="hljs-operator">=</span> getPublicKey(pubKey);<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">sig</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;SHA256withRSA&quot;</span>);<br>        sig.initVerify(pubK);<br>        sig.update(data);<br>        <span class="hljs-keyword">return</span> sig.verify(sign);<br>    &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN rustbaby</title>
    <link href="/2024/05/28/CISCN%20rustbaby/"/>
    <url>/2024/05/28/CISCN%20rustbaby/</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN-rustbaby"><a href="#CISCN-rustbaby" class="headerlink" title="CISCN rustbaby"></a>CISCN rustbaby</h1><p>其实早该写完但是忙学校考试去了然后感冒躺了两天就拖了几天……</p><p>当时自己做的时候看代码看的头痛太多了不知道怎么下手，网上看到说是rust语言exe的强混淆</p><p>后面看偶像视频讲解豁然开朗，记录一下尝试的过程</p><p>通过这个题目进行一个做rust题目的分析思路总结<a href="https://www.bilibili.com/video/BV1Zr421j7pr/?spm_id_from=333.1007.0.0&vd_source=d042b1d9be719e434eed8dd367183f6b">ciscn24-rust_baby 逆向速览_哔哩哔哩_bilibili</a></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280318105.png" alt="image-20240520181641812"></p><p>直接在字符串界面进行搜索</p><p>.rc搜索查看是否有调用一些奇怪的库等</p><p>针对这个题目来说都是rust的一些标准库，所以直接上</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280318493.png" alt="image-20240520183859908"></p><p>进行base64解码以后得到下面的信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;where&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;where is your flag?:&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;omg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;correct flag&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;nonono&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;nope, wrong flag&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>        <span class="hljs-string">&quot;henhenaaa!&quot;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],<br>        <span class="hljs-string">&quot;cryforhelp&quot;</span>:<span class="hljs-string">&quot;igdydo19TVE13ogW1AT5DgjPzHwPDQle1X7kS8TzHK8S5KCu9mnJ0uCnAQ4aV3CSYUl6QycpibWSLmqm2y/GqW6PNJBZ/C2RZuu+DfQFCxvLGHT5goG8BNl1ji2XB3x9GMg9T8Clatc=&quot;</span>,<br>        <span class="hljs-string">&quot;whatadoor&quot;</span>:<span class="hljs-string">&quot;1145141919810WTF&quot;</span><br>&#125;<br>        <br></code></pre></td></tr></table></figure><p>思路：根据标准数据输入流找到调试位置</p><p>策略：乱打断点，找到输入数据看在哪里</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280318373.png" alt="image-20240527143831864"></p><p>最开始直接运行程序发现有where is flag字符串提示，但是IDA打开后并没有找到，所以先通过下断点调试来找到输入</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280318391.png" alt="image-20240527204625689"></p><p>找到输入，即为v21，然后在下一条的代码中对v165进行加密，函数sub_1400028C3不好判断在干嘛，可以直接当作黑盒进行分析</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs smali">_int64 __fastcall sub_1400028C3(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)<br>&#123;<br>  __int64 *v3; // rax<br>  __int64 i; // rcx<br>  __int64 *v5; // rax<br>  __int64 j; // rcx<br>  __int64 v7; // rax<br>  char v8; // cl<br>  char v9; // r9<br>  __int64 v11; // [rsp+0h] [rbp-20h] BYREF<br>  __int64 v12[2]; // [rsp+8h] [rbp-18h]<br>  __int64 v13; // [rsp+18h] [rbp-8h]<br>  void *retaddr; // [rsp+20h] [rbp+0h]<br><br>  v12[0] = a1;<br>  v3 = &amp;v11;<br>  v11 = 0i64;<br>  for ( i = 0i64; i != 64; i += 8i64 )<br>  &#123;<br>    *(_BYTE *)v3 = a2 &gt;&gt; i;<br>    v3 = (__int64 *)((char *)v3 + 1);<br>  &#125;<br>  v5 = &amp;v11;<br>  v12[1] = v11;<br>  v11 = 0i64;<br>  for ( j = 0i64; j != 64; j += 8i64 )<br>  &#123;<br>    *(_BYTE *)v5 = a3 &gt;&gt; j;<br>    v5 = (__int64 *)((char *)v5 + 1);<br>  &#125;<br>  v13 = v11;<br>  v11 = 0i64;<br>  v7 = -4i64;<br>  do<br>  &#123;<br>    v8 = *((_BYTE *)&amp;v13 + 2 * v7 + 1);<br>    v9 = (*((_BYTE *)&amp;v13 + 2 * v7) ^ *((_BYTE *)&amp;retaddr + 2 * v7) | v8 ^ *((_BYTE *)&amp;retaddr + 2 * v7 + 1)) &amp; 1;<br>    *((_BYTE *)v12 + 2 * v7) = v7 + *((_BYTE *)v12 + (*((_BYTE *)&amp;v13 + 2 * v7) &amp; 7)) - v9 + 4;<br>    *((_BYTE *)v12 + 2 * v7 + 1) = v7 + *((_BYTE *)v12 + (v8 &amp; 7)) - v9 + 4;<br>    ++v7;<br>  &#125;<br>  while ( v7 );<br> <span class="hljs-built_in"> return </span>v11;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后调试得到结果</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">11111111</span>---&gt; <span class="hljs-number">00112233</span><br><span class="hljs-number">22222222</span>---&gt; <span class="hljs-number">11223344</span><br><span class="hljs-number">12345678</span>---&gt; <span class="hljs-number">01234679</span><br>aaaaaaaa---&gt;``aabbcc<br>abcdefgh---&gt; `acdfgij<br></code></pre></td></tr></table></figure><p>规律（这样写会简单一点，理解版见最下面）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">delta</span> = -<span class="hljs-number">1</span>           <br><br><span class="hljs-attribute">input</span>+= delta        <br><br><span class="hljs-attribute">if</span> i % <span class="hljs-number">2</span> =<span class="hljs-number">1</span>          <br><br> <span class="hljs-attribute">delta</span> -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280318606.png" alt="image-20240527152832818"></p><p>如上图我们可以知道一共加密了8*13&#x3D;104个字符</p><p>下一个加密如下图</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280319357.png" alt="image-20240527183940961"></p><p>经过多次调试我们可以发现v96应该是一个固定值（每次调试输入八字节的时候都一样），所以可以选择输入0去异或然后得到密钥值(paste data选择hex )</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280319853.png" alt="image-20240527183847678"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280319918.png" alt="image-20240527194548155"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280319183.png" alt="image-20240527192454187">（不用全选数据，直接在需要paste的第一个地址选中就行)</p><p>看最后比较逻辑其实是在v86这个地方</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280319237.png" alt="image-20240527154101872"></p><p>最后比较的即是r8b和[r14+rdx],点开发现r8b里面存的就是最开始我们解出来字符串（cry for help:)</p><p>“igdydo19TVE13ogW1AT5DgjPzHwPDQle1X7kS8TzHK8S5KCu9mnJ0uCnAQ4aV3CSYUl6QycpibWSLmqm2y&#x2F;GqW6PNJBZ&#x2F;C2RZuu+DfQFCxvLGHT5goG8BNl1ji2XB3x9GMg9T8Clatc&#x3D;”</p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280320335.png" alt="image-20240527190522563"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280320965.png" alt="image-20240527200047106"></p><p><img src="https://fastly.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405280320212.png" alt="image-20240527211744360"></p><p>最后因为之前获得的key和加密数据是经过base64编码后得来的</p><p>所以脚本最后如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vim">from base64 import *<br>b64_cipher =<br><span class="hljs-comment">&quot;igdydo19TVE13ogW1AT5DgjPzHwPDQle1X7kS8TzHK8S5KCu9mnJ0uCnAQ4aV3CSYUl6QycpibWSLmq</span><br>m2y/GqW6PNJBZ/C2RZuu+DfQFCxvLGHT5goG8BNl1ji2XB3x9GMg9T8Clatc=<span class="hljs-comment">&quot;</span><br>b64_key =<br><span class="hljs-comment">&quot;3F8gIsJ5GVY12otH0xn8VRTN0ntYWQlC3iy0SNnyG6lA4ab7/zjB1eLod3hvIgTmFj4MNVJc/cHlWRz</span><br>Qrlqy3Rn4QuYsiVnlEZzIe4Fwf2+<span class="hljs-number">8</span>bwKP9/TIcK4C+FvicggJb79LObXQHqM=<span class="hljs-comment">&quot;</span><br>key = b64decode(b64_key)<br>cipher = b64decode(b64_cipher)<br>flag = []<br><span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher)):<br>flag.<span class="hljs-keyword">append</span>(cipher[i] ^ key[i])<br>def fun(cipher):<br><span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher)):<br>cipher[i] ^= <span class="hljs-number">0</span>x33<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-built_in">or</span> i == <span class="hljs-number">1</span>:<br>cipher[i] += <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> i == <span class="hljs-number">4</span> <span class="hljs-built_in">or</span> i == <span class="hljs-number">5</span>:<br>cipher[i] -= <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> i == <span class="hljs-number">6</span> <span class="hljs-built_in">or</span> i == <span class="hljs-number">7</span>:<br>cipher[i] -= <span class="hljs-number">2</span><br><span class="hljs-keyword">return</span> cipher<br><span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(flag), <span class="hljs-number">8</span>):<br><span class="hljs-keyword">a</span> = fun(flag[i:i + <span class="hljs-number">8</span>])//最开始八个一组<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">j</span> in <span class="hljs-keyword">a</span>:<br><span class="hljs-keyword">print</span>(chr(<span class="hljs-keyword">j</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>flag&#123;<span class="hljs-number">6</span>e2480b3-<span class="hljs-number">4</span>f02-<span class="hljs-number">4</span>cf1-<span class="hljs-number">9</span>bc0-<span class="hljs-number">123</span>b75f9a922&#125;EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> base64<br>t = <span class="hljs-string">&#x27;igdydo19TVE13ogW1AT5DgjPzHwPDQle1X7kS8TzHK8S5KCu9mnJ0uCnAQ4aV3CSYUl6QycpibWSLmqm2y/GqW6PNJBZ/C2RZuu+DfQFCxvLGHT5goG8BNl1ji2XB3x9GMg9T8Clatc=&#x27;</span><br>t = base64.b64decode(t)<br>t = bytearray(t)<br>########################print(t)<br>a2 = b<span class="hljs-string">&#x27;3F8gIsJ5GVY12otH0xn8VRTN0ntYWQlC3iy0SNnyG6lA4ab7/zjB1eLod3hvIgTmFj4MNVJc/cHlWRzQrlqy3Rn4QuYsiVnlEZzIe4Fwf2+8bwKP9/TIcK4C+FvicggJb79LObXQHqM=&#x27;</span><br>realkey = base64.b64decode(a2)<br>for i <span class="hljs-keyword">in</span> range(len(t)):<br>    t[i] ^= realkey[i]<br>def dec2(x):<br>    x = bytearray(x)<br>    dd = <span class="hljs-number">-1</span><br>    for i <span class="hljs-keyword">in</span> range(len(x)):<br>        x[i] ^= <span class="hljs-number">0x33</span><br>        x[i] -= dd<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>            dd += <span class="hljs-number">1</span><br>    return bytes(x)<br>for i <span class="hljs-keyword">in</span> range(len(t) <span class="hljs-comment">// 8):</span><br>    print(dec2(t[i*<span class="hljs-number">8</span>:i*<span class="hljs-number">8</span>+<span class="hljs-number">8</span>]).decode(<span class="hljs-string">&#x27;ascii&#x27;</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓学习（随手记）</title>
    <link href="/2024/05/20/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E9%9A%8F%E6%89%8B%E8%AE%B0%EF%BC%89/"/>
    <url>/2024/05/20/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E9%9A%8F%E6%89%8B%E8%AE%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓学习（随手记）"><a href="#安卓学习（随手记）" class="headerlink" title="安卓学习（随手记）"></a>安卓学习（随手记）</h1><p>来源于吾爱破解安卓逆向by正己</p><h5 id="第二期"><a href="#第二期" class="headerlink" title="第二期"></a>第二期</h5><p><a href="https://www.52pojie.cn/thread-1695796-1-1.html">《安卓逆向这档事》二、初识APK文件结构、双开、汉化、基础修 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>核心破解——修改前后签名不一致</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404010938856.png" alt="image-20240401093758761"></p><h5 id="第四期"><a href="#第四期" class="headerlink" title="第四期"></a>第四期</h5><p>如果替换广告的时候是把关卡路径给替换掉，建议使用mt管理器而不是np管理器，用Np管理器安装包会闪退而且安装完之后就会直接闪退</p><p><a href="https://www.52pojie.cn/thread-1706691-1-1.html">《安卓逆向这档事》四、恭喜你获得广告&amp;弹窗静默卡 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>对于第一种直接替换路径的方法，不太推荐实操这样因为程序加载的时候一般会先进行一些资源的加载，直接跳过可能会引起问题</p><p>使用算法助手+Xposed工具将弹窗给hook掉。或者将第二次弹出广告的返回给Hook掉</p><p>开发者助手在抓一些图片的时候可能抓不到</p><h5 id="第五期"><a href="#第五期" class="headerlink" title="第五期"></a>第五期</h5><p>调试apk文件添加权限的时候应该添加在xml里面的application里面</p><p>雷电模拟器自带端口转发</p><p><a href="https://www.52pojie.cn/thread-1714727-1-1.html">《安卓逆向这档事》五、1000-7&#x3D;？&amp;动态调试&amp;Log插桩 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>Ctr+B  JEB下断点快捷键</p><h5 id="第六期"><a href="#第六期" class="headerlink" title="第六期"></a>第六期</h5><p>在算法助手里面选择“log捕获，防止应用退出，防止应用闪退”</p><p><a href="https://www.52pojie.cn/thread-1731181-1-1.html">《安卓逆向这档事》六、校验的N次方-签名校验对抗、PM代{过}{滤}理、IO重定向 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>io重定向——使之读不到改变后的地方来过掉校验</p><p>去掉apk校验</p><p>去掉root检验方法：</p><p>方法一：找到对应的源码，让源码的方法返回一个False</p><p>方法二：里面有“隐藏root“和””隐藏xposed”这一功能”（使用手机）</p><p>就没有root的弹窗</p><p>方法三：io重定向</p><p>方法四：修改Andoird源码，去除常见指纹</p><p>模拟器检测<a href="https://ionized-bag-d70.notion.site/04dbaf39091f42519b14decd2a87fde7">模拟器检测对抗 (notion.site)</a></p><p>反调试检测：</p><p>[<a href="https://bbs.kanxue.com/thread-268155.htm">原创]对安卓反调试和校验检测的一些实践与结论-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p>Int型赋值的时候要注意</p><p>const&#x2F;4和const&#x2F;16的区别</p><p><a href="https://www.52pojie.cn/home.php?mod=space&uid=874154&do=thread&view=me&from=space">芽衣的帖子 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h5 id="第九期"><a href="#第九期" class="headerlink" title="第九期"></a>第九期</h5><p><a href="https://www.52pojie.cn/thread-1762225-1-1.html">《安卓逆向这档事》九、密码学基础、算法自吐、非标准加密对抗 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>可以使用算法助手里面的算法分析来进行对实现加密的函数的类型的考察（30min）最后实现算法自吐</p><p>可以通过一些系统的加解密库hook出来</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404050047107.png" alt="image-20240405004749854"></p><p>AES密钥长度比DES长，（32DES）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404050053098.png" alt="image-20240405005349985"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404050103683.png" alt="image-20240405010341598"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404050107710.png"></p><p>用kotlin写的可以直接删掉</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404050107018.png" alt="image-20240405010733909"></p><h5 id="第八期"><a href="#第八期" class="headerlink" title="第八期"></a>第八期</h5><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404061028366.png" alt="image-20240406102808872"></p><p>没有String用Object</p><h5 id="第十期"><a href="#第十期" class="headerlink" title="第十期"></a>第十期</h5><p><a href="https://www.52pojie.cn/thread-1787667-1-1.html">《安卓逆向这档事》十、不是我说，有了IDA还要什么女朋友？ - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404050129819.png" alt="image-20240405012922711"></p><p>AS创建一个native c++项目，配合NDK CMake使用</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404050137451.png" alt="image-20240405013732287"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404050138828.png" alt="image-20240405013821651"></p><p>如果是静态注册的话，会有一个标识符</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404060915772.png" alt="image-20240406091552523"></p><p>JNIEXPORT表明它是一个导出函数</p><p>如果是静态函数的话，就可以直接搜索java</p><p>把原来的int型给改了</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404060919866.png" alt="image-20240406091928775"></p><p>在JNI中，<code>JNIEnv*</code> 是指针类型，指向一个接口环境实例。这个接口环境是Java本地接口(JNI)提供的一组函数集合，用于连接Java代码（运行在Java虚拟机JVM中）和用其他编程语言（如C、C++或汇编等）编写的本地（native）代码进行交互。</p><p>在JNI中编写本地方法时，Java虚拟机会将JNIEnv指针作为参数传递给这些方法，通过它，可以调用各种JNI函数来操作Java对象、调用Java方法、访问Java字段以及执行其他与Java环境交互的任务。</p><p><a href="https://www.52pojie.cn/thread-1787667-1-1.html">《安卓逆向这档事》十、不是我说，有了IDA还要什么女朋友？ - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h5 id="第十二期"><a href="#第十二期" class="headerlink" title="第十二期"></a>第十二期</h5><p>dlopen 用于加载库文件的关键函数</p><p>如果我要在找一个native层的函数，so文件在IDA里面进行搜索以后（java）发现并没有找到想找的那个函数，则这个函数不是静态方法的而是动态注册的，就直接搜名字</p><p>改类型（native),这样就可以识别一些函数</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062157824.png" alt="image-20240406215658686"></p><p>让字符串完整显示的一个方法</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062159584.png" alt="image-20240406215945418"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062200565.png" alt="image-20240406220027486"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062200654.png" alt="image-20240406220046541"></p><p>注意反调试</p><p><a href="https://www.52pojie.cn/thread-1809646-1-1.html">《安卓逆向这档事》十二、大佬帮我分析一下 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062242981.png" alt="image-20240406224245896"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062243108.png" alt="image-20240406224344019"></p><p>[<a href="https://bbs.kanxue.com/thread-268155.htm">原创]对安卓反调试和校验检测的一些实践与结论-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><h6 id="ollvm"><a href="#ollvm" class="headerlink" title="ollvm"></a>ollvm</h6><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062250435.png" alt="image-20240406225003385"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062252580.png" alt="image-20240406225251484"></p><p>字符串加密的原理很简单，编写一个pass将其中的字符串信息使用一些加密算法进行加密，然后特定的时间进行还原。一般含有字符串混淆、函数名混淆、不在init_array解密等<br>常见的特征：datadiv_decoded</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062304504.png" alt="image-20240406230406431"></p><p>IDA trace</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062321903.png" alt="image-20240406232100682"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062322349.png" alt="image-20240406232219305"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062323920.png" alt="image-20240406232300819"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404062324695.png" alt="image-20240406232405616"></p><p>PS:如果你trace了整个方法，但是当程序跑完以后有些基本块颜色没有变成黄色（变黄即成功运行），则说明那个是虚假函数，可以不用分析</p>]]></content>
    
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pixel3刷机记录及frida真机环境配置</title>
    <link href="/2024/05/18/pixel3%E5%88%B7%E6%9C%BA%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/05/18/pixel3%E5%88%B7%E6%9C%BA%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="pixel3-刷机记录及frida真机环境配置"><a href="#pixel3-刷机记录及frida真机环境配置" class="headerlink" title="pixel3 刷机记录及frida真机环境配置"></a>pixel3 刷机记录及frida真机环境配置</h1><h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405172146089.png" alt="image-20240517214645997"></p><p>在platform tools下有adb和fastboot的exe，如果没有，去下一个SDK platform tools，里面adb和fastboot都有，配环境变量到platform tools</p><p>我的：</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405182018040.png" alt="image-20240518201846956"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405172210153.png" alt="image-20240517221011095"></p><p><a href="https://developer.android.google.cn/studio/run/oem-usb#InstallingDriver">Install OEM USB drivers  | Android Studio  | Android Developers (google.cn)</a>如果是卡刷可以通过这个来刷</p><p>卡刷里面大概是这些（之前下错了……）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405182020639.png" alt="image-20240518202035618"></p><p>线刷包下载：（需要一个强大的代理）注意不要下成OTA卡刷包了……</p><p><a href="https://developers.google.cn/android/images?hl=zh-cn">https://developers.google.cn/android/images?hl=zh-cn</a></p><p>下好以后里面有些这些</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405182019872.png" alt="image-20240518201956847"></p><p>通过这个网址下载usb-driver：</p><p><a href="https://onfix.cn/course/4228?bid=217&mid=9759">Google Pixel 3 bluelineGoogle Pixel 3 blueline 线刷驱动，Google系列手机、手表通用驱动程序ZIP文件刷机解锁 (onfix.cn)</a></p><p>然后解压缩出来</p><p>步骤：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">如果要在 Windows <span class="hljs-number">10</span> 系统上首次安装 Android USB 驱动程序，请执行以下操作：<br><br>将您的 Android 设备连接到计算机的 USB 端口。<br>在 Windows 资源管理器中，打开计算机管理。<br>在计算机管理左侧窗格中，选择设备管理器。<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>其实直接搜索设备管理器就行<br>在设备管理器右侧窗格中，找到并展开便携式设备或其他设备，具体取决于您看到的是哪一项。<br>右键点击已连接设备的名称，然后选择更新驱动程序软件。<br>在硬件更新向导中，选择浏览计算机以查找驱动程序软件，然后点击下一步。<br>点击浏览，然后找到 USB 驱动程序文件夹。例如，Google USB 驱动程序位于 android_sdk\extras\google\usb_driver\。<br>点击下一步以安装驱动程序<br></code></pre></td></tr></table></figure><p>设备管理器打开以后</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405172243906.png" alt="image-20240517224333865"></p><p>我的连接成功以后会在蓝牙下方出现“其他设备选项”，选择打开发现pixel3，然后选择更新驱动程序——浏览我的电脑查找驱动程序</p><p>（不知道为什么之前一直没有显示出来Pixel3设备……）</p><p>如果有问题的话Pixel3(即连接设备)上会出现黄色问号</p><p>选择更新驱动程序（刚刚我们下载的usb driver),浏览我的电脑查找驱动程序处配置选择选择到usb driver文件夹层面即可</p><p>之前一直报错这个（下图），（马上就快刷完了一直卡这里谁懂）,试了很多种方法，以为是platform tools的环境变量配置出问题了，但是运行adb 和fastboot 命令都是可以的，百思不得其解……</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405182030743.jpg" alt="96cd0391bcc5f917c8bc91cafbba3db7"></p><p>最后发现应该是驱动程序的问题，驱动完成以后就没有什么问题了</p><h3 id="总结主要流程："><a href="#总结主要流程：" class="headerlink" title="总结主要流程："></a>总结主要流程：</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">连接电脑</span><span class="hljs-literal">----</span><span class="hljs-comment">电脑打开设备管理器</span><span class="hljs-literal">----</span><span class="hljs-comment">找到手机的选项</span><span class="hljs-literal">----</span><span class="hljs-comment">属性</span><span class="hljs-literal">----</span><span class="hljs-comment">驱动程序</span><span class="hljs-literal">----</span><span class="hljs-comment">更新驱动程序</span><span class="hljs-literal">----</span><span class="hljs-comment">手动查找驱动程序</span><span class="hljs-literal">----</span><span class="hljs-comment">选择下载好的ADB驱动安装即可</span><br></code></pre></td></tr></table></figure><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>连接电脑开启USB调试模式，并在电脑cmd窗口键入adb reboot bootloader，使手机进入bootloader模式<br>  2. 解压卡刷包到任意一个文件夹<br>  3. 在该文件夹内开启一个Terminal，并键入.&#x2F;flash-all.bat<br>  4. 等待窗口指令，手机重启后刷机完成</li></ol><p>刷机完成后可能会发现联网显示已经连接但是无法访问互联网</p><p>可以参考这个帖子，运行命令后重启即可</p><p><a href="https://blog.csdn.net/u011426115/article/details/122076900">google手机连接Wifi后总会提示无法连接互联网问题的解决_googlehome无法连接国内wifi-CSDN博客</a></p><h2 id="Android获取ROOT权限"><a href="#Android获取ROOT权限" class="headerlink" title="Android获取ROOT权限"></a>Android获取ROOT权限</h2><p>Android获取ROOT权限的方法可以参考</p><p><a href="https://www.cnblogs.com/luoyesiqiu/p/12076278.html">Android获取ROOT权限的通用方法 - luoyesiqiu - 博客园 (cnblogs.com)</a></p><h2 id="Frida配置"><a href="#Frida配置" class="headerlink" title="Frida配置"></a>Frida配置</h2><p>之前配置过模拟器的frida和Objection</p><p>在官网下载arm64的server,然后通过adb push server路径 &#x2F;data&#x2F;local&#x2F;tmp</p><p>（可以在frida server下载好了以后自行重命名，可以在后面运行的时候不用写很长的名字）</p><p>例如 命名为fri ，后期运行</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405182050732.png" alt="image-20240518205028705"></p><p>然后要运行脚本直接重新开启一个终端来书写frida对于命令即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>environment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XYCTF RE WP1</title>
    <link href="/2024/05/08/XYCTF%20RE%20WP/"/>
    <url>/2024/05/08/XYCTF%20RE%20WP/</url>
    
    <content type="html"><![CDATA[<h1 id="XYCTF-RE-WP"><a href="#XYCTF-RE-WP" class="headerlink" title="XYCTF RE WP"></a>XYCTF RE WP</h1><h2 id="你真的是大学生吗"><a href="#你真的是大学生吗" class="headerlink" title="你真的是大学生吗"></a>你真的是大学生吗</h2><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405052028645.png" alt="image-20240505202846580"></p><p>在一个运行于DOS环境下的汇编语言程序中，<code>int 21h</code> 的使用是非常频繁的，因为它提供了与操作系统进行交互的主要手段。每当程序需要进行输入输出操作、访问文件、控制屏幕显示、管理内存或是结束程序等操作时，通常都会调用 <code>int 21h</code> 来实现这些功能。</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405052121029.png" alt="image-20240505212101984"></p><p><code>mov     ah, 9</code>: 这里将9送入AH寄存器中，9是DOS中断调用功能号，对应于“输出$-terminated字符串到标准输出（通常是显示器）”的功能。</p><p><code>int     21h</code>: 最后，通过执行INT 21h指令，程序触发DOS中断，调用之前设置好的功能号9的服务。DOS会读取DX寄存器中的地址作为字符串的起始位置，然后将该地址指向的字符串输出到屏幕上。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-built_in">SI</span>默认就使用<span class="hljs-built_in">DS</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20240505230946614.png" alt="image-20240505230946614"></p><p>其实除了静态分析也可以直接box走起</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br>#include &lt;stdio<span class="hljs-number">.</span>h&gt;<br> <br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    unsigned char data[<span class="hljs-number">20</span>] = &#123;<br>    <span class="hljs-number">0x76</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x03</span>, <br>    <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x05</span>,<br>&#125;<span class="hljs-comment">;</span><br>    for(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 19;i++) &#123;</span><br>            printf(<span class="hljs-string">&quot;%c&quot;</span>,data[i] ^ data[i+<span class="hljs-number">1</span>])<span class="hljs-comment">;</span><br>    &#125;<br>   return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="baby-unity"><a href="#baby-unity" class="headerlink" title="baby unity"></a>baby unity</h2><p><a href="https://bbs.kanxue.com/thread-278275.htm">https://bbs.kanxue.com/thread-278275.htm</a></p><p>题目附件下载以后发现是il2cpp的脚本处理方式（和平时一般做的mono的不一样）</p><p>将几个文件脱upx壳后</p><p>用010 editor检查”\baby unity_Data\il2cpp_data\Metadata\global-metadata.dat”文件，发现文件头为AF 1B B1 FA无异常</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404090020226.png" alt="image-20240409002009134"></p><p>通过<a href="https://github.com/Perfare/Il2CppDumper/%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7">https://github.com/Perfare/Il2CppDumper/下载工具</a></p><p>说明里面提到的命令行格式为：</p><p>Il2CppDumper.exe executable-file  global-metadata  output-directory</p><p>用了这个没整起也不知道原因是什么</p><p>直接使用下载好的工具里面的Il2CppDumper.exe打开，在下载的题目的路径里面依次选中GameAssembly.dll以及”\baby unity_Data\il2cpp_data\Metadata\global-metadata.dat”（其实本来按照教程应该是libil2cpp.so文件，即 apk的dll，但这个不是apk是exe)然后这个地方的GameAssembly相当于so文件</p><p>运行成功</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404090027334.png" alt="image-20240409002730299"></p><p>然后就在il2cppdumper的下载目录下面出现Dummydll以及下图</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404090030362.png" alt="image-20240409003016337"></p><p>这个是Dummy.dll下面的</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404090030292.png" alt="image-20240409003058259"></p><p>使用dnspy 32打开Assembly-Csharp</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404090037734.png" alt="image-20240409003753670"></p><p>然后可以看到加密函数名称</p><p>用IDA64打开GameAssembly.dll</p><p>使用script file 导入文件，依次选择ida py3和script.json</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404090044391.jpg" alt="BABDBA394F32490D7F3FA2098EFAF0C0"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404090044924.jpg" alt="2E4263D45BDE39932974847882E9A494"></p><p>根据最开始上面贴的教程没有选择导入</p><p>然后分析界面的函数名称就清晰很多了，直接在函数窗口搜索对应的两个函数，checkflag和encrypt</p><p>分析逻辑如下</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404090047725.png" alt="image-20240409004715644"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404090047358.png" alt="image-20240409004751261"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404090048868.png" alt="image-20240409004830829"></p><p>最后一步即为比较加密后的flag和已知字符串，双击获得该字符串</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404090049632.png" alt="image-20240409004946567"></p><p>脚本：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import base64<br><br><span class="hljs-comment">//已知经过处理后的字符串</span><br><br>v7_str = <span class="hljs-string">&quot;XIcKYJU8Buh:UeV:BKN&#123;U[JvUL??VuZ?CXJ;AX^&#123;Ae]gA[]gUecb@K]ei^22&quot;</span><br><br><span class="hljs-comment">//将字符串转换为字节</span><br><br>reversed_v7_bytes = <span class="hljs-built_in">bytes</span>(v7_str, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-comment">//Step 2: 对字节进行异或操作还原</span><br><br><span class="hljs-comment">//因为Python字节是单字节的，所以我们不需要按对进行操作</span><br><br>reversed_v7_recovered = <span class="hljs-built_in">bytearray</span>()<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span>, byte <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(reversed_v7_bytes):<br>    reversed_v7_recovered<span class="hljs-selector-class">.append</span>(byte ^ <span class="hljs-number">0</span>xF)<br><br><span class="hljs-comment">//Step 4: Base64解码（假设v7_str已经是Base64编码过的）</span><br><br><span class="hljs-comment">//注意：由于不清楚原始的Base64编码是否有padding，这里假设没有padding</span><br><br>try:<br>    v5_decoded = base64<span class="hljs-selector-class">.b64decode</span>(reversed_v7_recovered)<br>except Exception as e:<br>    <span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;Base64解码时发生错误: &#123;e&#125;&quot;</span>)<br>    v5_decoded = None<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;尝试还原的原始字节数组v5:&quot;</span>, v5_decoded)</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404090052451.png" alt="image-20240409005252384"></p><p>XYCTF{389f6900-e12d-4c54-a85d-64a54af9f84c}</p><h2 id="DebugMe"><a href="#DebugMe" class="headerlink" title="DebugMe"></a>DebugMe</h2><p>题目提示需要debugger,于是查看该apk附件的xml</p><p>发现没有debugger,所以在模拟器上使用mt管理器添加调试权限</p><p>步骤可参考<a href="https://www.52pojie.cn/thread-1714727-1-1.html">《安卓逆向这档事》五、1000-7&#x3D;？&amp;动态调试&amp;Log插桩 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>（随便找个地方加到application里面就行了，加中间省事）</p><p>形如这样</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404281309313.png" alt="image-20240428130924255"></p><p>然后再保存以后再安装，然后可以尝试将修改后的apk导出，用jadx查看xml发现添加成功（有点多此一举，可以直接mt看）</p><p>android:debuggable&#x3D;”true”</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404100026275.png" alt="image-20240410002645206"></p><p>(上面这个不行，记下来告诫自己)</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404100045524.png" alt="image-20240410004511497"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404100047829.png" alt="image-20240410004725755"></p><p>设置断点然后开始运行，附上进程即可获得flag</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404100044594.png" alt="image-20240410004452515"></p><p>针对这个题，接着去看了下安卓的东西</p><p>linux或者安卓下的proc保留的是当前进程下面的进程号，文件句柄之类的</p><p>这里提一下proc下面的self，cmdline,environ(当前程序的环境变量，如果flag放在环境变量里面，可以读取这个去找flag)，然后非预期也是和这个地方有关</p><p>DEX可执行文件，因为后续使用kotlin编写的最后与java是兼容的，所以后续的dex也可以使用jadx进行反编译</p><p>jeb可进行动态跟踪</p><p>这里复习一下apktool解包命令apktool d</p><p>重新打包apktool b</p><p>出题人说混淆器用的BlackObfuscator，depth设的高了点，好像有些版本的jadx直接报错了</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404281642974.png" alt="image-20240428164253906"></p><p>混淆可以通过jeb去掉，可以去smali改debug的if判定出flag</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404281643650.png" alt="image-20240428164352546"></p><p>调试层面也可以通过jadx，在adb路径处直接填写待调试exe的路径即可</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404281645045.png" alt="image-20240428164515002"></p><h2 id="ez-cube"><a href="#ez-cube" class="headerlink" title="ez_cube"></a>ez_cube</h2><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404100106991.png" alt="image-20240410010641924"></p><p>建议改下变量名字</p><p>可以直接通过该魔方模型进行推算步骤，也可以进行爆破</p><p>题目：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__int64 <span class="hljs-title">sub_7FF629032930</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+44h] [rbp+24h]</span><br><span class="hljs-type">char</span> input_steps; <span class="hljs-comment">// [rsp+64h] [rbp+44h]</span><br><span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+84h] [rbp+64h]</span><br><span class="hljs-built_in">sub_7FF629031384</span>((__int64)&amp;unk_7FF6290440A2);<br><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; ++i ) <span class="hljs-comment">// 初始化cube</span><br>&#123;<br>surface1[i] = &amp;Red;<br>surface2[i] = <span class="hljs-string">&quot;Blue&quot;</span>;<br>surface3[i] = <span class="hljs-string">&quot;Green&quot;</span>;<br>surface4[i] = <span class="hljs-string">&quot;Orange&quot;</span>;<br>surface5[i] = <span class="hljs-string">&quot;Yellow&quot;</span>;<br>surface6[i] = <span class="hljs-string">&quot;White&quot;</span>;<br>&#125;<br>surface2[<span class="hljs-number">1</span>] = &amp;Red;<br>surface1[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Green&quot;</span>;<br>surface3[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Blue&quot;</span>;<br><span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>&#123;<br><span class="hljs-keyword">do</span><br>input_steps = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> ( input_steps == <span class="hljs-number">10</span> ); <span class="hljs-comment">// 读取回车就下一步</span><br><span class="hljs-keyword">switch</span> ( input_steps )<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;R&#x27;</span>:<br><span class="hljs-built_in">sub_7FF629031375</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;U&#x27;</span>:<br><span class="hljs-built_in">sub_7FF6290313BB</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;r&#x27;</span>:<br><span class="hljs-built_in">sub_7FF629031366</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;u&#x27;</span>:<br><span class="hljs-built_in">sub_7FF62903115E</span>();<br><span class="hljs-keyword">break</span>;<br>&#125;<br>++steps;<br>v3 = <span class="hljs-built_in">cmp</span>();<br><span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">1</span> )<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">2</span> )<br><span class="hljs-keyword">goto</span> LABEL_19;<br>&#125;<br><span class="hljs-built_in">printf</span>(aGreatYouAreAGo);<br>LABEL_19:<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;<br>&#125;<br></code></pre></td></tr></table></figure><p>exp:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs prolog">from itertools import *<br>red = [<span class="hljs-string">&#x27;&#x27;</span>] * <span class="hljs-number">9</span><br>blue = [<span class="hljs-string">&#x27;&#x27;</span>] * <span class="hljs-number">9</span><br>green = [<span class="hljs-string">&#x27;&#x27;</span>] * <span class="hljs-number">9</span><br>orange = [<span class="hljs-string">&#x27;&#x27;</span>] * <span class="hljs-number">9</span><br>yellow = [<span class="hljs-string">&#x27;&#x27;</span>] * <span class="hljs-number">9</span><br>white = [<span class="hljs-string">&#x27;&#x27;</span>] * <span class="hljs-number">9</span><br>def init_cube():<br>for i in range(<span class="hljs-number">9</span>):<br>red[i] = <span class="hljs-string">&quot;red&quot;</span><br>blue[i] = <span class="hljs-string">&quot;Blue&quot;</span><br>green[i] = <span class="hljs-string">&quot;Green&quot;</span><br>orange[i] = <span class="hljs-string">&quot;Orange&quot;</span><br>yellow[i] = <span class="hljs-string">&quot;Yellow&quot;</span><br>white[i] = <span class="hljs-string">&quot;White&quot;</span><br>blue[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;red&quot;</span><br>red[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Green&quot;</span><br>green[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Blue&quot;</span><br>def <span class="hljs-symbol">MOVE_R</span>():<br>v1 = red[<span class="hljs-number">2</span>]<br>v2 = red[<span class="hljs-number">5</span>]<br>v3 = red[<span class="hljs-number">8</span>]<br>red[<span class="hljs-number">2</span>] = white[<span class="hljs-number">2</span>]<br>red[<span class="hljs-number">5</span>] = white[<span class="hljs-number">5</span>]<br>red[<span class="hljs-number">8</span>] = white[<span class="hljs-number">8</span>]<br>white[<span class="hljs-number">2</span>] = orange[<span class="hljs-number">6</span>]<br>white[<span class="hljs-number">5</span>] = orange[<span class="hljs-number">3</span>]<br>white[<span class="hljs-number">8</span>] = orange[<span class="hljs-number">0</span>]<br>orange[<span class="hljs-number">0</span>] = yellow[<span class="hljs-number">8</span>]<br>orange[<span class="hljs-number">3</span>] = yellow[<span class="hljs-number">5</span>]<br>orange[<span class="hljs-number">6</span>] = yellow[<span class="hljs-number">2</span>]<br>yellow[<span class="hljs-number">2</span>] = v1<br>yellow[<span class="hljs-number">5</span>] = v2<br>yellow[<span class="hljs-number">8</span>] = v3<br>v4 = green[<span class="hljs-number">1</span>]<br>green[<span class="hljs-number">1</span>] = green[<span class="hljs-number">3</span>]<br>green[<span class="hljs-number">3</span>] = green[<span class="hljs-number">7</span>]<br>green[<span class="hljs-number">7</span>] = green[<span class="hljs-number">5</span>]<br>green[<span class="hljs-number">5</span>] = v4<br>v5 = green[<span class="hljs-number">0</span>]<br>green[<span class="hljs-number">0</span>] = green[<span class="hljs-number">6</span>]<br>green[<span class="hljs-number">6</span>] = green[<span class="hljs-number">8</span>]<br>green[<span class="hljs-number">8</span>] = green[<span class="hljs-number">2</span>]<br>green[<span class="hljs-number">2</span>] = v5<br>def <span class="hljs-symbol">MOVE_U</span>():<br>v1 = red[<span class="hljs-number">0</span>]<br>v2 = red[<span class="hljs-number">1</span>]<br>v3 = red[<span class="hljs-number">2</span>]<br>red[<span class="hljs-number">0</span>] = green[<span class="hljs-number">0</span>]<br>red[<span class="hljs-number">1</span>] = green[<span class="hljs-number">1</span>]<br>red[<span class="hljs-number">2</span>] = green[<span class="hljs-number">2</span>]<br>green[<span class="hljs-number">0</span>] = orange[<span class="hljs-number">0</span>]<br>green[<span class="hljs-number">1</span>] = orange[<span class="hljs-number">1</span>]<br>green[<span class="hljs-number">2</span>] = orange[<span class="hljs-number">2</span>]<br>orange[<span class="hljs-number">0</span>] = blue[<span class="hljs-number">0</span>]<br>orange[<span class="hljs-number">1</span>] = blue[<span class="hljs-number">1</span>]<br>orange[<span class="hljs-number">2</span>] = blue[<span class="hljs-number">2</span>]<br>blue[<span class="hljs-number">0</span>] = v1<br>blue[<span class="hljs-number">1</span>] = v2<br>blue[<span class="hljs-number">2</span>] = v3<br>v4 = yellow[<span class="hljs-number">1</span>]<br>yellow[<span class="hljs-number">1</span>] = yellow[<span class="hljs-number">3</span>]<br>yellow[<span class="hljs-number">3</span>] = yellow[<span class="hljs-number">7</span>]<br>yellow[<span class="hljs-number">7</span>] = yellow[<span class="hljs-number">5</span>]<br>yellow[<span class="hljs-number">5</span>] = v4<br>v5 = yellow[<span class="hljs-number">0</span>]<br>yellow[<span class="hljs-number">0</span>] = yellow[<span class="hljs-number">6</span>]<br>yellow[<span class="hljs-number">6</span>] = yellow[<span class="hljs-number">8</span>]<br>yellow[<span class="hljs-number">8</span>] = yellow[<span class="hljs-number">2</span>]<br>yellow[<span class="hljs-number">2</span>] = v5<br><br>def <span class="hljs-symbol">MOVE_r</span>():<br>v1 = red[<span class="hljs-number">2</span>]<br>v2 = red[<span class="hljs-number">5</span>]<br>v3 = red[<span class="hljs-number">8</span>]<br>red[<span class="hljs-number">2</span>] = yellow[<span class="hljs-number">2</span>]<br>red[<span class="hljs-number">5</span>] = yellow[<span class="hljs-number">5</span>]<br>red[<span class="hljs-number">8</span>] = yellow[<span class="hljs-number">8</span>]<br>yellow[<span class="hljs-number">2</span>] = orange[<span class="hljs-number">6</span>]<br>yellow[<span class="hljs-number">5</span>] = orange[<span class="hljs-number">3</span>]<br>yellow[<span class="hljs-number">8</span>] = orange[<span class="hljs-number">0</span>]<br>orange[<span class="hljs-number">0</span>] = white[<span class="hljs-number">8</span>]<br>orange[<span class="hljs-number">3</span>] = white[<span class="hljs-number">5</span>]<br>orange[<span class="hljs-number">6</span>] = white[<span class="hljs-number">2</span>]<br>white[<span class="hljs-number">2</span>] = v1<br>white[<span class="hljs-number">5</span>] = v2<br>white[<span class="hljs-number">8</span>] = v3<br>v4 = green[<span class="hljs-number">1</span>]<br>green[<span class="hljs-number">1</span>] = green[<span class="hljs-number">5</span>]<br>green[<span class="hljs-number">5</span>] = green[<span class="hljs-number">7</span>]<br>green[<span class="hljs-number">7</span>] = green[<span class="hljs-number">3</span>]<br>green[<span class="hljs-number">3</span>] = v4<br>v5 = green[<span class="hljs-number">0</span>]<br>green[<span class="hljs-number">0</span>] = green[<span class="hljs-number">2</span>]<br>green[<span class="hljs-number">2</span>] = green[<span class="hljs-number">8</span>]<br>green[<span class="hljs-number">8</span>] = green[<span class="hljs-number">6</span>]<br>green[<span class="hljs-number">6</span>] = v5<br>def <span class="hljs-symbol">MOVE_u</span>():<br>v1 = red[<span class="hljs-number">0</span>]<br>v2 = red[<span class="hljs-number">1</span>]<br>v3 = red[<span class="hljs-number">2</span>]<br>red[<span class="hljs-number">0</span>] = blue[<span class="hljs-number">0</span>]<br>red[<span class="hljs-number">1</span>] = blue[<span class="hljs-number">1</span>]<br>red[<span class="hljs-number">2</span>] = blue[<span class="hljs-number">2</span>]<br>blue[<span class="hljs-number">0</span>] = orange[<span class="hljs-number">0</span>]<br>blue[<span class="hljs-number">1</span>] = orange[<span class="hljs-number">1</span>]<br>blue[<span class="hljs-number">2</span>] = orange[<span class="hljs-number">2</span>]<br>orange[<span class="hljs-number">0</span>] = green[<span class="hljs-number">0</span>]<br>orange[<span class="hljs-number">1</span>] = green[<span class="hljs-number">1</span>]<br>orange[<span class="hljs-number">2</span>] = green[<span class="hljs-number">2</span>]<br>green[<span class="hljs-number">0</span>] = v1<br>green[<span class="hljs-number">1</span>] = v2<br>green[<span class="hljs-number">2</span>] = v3<br>v4 = yellow[<span class="hljs-number">1</span>]<br>yellow[<span class="hljs-number">1</span>] = yellow[<span class="hljs-number">5</span>]<br>yellow[<span class="hljs-number">5</span>] = yellow[<span class="hljs-number">7</span>]<br>yellow[<span class="hljs-number">7</span>] = yellow[<span class="hljs-number">3</span>]<br>yellow[<span class="hljs-number">3</span>] = v4<br>v5 = yellow[<span class="hljs-number">0</span>]<br>yellow[<span class="hljs-number">0</span>] = yellow[<span class="hljs-number">2</span>]<br>yellow[<span class="hljs-number">2</span>] = yellow[<span class="hljs-number">8</span>]<br>yellow[<span class="hljs-number">8</span>] = yellow[<span class="hljs-number">6</span>]<br>yellow[<span class="hljs-number">6</span>] = v5<br>def <span class="hljs-symbol">Is_right</span>():<br><span class="hljs-symbol">Count</span> = <span class="hljs-number">0</span><br>for i in range(<span class="hljs-number">9</span>):<br>if red[i]  <span class="hljs-string">&quot;red&quot;</span>:<br><span class="hljs-symbol">Count</span> += <span class="hljs-number">1</span><br>if blue[i]  <span class="hljs-string">&quot;Blue&quot;</span>:<br><span class="hljs-symbol">Count</span> += <span class="hljs-number">1</span><br>if green[i]  <span class="hljs-string">&quot;Green&quot;</span>:<br><span class="hljs-symbol">Count</span> += <span class="hljs-number">1</span><br>if orange[i]  <span class="hljs-string">&quot;Orange&quot;</span>:<br><span class="hljs-symbol">Count</span> += <span class="hljs-number">1</span><br>if yellow[i]  <span class="hljs-string">&quot;Yellow&quot;</span>:<br><span class="hljs-symbol">Count</span> += <span class="hljs-number">1</span><br>if white[i]  <span class="hljs-string">&quot;White&quot;</span>:<br><span class="hljs-symbol">Count</span> += <span class="hljs-number">1</span><br>#print(<span class="hljs-symbol">Count</span>)<br>if <span class="hljs-symbol">Count</span> ! <span class="hljs-number">54</span>:<br>return <span class="hljs-symbol">False</span><br>return <span class="hljs-symbol">True</span><br>def main(flag):<br>#print(flag)<br>init_cube()<br>for i in flag:<br>if i  <span class="hljs-string">&quot;R&quot;</span>:<br><span class="hljs-symbol">MOVE_R</span>()<br>if i  <span class="hljs-string">&quot;U&quot;</span>:<br><span class="hljs-symbol">MOVE_U</span>()<br>if i  <span class="hljs-string">&#x27;r&#x27;</span>:<br><span class="hljs-symbol">MOVE_r</span>()<br>if i  <span class="hljs-string">&#x27;u&#x27;</span>:<br><span class="hljs-symbol">MOVE_u</span>()<br>if <span class="hljs-symbol">Is_right</span>():<br>return flag<br>def get_flag():<br>table = <span class="hljs-string">&quot;RrUu&quot;</span><br>for string in product(table, repeat=<span class="hljs-number">12</span>):<br>flag = <span class="hljs-string">&quot;&quot;</span>.join(string)<br>ret = main(flag)<br>if ret ! <span class="hljs-symbol">None</span>:<br>print(ret)<br>return<br>get_flag()<br></code></pre></td></tr></table></figure><h2 id="ez-rand"><a href="#ez-rand" class="headerlink" title="ez_rand"></a>ez_rand</h2><p>之前在某处学了个方法，</p><p>该文件使用IDA打开后分析逻辑不知道scanf到哪里去了，使用F5重新分析后获得输入逻辑</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404121601693.png" alt="image-20240412160100536"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20240222220836421.png" alt="image-20240222220836421"></p><p>v9 v10地址连续</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404121922862.png" alt="image-20240412192224780"></p><p>即可以获取最后进行对比的数据v9——29位的flag，包含v10</p><p>v4是种子，srand函数和rand函数根据种子来生成随机数，input加密逻辑使用v7 那么首先想到的是爆破种子，来推flag 再看v4，unsigned __int16 v4无符号16位整数型，v4范围为0~2**16-1(65535)，结合flag固定格式 XYCTF{}</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp">\<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> \<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> \<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> \<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">containsXYCTF</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"> </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(str, <span class="hljs-string">&quot;XYCTF&quot;</span>) != <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 包含&quot;XYCTF&quot;</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 不包含&quot;XYCTF&quot;</span><br>  &#125;<br> &#125;<br> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"> </span>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> cipher[<span class="hljs-number">29</span>] = &#123;<span class="hljs-number">0x5D</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x34</span>, <br><span class="hljs-number">0xB2</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x91</span>, <br><span class="hljs-number">0x12</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>&#125;;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v7;<br>  <span class="hljs-type">char</span> flag[<span class="hljs-number">29</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed = <span class="hljs-number">0</span>; seed &lt; <span class="hljs-number">65536</span>; seed++)<br>  &#123;<br>    <span class="hljs-built_in">srand</span>(seed);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">29</span>; i++)<br>    &#123;<br>      v7 = <span class="hljs-built_in">rand</span>();<br>      <span class="hljs-type">int</span> num = (<span class="hljs-type">int</span>)((<span class="hljs-type">unsigned</span> __int64)(<span class="hljs-number">2155905153</span> * v7) &gt;&gt; <span class="hljs-number">32</span>);<br>      <span class="hljs-type">unsigned</span> __int8 data = (<span class="hljs-type">unsigned</span> __int8)(v7 + ((num &amp; <span class="hljs-number">0x80000000</span>) != <br><br><span class="hljs-number">0</span>) + (num &gt;&gt; <span class="hljs-number">7</span>));<br><br>​      flag[i] = cipher[i] ^ data;<br>​    &#125;<br>​    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">containsXYCTF</span>(flag))<br>&#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;success\n&quot;</span>);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;seed = %d\n&quot;</span>, seed);<br> <span class="hljs-built_in">puts</span>(flag);<br> &#125;<br> &#125;<br><br> &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122000994.png" alt="image-20240412200052899"></p><h2 id="给阿姨倒一杯卡布奇诺"><a href="#给阿姨倒一杯卡布奇诺" class="headerlink" title="给阿姨倒一杯卡布奇诺"></a>给阿姨倒一杯卡布奇诺</h2><p>茶加密</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#include &lt;stdio.h&gt;<br>#define uint32_t unsigned int<br><br>void decrypt(uint32_t *v, uint32_t *key)<br>&#123;<br>    static uint32_t data1 = <span class="hljs-number">0x5F797274</span>;<br>    static uint32_t data2 = <span class="hljs-number">0x64726168</span>;<br>    int i;   // [rsp+<span class="hljs-number">20</span>h] [rbp<span class="hljs-number">-10</span>h]<br>    uint32_t sum; // [rsp+<span class="hljs-number">24</span>h] [rbp-<span class="hljs-symbol">Ch</span>]<br>    uint32_t v1;  // [rsp+<span class="hljs-number">28</span>h] [rbp<span class="hljs-number">-8</span>h]<br>    uint32_t v0;  // [rsp+<span class="hljs-number">2</span><span class="hljs-symbol">Ch</span>] [rbp<span class="hljs-number">-4</span>h]<br><br>    sum = <span class="hljs-number">0x6E75316C</span> * <span class="hljs-number">32</span>;<br>    uint32_t data1_tmp = v[<span class="hljs-number">0</span>];<br>    uint32_t data2_tmp = v[<span class="hljs-number">1</span>];<br>    v0 = v[<span class="hljs-number">0</span>];<br>    v1 = v[<span class="hljs-number">1</span>];<br>    for (i = <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        v1 -= ((v0 &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">3</span>]) ^ (v0 + sum) ^ (key[<span class="hljs-number">2</span>] + <span class="hljs-number">16</span> * v0) ^ (sum + i);<br>        v0 -= ((v1 &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">1</span>]) ^ (v1 + sum) ^ (key[<span class="hljs-number">0</span>] + <span class="hljs-number">16</span> * v1) ^ (sum + i);<br>        sum -= <span class="hljs-number">0x6E75316C</span>;<br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0 ^ data1;<br>    v[<span class="hljs-number">1</span>] = v1 ^ data2;<br>    data1 = data1_tmp;<br>    data2 = data2_tmp;<br>&#125;<br><br>int main()<br>&#123;<br>    uint32_t key[<span class="hljs-number">4</span>];   // [rsp+<span class="hljs-number">60</span>h] [rbp<span class="hljs-number">-40</span>h] <span class="hljs-symbol">BYREF</span><br>    uint32_t array[<span class="hljs-number">8</span>]; // [rsp+<span class="hljs-number">70</span>h] [rbp<span class="hljs-number">-30</span>h]<br>    array[<span class="hljs-number">0</span>] = <span class="hljs-number">0x9B28ED45</span>;<br>    array[<span class="hljs-number">1</span>] = <span class="hljs-number">0x145EC6E9</span>;<br>    array[<span class="hljs-number">2</span>] = <span class="hljs-number">0x5B27A6C3</span>;<br>    array[<span class="hljs-number">3</span>] = <span class="hljs-number">0xE59E75D5</span>;<br>    array[<span class="hljs-number">4</span>] = <span class="hljs-number">0xE82C2500</span>;<br>    array[<span class="hljs-number">5</span>] = <span class="hljs-number">0xA4211D92</span>;<br>    array[<span class="hljs-number">6</span>] = <span class="hljs-number">0xCD8A4B62</span>;<br>    array[<span class="hljs-number">7</span>] = <span class="hljs-number">0xA668F440</span>;<br>    key[<span class="hljs-number">0</span>] = <span class="hljs-number">0x65766967</span>;<br>    key[<span class="hljs-number">1</span>] = <span class="hljs-number">0x756F795F</span>;<br>    key[<span class="hljs-number">2</span>] = <span class="hljs-number">0x7075635F</span>;<br>    key[<span class="hljs-number">3</span>] = <span class="hljs-number">0x6165745F</span>;<br>    for (int i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">7</span>; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        decrypt(array + i, key);<br>    &#125;<br>    for(int i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">32</span>; i++)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;%c&quot;</span>, ((char*)array)[i]);<br>    &#125;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br>// <span class="hljs-number">133</span>bffe401d223a02385d90c5f1ca377<br></code></pre></td></tr></table></figure><h2 id="trustme"><a href="#trustme" class="headerlink" title="trustme"></a>trustme</h2><p>先看main activity发现下图，</p><p>代码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">public void <span class="hljs-built_in">onClick</span>(View view) &#123; ((TextView) <span class="hljs-built_in">findViewById</span>(C0875R.C0878id.username))<span class="hljs-selector-class">.getText</span>()<span class="hljs-selector-class">.toString</span>(); if (bytesToHex(RC4(((TextView) <span class="hljs-built_in">findViewById</span>(C0875R.C0878id.password))<span class="hljs-selector-class">.getText</span>()<span class="hljs-selector-class">.toString</span>()<span class="hljs-selector-class">.getBytes</span>(), &quot;XYCTF&quot;<span class="hljs-selector-class">.getBytes</span>()))<span class="hljs-selector-class">.equals</span>(&quot;<span class="hljs-number">5</span>a3c46e0228b444decc7651c8a7ca93ba4cb35a46f7eb589bef4&quot;)) &#123; Toast<span class="hljs-selector-class">.makeText</span>(this, &quot;成功!&quot;, <span class="hljs-number">0</span>); &#125; &#125;<br></code></pre></td></tr></table></figure><p>经过分析代码逻辑即为使用Android平台的一个onClick点击事件处理函数，当关联到该函数的视图（如按钮）被点击时，此函数会被触发执行，通过findViewById()方法找到与资源ID（C0875R.C0878id.），查找并获取界面上的TextView组件，然后调用getText()方法获取该TextView中的文本内容（username和password)，并进一步调用toString()方法将其转换为字符串形式。</p><p>发现下面的RC4为标准加密，</p><p>XYCTF”为密钥</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404111846794.png" alt="image-20240411184602671"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404111856164.png" alt="image-20240411185626064"></p><p>解密获得用户名为admin</p><p>然后发现没有找到password</p><p>学习一下</p><p>“ProxyApplication”通常是指开发者为了在应用程序启动之初就进行一些全局初始化操作或者代理系统默认的Application类来实现特定功能而自定义的一个Application子类。这样的类会在整个应用程序生命周期内始终存在，且在任何Activity或其他组件启动前就已经初始化完成。“</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404111859039.png" alt="image-20240411185958907"></p><p>注意这里面的前两句，是java反射调用</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404111903220.png" alt="image-20240411190330172"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404112033709.png" alt="image-20240411203312598"></p><p>通过这个地方其实可以大差不差猜出来是把shell.apk放到了payload_dex”路径下面</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404112039757.png" alt="image-20240411203949682"></p><p>在对应路径可以找到该apk文件</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404112042924.png" alt="image-20240411204208855"></p><p>反编译该apk文件</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404112220437.png" alt="image-20240411222000368"></p><p>发现执行了SQL查询，即判断应在数据库中存在password数据，当程序运行时输入password和username正确时会得到正确的flag</p><p>查看MoveSQLiteUtil类，发现创建了一个<code>File</code>对象<code>file</code>，指向预期的数据库文件路径，即上述目录下名为”mydb.db”的SQLite数据库文件（在安卓系统中，<code>db</code> 通常是 <code>Database</code>（数据库）的缩写，具体指的是 SQLite 数据库文件）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404112226664.png" alt="image-20240411222629591"></p><p>最后使用mt管理器找到该文件，找到flag</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404112228965.png" alt="image-20240411222850926"></p><p>.db文件为SQLite数据库文件的标准格式之一</p><p>附——</p><p>看官方wp发现：其实通过直接看XML可以发现给的入口点和真正的入口点是不一样的，可以因此去判断有壳的存在</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405070059757.png" alt="image-20240507005946638"></p><ul><li><code>android:name=&quot;com.swdd.trustme.ProxyApplication&quot;</code> 定义在<code>&lt;application&gt;</code>标签内，表明<code>ProxyApplication</code>是应用程序的主Application类。Application类是应用程序的入口点之一，负责初始化应用程序级别的组件、设置全局配置等。这是应用程序启动时第一个加载的类，可以视为一个高层的、全局的入口点。</li><li><code>android:name=&quot;com.swdd.tru5tme.MainActivity&quot;</code> 定义在<code>&lt;activity&gt;</code>标签内，并且设置了<code>android:exported=&quot;true&quot;</code>以及包含了<code>&lt;intent-filter&gt;</code>标签，这表明<code>MainActivity</code>是对外公开的、可由系统启动器识别并启动的用户界面入口点。对于大多数应用程序来说，主Activity是用户直接交互的第一个界面，可以说是用户视角的入口点。</li></ul><h5 id="adb-shell-pm-list-packages-3"><a href="#adb-shell-pm-list-packages-3" class="headerlink" title="adb shell pm list packages -3"></a>adb shell pm list packages -3</h5><p>命令 <code>adb shell pm list packages -3</code> 是在Android设备上通过ADB（Android Debug Bridge）查询所有已安装的第三方应用程序列表的操作。这里的 <code>-3</code> 参数告诉包管理器（Package Manager，简称pm）只显示第三方应用，即非系统预装的应用。当你执行这条命令时，ADB会连接到你的Android设备（确保你的设备已经开启开发者模式并连接到了电脑），然后列出所有用户安装的应用程序包名。</p><h5 id="adb-shell-dumpsys-window-findstr-mCurrentFocus"><a href="#adb-shell-dumpsys-window-findstr-mCurrentFocus" class="headerlink" title="adb shell dumpsys window | findstr mCurrentFocus"></a>adb shell dumpsys window | findstr mCurrentFocus</h5><p>用来查找当前在Android设备上获得焦点的应用窗口的信息。</p><p>这个题有两个方法把数据提出来，一个是使用frida</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">frida-dexdump -U -f <span class="hljs-keyword">com</span>.swdd.trustme<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405070131550.png" alt="image-20240507013111462"></p><p>使用这个命令然后再用jadx查看提取出来的dex文件，即可以看到真正的MainActivity类</p><p>另一个则是因为题目中存在类似解压的操作，那么可以判断应该存在解包的文件，可以直接拖出来</p><p>先使用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">adb</span> shell pm list packages -<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>获取所有包名</p><p>然后再</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">adb <span class="hljs-built_in">shell</span> dumpsys <span class="hljs-built_in">window</span> | findstr mCurrentFocus<br></code></pre></td></tr></table></figure><p>可以获得真正的包名和入口点</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405070134247.png" alt="image-20240507013431195"></p><p>得到</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mCurrentFocus=Window&#123;bebbaf6 u0<br>com<span class="hljs-selector-class">.swdd</span>.trustme/com<span class="hljs-selector-class">.swdd</span><span class="hljs-selector-class">.tru5tme</span>.MainActivity&#125;<br></code></pre></td></tr></table></figure><p>所以可以去data目录里面去找</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">adb shell<br><span class="hljs-built_in">cd</span> /<span class="hljs-keyword">data</span>/<span class="hljs-keyword">data</span>/com.swdd.trustme/app_payload_dex<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>就可以在&#x2F;data&#x2F;data&#x2F;com.swdd.trustme&#x2F;app_payload_dex中找到脱壳出来的apk</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405070135874.png" alt="image-20240507013554824"></p><p>最后使用adb pull出来</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">adb pull <span class="hljs-regexp">/data/</span>data<span class="hljs-regexp">/com.swdd.trustme/</span>app_payload_dex<span class="hljs-operator">/</span>shell.apk <span class="hljs-string">&quot;D:<span class="hljs-subst">\t</span>mp&quot;</span><br></code></pre></td></tr></table></figure><p>而解密操作一个似乎是涉及到web的方法，一个是常规的逆向，异或0xFF回去即可，而有个思路很出人意外</p><p>因为db数据库文件中一般填充了大量的0x00，而这个打开却发现大多是0xFF,经猜测异或0xFF回去，解密</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vim">import os,sys<br><span class="hljs-keyword">f</span>=<span class="hljs-keyword">open</span>(<span class="hljs-comment">&quot;</span><br>./mydb.db<span class="hljs-comment">&quot;</span><br>,<br><span class="hljs-string">&quot;rb&quot;</span>)<br>s=<span class="hljs-keyword">f</span>.<span class="hljs-keyword">read</span>()<br><span class="hljs-keyword">f</span>.<span class="hljs-keyword">close</span>()<br><span class="hljs-keyword">p</span>=<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">x</span> in s:<br><span class="hljs-keyword">p</span>+=chr(<span class="hljs-keyword">x</span>^<span class="hljs-number">0</span>xff).encode()<br><span class="hljs-keyword">f</span>=<span class="hljs-keyword">open</span>(<span class="hljs-comment">&quot;</span><br>./mydb.db<span class="hljs-comment">&quot;</span><br>,<br><span class="hljs-string">&quot;wb&quot;</span>)<br><span class="hljs-keyword">f</span>.<span class="hljs-keyword">write</span>(<span class="hljs-keyword">p</span>)<br><span class="hljs-keyword">f</span>.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure><p>strings一下字符串：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">C:\Users\Administrator\Desktop&gt;strings C:\Users\Administrator\Desktop\mydb.db<br>Strings v2<span class="hljs-number">.54</span> - <span class="hljs-keyword">Search</span> <span class="hljs-keyword">for</span> ANSI <span class="hljs-keyword">and</span> Unicode strings <span class="hljs-keyword">in</span> binary images.<br>Copyright (C) <span class="hljs-number">1999</span><span class="hljs-number">-2021</span> Mark Russinovich<br>Sysinternals - www.sysinternals.com<br>SQLite <span class="hljs-keyword">format</span> <span class="hljs-number">3</span><br>@<br>.O&#125;<br>Ytablesqlite_sequencesqlite_sequence<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> sqlite_sequence(<span class="hljs-type">name</span>,seq)<br>tableUserUser<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">User</span> (<br>id <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">PRIMARY KEY</span> AUTOINCREMENT,<br>username <span class="hljs-type">TEXT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br><span class="hljs-keyword">password</span> <span class="hljs-type">TEXT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>indexsqlite_autoindex_User_1User<br>AflagXYCTF&#123;And0r1d_15_V3ryEasy&#125;<br>adminqweradmin<br>flag<br><span class="hljs-keyword">admin</span><br><span class="hljs-keyword">User</span><br><br></code></pre></td></tr></table></figure><h2 id="何须相思煮余年"><a href="#何须相思煮余年" class="headerlink" title="何须相思煮余年"></a>何须相思煮余年</h2><p><a href="https://defuse.ca/online-x86-assembler.htm%EF%BC%88%E8%BF%99%E9%87%8C%E6%94%BE%E4%B8%AA%E5%9C%A8%E7%BA%BF%E8%BD%AC%E6%8D%A2%E6%B1%87%E7%BC%96%E7%9A%84%E7%BD%91%E7%AB%99%EF%BC%89">https://defuse.ca/online-x86-assembler.htm（这里放个在线转换汇编的网站）</a></p><p>打开发现是一个txt文本，把数据转换成二进制形式</p><p>（这里扔个队友的脚本）</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dns">hex_data = &quot;<span class="hljs-number">0</span>x55 <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>xec <span class="hljs-number">0</span>x81 <span class="hljs-number">0</span>xec <span class="hljs-number">0</span>xa8 <span class="hljs-number">0x0 0x0</span> <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>xa1 <span class="hljs-number">0x0 0x40</span> <span class="hljs-number">0x41 0x0</span> <span class="hljs-number">0</span>x33 <span class="hljs-number">0</span>xc5 <span class="hljs-number">0x89 0x45</span> <span class="hljs-number">0</span>xfc <span class="hljs-number">0</span>x68 <span class="hljs-number">0</span>x9c <span class="hljs-number">0x0 0x0</span> <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x6a <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x8d <span class="hljs-number">0x85 0x60</span> <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x50 <span class="hljs-number">0</span>xe8 <span class="hljs-number">0</span>x7a <span class="hljs-number">0</span>xc <span class="hljs-number">0x0 0x0</span> <span class="hljs-number">0</span>x83 <span class="hljs-number">0</span>xc4 <span class="hljs-number">0</span>xc <span class="hljs-number">0</span>xc7 <span class="hljs-number">0x85 0x58</span> <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0x27 0x0</span> <span class="hljs-number">0x0 0x0</span> <span class="hljs-number">0</span>xc7 <span class="hljs-number">0</span>x85 <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0x0 0x0</span> <span class="hljs-number">0x0 0x0</span> <span class="hljs-number">0</span>xeb <span class="hljs-number">0</span>xf <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x8d <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x83 <span class="hljs-number">0</span>xc1 <span class="hljs-number">0x1 0x89</span> <span class="hljs-number">0</span>x8d <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x83 <span class="hljs-number">0</span>xbd <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x27 <span class="hljs-number">0</span>xf <span class="hljs-number">0</span>x8d <span class="hljs-number">0</span>xed <span class="hljs-number">0x0 0x0</span> <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x95 <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x81 <span class="hljs-number">0</span>xe2 <span class="hljs-number">0x3 0x0</span> <span class="hljs-number">0x0 0x80</span> <span class="hljs-number">0x79 0x5</span> <span class="hljs-number">0</span>x4a <span class="hljs-number">0</span>x83 <span class="hljs-number">0</span>xca <span class="hljs-number">0</span>xfc <span class="hljs-number">0x42 0x85</span> <span class="hljs-number">0</span>xd2 <span class="hljs-number">0x75 0x25</span> <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x85 <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x8c <span class="hljs-number">0x85 0x60</span> <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x3 <span class="hljs-number">0</span>x8d <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x95 <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x89 <span class="hljs-number">0</span>x8c <span class="hljs-number">0x95 0x60</span> <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xe9 <span class="hljs-number">0</span>xac <span class="hljs-number">0x0 0x0</span> <span class="hljs-number">0</span>x0 <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x85 <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0x25 0x3</span> <span class="hljs-number">0x0 0x0</span> <span class="hljs-number">0x80 0x79</span> <span class="hljs-number">0x5 0x48</span> <span class="hljs-number">0</span>x83 <span class="hljs-number">0</span>xc8 <span class="hljs-number">0</span>xfc <span class="hljs-number">0x40 0x83</span> <span class="hljs-number">0</span>xf8 <span class="hljs-number">0x1 0x75</span> <span class="hljs-number">0</span>x22 <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x8d <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x94 <span class="hljs-number">0</span>x8d <span class="hljs-number">0</span>x60 <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x2b <span class="hljs-number">0</span>x95 <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x85 <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0x89 0x94</span> <span class="hljs-number">0x85 0x60</span> <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xeb <span class="hljs-number">0</span>x73 <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x8d <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x81 <span class="hljs-number">0</span>xe1 <span class="hljs-number">0x3 0x0</span> <span class="hljs-number">0x0 0x80</span> <span class="hljs-number">0x79 0x5</span> <span class="hljs-number">0x49 0x83</span> <span class="hljs-number">0</span>xc9 <span class="hljs-number">0</span>xfc <span class="hljs-number">0x41 0x83</span> <span class="hljs-number">0</span>xf9 <span class="hljs-number">0x2 0x75</span> <span class="hljs-number">0</span>x23 <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x95 <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x8b <span class="hljs-number">0x84 0x95</span> <span class="hljs-number">0</span>x60 <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xf <span class="hljs-number">0</span>xaf <span class="hljs-number">0</span>x85 <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x8d <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0x89 0x84</span> <span class="hljs-number">0</span>x8d <span class="hljs-number">0</span>x60 <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xeb <span class="hljs-number">0</span>x38 <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x95 <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x81 <span class="hljs-number">0</span>xe2 <span class="hljs-number">0x3 0x0</span> <span class="hljs-number">0x0 0x80</span> <span class="hljs-number">0x79 0x5</span> <span class="hljs-number">0</span>x4a <span class="hljs-number">0</span>x83 <span class="hljs-number">0</span>xca <span class="hljs-number">0</span>xfc <span class="hljs-number">0x42 0x83</span> <span class="hljs-number">0</span>xfa <span class="hljs-number">0x3 0x75</span> <span class="hljs-number">0</span>x20 <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x85 <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x8c <span class="hljs-number">0x85 0x60</span> <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x33 <span class="hljs-number">0</span>x8d <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x95 <span class="hljs-number">0</span>x5c <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x89 <span class="hljs-number">0</span>x8c <span class="hljs-number">0x95 0x60</span> <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xe9 <span class="hljs-number">0</span>xf7 <span class="hljs-number">0</span>xfe <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x33 <span class="hljs-number">0</span>xc0 <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>x4d <span class="hljs-number">0</span>xfc <span class="hljs-number">0</span>x33 <span class="hljs-number">0</span>xcd <span class="hljs-number">0</span>xe8 <span class="hljs-number">0x4 0x0</span> <span class="hljs-number">0x0 0x0</span> <span class="hljs-number">0</span>x8b <span class="hljs-number">0</span>xe5 <span class="hljs-number">0</span>x5d <span class="hljs-number">0</span>xc3&quot;<br>\# 去除空格并将十六进制数据字符串分割成十六进制值的列表<br>hex_values = hex_data.split()<br>\# 将每个十六进制值转换为相应的整数值<br>int_values = [int(value, <span class="hljs-number">16</span>) for value in hex_values]<br>\# 将整数值列表转换为字节<br>binary_data = bytes(int_values)<br>\# 将二进制数据写入文件<br>with open(&quot;output&quot;, &quot;wb&quot;) as f:<br>  f.write(binary_data)<br></code></pre></td></tr></table></figure><p>将生成的文件拖入IDA,生成汇编指令</p><p>把两个call全部nop掉后生成伪代码</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404112321198.png" alt="image-20240411232152127"></p><p>逆回去就行</p><p>XYCTF{5b3e07567a9034d06851475481507a75}</p><p>这里看别人的wp好像还有个思路</p><p>贴个脚本</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs llvm">from pwn import *<br>context.arch <span class="hljs-operator">=</span> &#x27;<span class="hljs-type">i386</span>&#x27;<br>code <span class="hljs-operator">=</span><br>b&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">55</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\xec\<span class="hljs-keyword">x</span><span class="hljs-number">81</span>\xec\xa<span class="hljs-number">8</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\xa<span class="hljs-number">1</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">40</span>\<span class="hljs-keyword">x</span><span class="hljs-number">41</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">33</span>\xc<span class="hljs-number">5</span>\<span class="hljs-keyword">x</span><span class="hljs-number">89</span>\<span class="hljs-keyword">x</span><br><span class="hljs-number">45</span>\xfc\<span class="hljs-keyword">x</span><span class="hljs-number">68</span>\<span class="hljs-keyword">x</span><span class="hljs-number">9</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span>a\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><span class="hljs-number">60</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">50</span>\xe<span class="hljs-number">8</span>\<span class="hljs-keyword">x</span><span class="hljs-number">7</span>a\<span class="hljs-keyword">x</span><br><span class="hljs-number">0</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">83</span>\xc<span class="hljs-number">4</span>\<span class="hljs-keyword">x</span><span class="hljs-number">0</span><span class="hljs-keyword">c</span>\xc<span class="hljs-number">7</span>\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><span class="hljs-number">58</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">27</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\xc<span class="hljs-number">7</span>\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><br><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\xeb\<span class="hljs-keyword">x</span><span class="hljs-number">0</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">83</span>\xc<span class="hljs-number">1</span>\<span class="hljs-keyword">x</span><br><span class="hljs-number">01</span>\<span class="hljs-keyword">x</span><span class="hljs-number">89</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">83</span>\xbd\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">27</span>\<span class="hljs-keyword">x</span><span class="hljs-number">0</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>d\xed\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><br><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">81</span>\xe<span class="hljs-number">2</span>\<span class="hljs-keyword">x</span><span class="hljs-number">03</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>\<span class="hljs-keyword">x</span><span class="hljs-number">79</span>\<span class="hljs-keyword">x</span><span class="hljs-number">05</span>\<span class="hljs-keyword">x</span><span class="hljs-number">4</span>a\<span class="hljs-keyword">x</span><span class="hljs-number">83</span>\<span class="hljs-keyword">x</span><br>ca\xfc\<span class="hljs-keyword">x</span><span class="hljs-number">42</span>\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\xd<span class="hljs-number">2</span>\<span class="hljs-keyword">x</span><span class="hljs-number">75</span>\<span class="hljs-keyword">x</span><span class="hljs-number">25</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><span class="hljs-number">60</span>\xff\<span class="hljs-keyword">x</span><br>ff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">03</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">89</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>\<span class="hljs-keyword">x</span><span class="hljs-number">60</span>\<span class="hljs-keyword">x</span><br>ff\xff\xff\xe<span class="hljs-number">9</span>\xac\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">25</span>\<span class="hljs-keyword">x</span><span class="hljs-number">03</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><br><span class="hljs-number">80</span>\<span class="hljs-keyword">x</span><span class="hljs-number">79</span>\<span class="hljs-keyword">x</span><span class="hljs-number">05</span>\<span class="hljs-keyword">x</span><span class="hljs-number">48</span>\<span class="hljs-keyword">x</span><span class="hljs-number">83</span>\xc<span class="hljs-number">8</span>\xfc\<span class="hljs-keyword">x</span><span class="hljs-number">40</span>\<span class="hljs-keyword">x</span><span class="hljs-number">83</span>\xf<span class="hljs-number">8</span>\<span class="hljs-keyword">x</span><span class="hljs-number">01</span>\<span class="hljs-keyword">x</span><span class="hljs-number">75</span>\<span class="hljs-keyword">x</span><span class="hljs-number">22</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\<span class="hljs-keyword">x</span><br>ff\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">60</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">2</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\<span class="hljs-keyword">x</span><br>ff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">89</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><span class="hljs-number">60</span>\xff\xff\xff\xeb\<span class="hljs-keyword">x</span><span class="hljs-number">73</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">81</span>\<span class="hljs-keyword">x</span><br>e<span class="hljs-number">1</span>\<span class="hljs-keyword">x</span><span class="hljs-number">03</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>\<span class="hljs-keyword">x</span><span class="hljs-number">79</span>\<span class="hljs-keyword">x</span><span class="hljs-number">05</span>\<span class="hljs-keyword">x</span><span class="hljs-number">49</span>\<span class="hljs-keyword">x</span><span class="hljs-number">83</span>\xc<span class="hljs-number">9</span>\xfc\<span class="hljs-keyword">x</span><span class="hljs-number">41</span>\<span class="hljs-keyword">x</span><span class="hljs-number">83</span>\xf<span class="hljs-number">9</span>\<span class="hljs-keyword">x</span><span class="hljs-number">02</span>\<span class="hljs-keyword">x</span><span class="hljs-number">75</span>\<span class="hljs-keyword">x</span><span class="hljs-number">23</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><br><span class="hljs-number">95</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">84</span>\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>\<span class="hljs-keyword">x</span><span class="hljs-number">60</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">0</span>f\xaf\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\<span class="hljs-keyword">x</span><br>ff\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">89</span>\<span class="hljs-keyword">x</span><span class="hljs-number">84</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">60</span>\xff\xff\xff\xeb\<span class="hljs-keyword">x</span><span class="hljs-number">38</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>\<span class="hljs-keyword">x</span><br><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">81</span>\xe<span class="hljs-number">2</span>\<span class="hljs-keyword">x</span><span class="hljs-number">03</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>\<span class="hljs-keyword">x</span><span class="hljs-number">79</span>\<span class="hljs-keyword">x</span><span class="hljs-number">05</span>\<span class="hljs-keyword">x</span><span class="hljs-number">4</span>a\<span class="hljs-keyword">x</span><span class="hljs-number">83</span>\xca\xfc\<span class="hljs-keyword">x</span><span class="hljs-number">42</span>\<span class="hljs-keyword">x</span><span class="hljs-number">83</span>\<span class="hljs-keyword">x</span><br>fa\<span class="hljs-keyword">x</span><span class="hljs-number">03</span>\<span class="hljs-keyword">x</span><span class="hljs-number">75</span>\<span class="hljs-keyword">x</span><span class="hljs-number">20</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><span class="hljs-number">60</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">33</span>\<span class="hljs-keyword">x</span><br><span class="hljs-number">8</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span>\xff\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">89</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>\<span class="hljs-keyword">x</span><span class="hljs-number">60</span>\xff\xff\xff\<span class="hljs-keyword">x</span><br>e<span class="hljs-number">9</span>\xf<span class="hljs-number">7</span>\xfe\xff\xff\<span class="hljs-keyword">x</span><span class="hljs-number">33</span>\xc<span class="hljs-number">0</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">4</span>d\xfc\<span class="hljs-keyword">x</span><span class="hljs-number">33</span>\xcd\xe<span class="hljs-number">8</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b\<span class="hljs-keyword">x</span><br>e<span class="hljs-number">5</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>d\xc<span class="hljs-number">3</span>&#x27;<br>assembly <span class="hljs-operator">=</span> disasm(code)<br>print(assembly)<br></code></pre></td></tr></table></figure><h2 id="砸核桃"><a href="#砸核桃" class="headerlink" title="砸核桃"></a>砸核桃</h2><p>先找工具脱个壳</p><p>网上能找到的是能脱3.几的版本的</p><p>打开以后直接看逻辑写脚本即可</p><p>（注意字符类型）</p><h2 id="今夕是何年"><a href="#今夕是何年" class="headerlink" title="今夕是何年"></a>今夕是何年</h2><p>懒得配了，贴点官方的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">main</span>: ELF <span class="hljs-number">64</span>-bit LSB executable, LoongArch, version <span class="hljs-number">1</span> (GNU/Linux), statically linked,<br><span class="hljs-attribute">BuildID</span>[sha1]=d5e0c55633e219eba65de1d09a45173c22668739, for GNU/Linux <span class="hljs-number">5</span>.<span class="hljs-number">19</span>.<span class="hljs-number">0</span>,<br><span class="hljs-attribute">with</span> debug_info, not stripped<br></code></pre></td></tr></table></figure><p>可以看到这是一个 LoongArch 架构的 ELF 二进制文件，所以我们需要一个 LoongArch 架构的 环境来运行这个文件。当然，你可以真的买一块 LoongArch 架构的 CPU（如龙芯 3A6000）来 运行这个程序，但是更方便的做法是使用 QEMU，一个可以仿真各种架构的虚拟机程序。 顺便一提，如果你真的选择买一块龙芯 CPU 来运行这个程序的话，你多半会遇到新世界和旧世界 的兼容性问题。这个文件是一个新世界程序，所以需要新世界的操作系统来运行，如果你使用旧 世界的操作系统（如此时此刻的 Loongnix 和 UOS），那么这个程序是无法运行的。 如果你想详细了解这方面，推荐阅读 <a href="https://areweloongyet.com/docs/old-and-new-worlds/%E7%9A%84%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E3%80%82">https://areweloongyet.com/docs/old-and-new-worlds/的相关资料。</a> QEMU 分为用户态和系统态两种模式。因为 main 是一个静态编译的二进制文件（你可以使用 ldd 得知这一点），你只需要使用用户态就可以完成这道题了。首先，你需要一个 Linux 环境 （只要 x86-64 就可以了），你可以通过搜索引擎或文档来查询如何在你使用的 Linux 发行版上 配置用户态的 QEMU。对于 Kali Linux 来说，你需要安装 qemu-user 软件包，然后只需要给 main 文件加上可执行权限，再使用 .&#x2F;main 运行就可以得到 flag 了。 当然，你也可以使用系统态的 QEMU 完成这道题，但是我没有试过。如果你有兴趣可以自行尝 试 </p><p>kali指令如下： </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">apt install qemu-<span class="hljs-keyword">user</span><br><br> <span class="hljs-title">chmod</span> <span class="hljs-number">777</span> ./*<br><br> ./main<br></code></pre></td></tr></table></figure><h2 id="简爱"><a href="#简爱" class="headerlink" title="简爱"></a>简爱</h2><p>IDA打开以后发现没有办法进行调试，在kali上面运行发现</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404202200097.png" alt="image-20240420220051991"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404202212111.png"></p><p>经过搜索发现 LSB relocatable为可重定位文件，经过分析发现是.o文件</p><p>在kali上面gcc -o 目标文件名 待执行文件 </p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404202210722.png" alt="image-20240420221009694"></p><p>然后运行发现可以执行了(可调试)</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404232059673.png" alt="image-20240423205901567"></p><p>然后发现其实上面两个加密函数并没有起任何作用（最后拿高版本的IDA开，发现最开始做的时候白分析了上面两个加密函数，错付了……）直接相当于howtolove对输入字符进行加密</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404232114151.png" alt="image-20240423211401090"></p><p>查看函数</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404232115029.png" alt="image-20240423211519979"></p><p>可以考虑先复刻一遍加密逻辑然后在加密的代码里面的时候打印出解密脚本</p><p>这个地方注意count1 和 count2 即为将循环结束后flag被++的次数</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><code class="hljs smali">\<span class="hljs-comment">#include &lt;stdio.h&gt;</span><br> \<span class="hljs-comment">#include &lt;string.h&gt;</span><br> \<span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br> \<span class="hljs-comment">#include &lt;time.h&gt;</span><br><br> \<span class="hljs-comment">#define MAX_BUFFER_SIZE 512</span><br> \<span class="hljs-comment">#define MAX_FILENAME_LENGTH 40</span><br><br> char box[MAX_BUFFER_SIZE];<br> char FileNamein[MAX_FI<span class="hljs-class">LENAME_LENGTH];</span><br> char Filenameout[MAX_FI<span class="hljs-class">LENAME_LENGTH];</span><br><br><span class="hljs-built_in"> int </span>howtolove(char *flag)<br> &#123;<br>  <span class="hljs-built_in"> int </span>v2[1802];<br>  <span class="hljs-built_in"> int </span>v3;<br>  <span class="hljs-built_in"> int </span>v4;<br>  <span class="hljs-built_in"> int </span>count1, count2;<br><br>   memset(v2, 0, sizeof(v2));<br><br>   // Initialize elements of v2<span class="hljs-built_in"> array</span><br><span class="hljs-built_in"></span>   v2[32] = 2;<br>   v2[65] = 2;<br>   v2[66] = 4;<br>   v2[98] = 2;<br>   v2[99] = 5;<br>   v2[185] = 2;<br>   v2[186] = 2;<br>   v2[187] = 1;<br>   v2[188] = 1;<br>   v2[189] = 1;<br>   v2[190] = 1;<br>   v2[191] = 1;<br>   v2[192] = 1;<br>   v2[193] = 1;<br>   v2[194] = 1;<br>   v2[195] = 1;<br>   v2[196] = 1;<br>   v2[197] = 1;<br>   v2[198] = 1;<br>   v2[199] = 1;<br>   v2[200] = 1;<br>   v2[201] = 1;<br>   v2[202] = 1;<br>   v2[203] = 1;<br>   v2[204] = 1;<br>   v2[205] = 1;<br>   v2[206] = 1;<br>   v2[207] = 1;<br>   v2[208] = 1;<br>   v2[209] = 1;<br>   v2[210] = 1;<br>   v2[211] = 1;<br>   v2[212] = 1;<br>   v2[213] = 1;<br>   v2[214] = 1;<br>   v2[215] = 1;<br>   v2[216] = 1;<br>   v2[217] = 1;<br>   v2[218] = 1;<br>   v2[219] = 1;<br>   v2[220] = 1;<br>   v2[221] = 1;<br>   v2[222] = 1;<br>   v2[223] = 1;<br>   v2[224] = 1;<br>   v2[225] = 1;<br>   v2[226] = 1;<br>   v2[227] = 1;<br>   v2[228] = 1;<br>   v2[229] = 2;<br>   v2[232] = 2;<br>   v2[256] = 2;<br>   v2[257] = 5;<br>   v2[303] = 1;<br>   v2[304] = 1;<br>   v2[305] = 1;<br>   v2[306] = 1;<br>   v2[307] = 2;<br>   v2[308] = 5;<br>   v2[328] = 1;<br>   v2[329] = 1;<br>   v2[330] = 1;<br>   v2[331] = 1;<br>   v2[332] = 1;<br>   v2[333] = 1;<br>   v2[334] = 1;<br>   v2[335] = 1;<br>   v2[336] = 1;<br>   v2[337] = 1;<br>   v2[338] = 1;<br>   v2[339] = 1;<br>   v2[340] = 1;<br>   v2[341] = 1;<br>   v2[342] = 2;<br>   v2[353] = 2;<br>   v2[354] = 5;<br>   v2[430] = 2;<br>   v2[431] = 2;<br>   v2[432] = 5;<br>   v2[523] = 2;<br>   v2[524] = 5;<br>   v2[564] = 2;<br>   v2[565] = 5;<br>   v2[627] = 2;<br>   v2[628] = 1;<br>   v2[629] = 1;<br>   v2[630] = 1;<br>   v2[631] = 1;<br>   v2[632] = 1;<br>   v2[633] = 1;<br>   v2[634] = 1;<br>   v2[635] = 1;<br>   v2[636] = 1;<br>   v2[637] = 1;<br>   v2[638] = 1;<br>   v2[639] = 1;<br>   v2[640] = 1;<br>   v2[641] = 1;<br>   v2[642] = 1;<br>   v2[643] = 1;<br>   v2[644] = 1;<br>   v2[645] = 1;<br>   v2[646] = 1;<br>   v2[647] = 2;<br>   v2[648] = 4;<br>   v2[649] = 1;<br>   v2[650] = 1;<br>   v2[651] = 1;<br>   v2[652] = 1;<br>   v2[653] = 2;<br>   v2[680] = 2;<br>   v2[687] = 2;<br>   v2[688] = 4;<br>   v2[698] = 2;<br>   v2[766] = 2;<br>   v2[767] = 5;<br>   v2[818] = 2;<br>   v2[819] = 1;<br>   v2[820] = 2;<br>   v2[827] = 2;<br>   v2[828] = 5;<br>   v2[846] = 2;<br>   v2[847] = 5;<br>   v2[890] = 2;<br>   v2[891] = 1;<br>   v2[892] = 1;<br>   v2[893] = 1;<br>   v2[894] = 1;<br>   v2[895] = 1;<br>   v2[896] = 1;<br>   v2[897] = 1;<br>   v2[898] = 1;<br>   v2[899] = 1;<br>   v2[900] = 1;<br>   v2[901] = 1;<br>   v2[902] = 1;<br>   v2[903] = 1;<br>   v2[904] = 1;<br>   v2[905] = 1;<br>   v2[906] = 1;<br>   v2[907] = 1;<br>   v2[908] = 1;<br>   v2[909] = 1;<br>   v2[910] = 1;<br>   v2[911] = 1;<br>   v2[912] = 1;<br>   v2[913] = 1;<br>   v2[914] = 1;<br>   v2[915] = 1;<br>   v2[916] = 1;<br>   v2[917] = 1;<br>   v2[918] = 1;<br>   v2[919] = 1;<br>   v2[920] = 1;<br>   v2[921] = 1;<br>   v2[922] = 1;<br>   v2[923] = 1;<br>   v2[924] = 1;<br>   v2[925] = 1;<br>   v2[926] = 1;<br>   v2[927] = 1;<br>   v2[928] = 1;<br>   v2[929] = 1;<br>   v2[930] = 1;<br>   v2[931] = 1;<br>   v2[932] = 1;<br>   v2[933] = 2;<br>   v2[934] = 5;<br>   v2[989] = 2;<br>   v2[994] = 2;<br>   v2[995] = 1;<br>   v2[996] = 1;<br>   v2[997] = 1;<br>   v2[998] = 1;<br>   v2[999] = 1;<br>   v2[1000] = 1;<br>   v2[1001] = 1;<br>   v2[1002] = 1;<br>   v2[1003] = 1;<br>   v2[1013] = 1;<br>   v2[1014] = 1;<br>   v2[1015] = 1;<br>   v2[1016] = 1;<br>   v2[1017] = 1;<br>   v2[1018] = 1;<br>   v2[1019] = 1;<br>   v2[1020] = 1;<br>   v2[1021] = 1;<br>   v2[1022] = 1;<br>   v2[1023] = 1;<br>   v2[1024] = 1;<br>   v2[1025] = 1;<br>   v2[1026] = 1;<br>   v2[1027] = 2;<br>   v2[1028] = 3;<br><br>   v4 = 0;<br>   v3 = 0;<br><br>   while (1)<br>   &#123;<br>     while (1)<br>     &#123;<br>       count2 = 0;<br>       while (1)<br>       &#123;<br>         count1 = 0;<br>         while (!v2[v3])<br>         &#123;<br>           v3++;<br>           ++flag[v4];<br>           count1++;<br>         &#125;<br>        <span class="hljs-built_in"> if </span>(count1 != 0)<br>         &#123;<br>           printf(<span class="hljs-string">&quot;flag[%d] -= %d;\n&quot;</span>, v4, count1);<br>         &#125;<br>        <span class="hljs-built_in"> if </span>(v2[v3] != 1)<br>           break;<br>         v3++;<br>         count2++;<br>         --flag[v4];<br>       &#125;<br>      <span class="hljs-built_in"> if </span>(count2 != 0)<br>       &#123;<br>         printf(<span class="hljs-string">&quot;flag[%d] += %d;\n&quot;</span>, v4, count2);<br>       &#125;<br>      <span class="hljs-built_in"> if </span>(v2[v3] != 2)<br>         break;<br>       ++v3;<br>       ++v4;<br>       &#125;<br>    <span class="hljs-built_in"> if </span>( v2[v3]==3) <br>       break;<br>      <span class="hljs-built_in"> if </span>( v2[v3]==4)<br>         &#123;<br>           flag[v4] = flag[v4] + flag[v4 + 1] - 70;<br>           printf(<span class="hljs-string">&quot;flag[%d] = flag[%d] + 70 - flag[%d];\n&quot;</span>,v4,v4,v4+1);<br>           ++v3;<br>         &#125;<br>         else<span class="hljs-built_in"> if </span>( v2[v3]==5)<br>           &#123;<br>             flag[v4] = flag[v4] - flag[v4 + 1] + 70;<br>             printf(<span class="hljs-string">&quot;flag[%d] = flag[%d] - 70 + flag[%d];\n&quot;</span>,v4,v4,v4+1);<br>             ++v3;<br>           &#125;<br>   &#125;<br>  <span class="hljs-built_in"> return </span>0;<br> &#125;<br><span class="hljs-built_in"> int </span>main()<br> &#123;<br>   char flag[33] = <span class="hljs-string">&quot;flag&#123;Love_is_not_one_sided_Love&#125;&quot;</span>;<br>   howtolove(flag);<br>  <span class="hljs-built_in"> return </span>0;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>打印出结果</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404232118153.png" alt="image-20240423211845045"></p><p>这个即为解密逻辑，调整一下代码顺序即可</p><p>注意一下这种</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404232126626.png" alt="image-20240423212629581"></p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stan">\<span class="hljs-meta">#include <span class="hljs-string">int</span> <span class="hljs-string">main</span>()&#123; <span class="hljs-string">unsigned</span> <span class="hljs-string">char</span> <span class="hljs-string">flag</span>[] = &quot;<span class="hljs-string">flag</span>&#123;L<span class="hljs-string">ove_is_not_one_sided_</span>L<span class="hljs-string">ove</span>&#125;&quot;; <span class="hljs-string">flag</span>[28] -= 54; <span class="hljs-string">flag</span>[29] -= 4; <span class="hljs-string">flag</span>[30] -= 9; <span class="hljs-string">flag</span>[30] += 23; <span class="hljs-string">flag</span>[28] = <span class="hljs-string">flag</span>[28] - 70 + <span class="hljs-string">flag</span>[29]; <span class="hljs-string">flag</span>[26] -= 42; <span class="hljs-string">flag</span>[27] += 42; <span class="hljs-string">flag</span>[26] = <span class="hljs-string">flag</span>[26] - 70 + <span class="hljs-string">flag</span>[27]; <span class="hljs-string">flag</span>[25] -= 17; <span class="hljs-string">flag</span>[25] = <span class="hljs-string">flag</span>[25] - 70 + <span class="hljs-string">flag</span>[26]; <span class="hljs-string">flag</span>[22] -= 50; <span class="hljs-string">flag</span>[23] += 1; <span class="hljs-string">flag</span>[24] -= 6; <span class="hljs-string">flag</span>[22] = <span class="hljs-string">flag</span>[22] - 70 + <span class="hljs-string">flag</span>[23]; <span class="hljs-string">flag</span>[20] -= 9; <span class="hljs-string">flag</span>[21] -= 67; <span class="hljs-string">flag</span>[20] = <span class="hljs-string">flag</span>[20] + 70 - <span class="hljs-string">flag</span>[21]; <span class="hljs-string">flag</span>[17] += 4; <span class="hljs-string">flag</span>[18] -= 26; <span class="hljs-string">flag</span>[19] -= 6; <span class="hljs-string">flag</span>[17] = <span class="hljs-string">flag</span>[17] + 70 - <span class="hljs-string">flag</span>[18]; <span class="hljs-string">flag</span>[15] -= 61; <span class="hljs-string">flag</span>[16] += 19; <span class="hljs-string">flag</span>[15] = <span class="hljs-string">flag</span>[15] - 70 + <span class="hljs-string">flag</span>[16]; <span class="hljs-string">flag</span>[14] -= 39; <span class="hljs-string">flag</span>[14] = <span class="hljs-string">flag</span>[14] - 70 + <span class="hljs-string">flag</span>[15]; <span class="hljs-string">flag</span>[13] -= 90; <span class="hljs-string">flag</span>[13] = (<span class="hljs-string">flag</span>[13]+256)%256; <span class="hljs-string">flag</span>[11] -= 75; <span class="hljs-string">flag</span>[11] = <span class="hljs-string">flag</span>[11] - 70 + <span class="hljs-string">flag</span>[12]; <span class="hljs-string">flag</span>[9] -= 19; <span class="hljs-string">flag</span>[9] += 14; <span class="hljs-string">flag</span>[10] -= 10; <span class="hljs-string">flag</span>[9] = <span class="hljs-string">flag</span>[9] - 70 + <span class="hljs-string">flag</span>[10]; <span class="hljs-string">flag</span>[8] -= 45; <span class="hljs-string">flag</span>[8] += 4; <span class="hljs-string">flag</span>[8] = <span class="hljs-string">flag</span>[8] - 70 + <span class="hljs-string">flag</span>[9]; <span class="hljs-string">flag</span>[3] -= 85; <span class="hljs-string">flag</span>[5] += 42; <span class="hljs-string">flag</span>[6] -= 2; <span class="hljs-string">flag</span>[7] -= 23; <span class="hljs-string">flag</span>[3] = <span class="hljs-string">flag</span>[3] - 70 + <span class="hljs-string">flag</span>[4]; <span class="hljs-string">flag</span>[2] -= 31; <span class="hljs-string">flag</span>[2] = <span class="hljs-string">flag</span>[2] + 70 - <span class="hljs-string">flag</span>[3]; <span class="hljs-string">flag</span>[1] -= 32; <span class="hljs-string">flag</span>[0] -= 32; <span class="hljs-string">int</span> i = 0; <span class="hljs-string">for</span> (;i&lt;32;i ) <span class="hljs-string">printf</span>(&quot;%c&quot;,<span class="hljs-string">flag</span>[i]); <span class="hljs-string">return</span> 0; &#125;</span><br><br><br></code></pre></td></tr></table></figure><h2 id="ezmath"><a href="#ezmath" class="headerlink" title="ezmath"></a>ezmath</h2><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404281409750.png" alt="image-20240428140957713"></p><p>使用pyinstxtractor进行python的解包，反编译（py文件和题目放同一个路径哈）</p><p>可以打开IDA在字符串界面看看，含py字样</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404281517732.png" alt="image-20240428151714594"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404281412868.png" alt="image-20240428141222826"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404281413883.png" alt="image-20240428141328828"></p><p>找到题目相同名字的pyc文件</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404281416906.png"></p><p> sum([flag[23] for _ in range(flag[23])])：</p><p>这是一个列表推导式，它创建了一个新列表，其中包含了<code>flag[23]</code>这个值重复<code>flag[23]</code>次。也就是说，如果<code>flag[23]</code>的值是<code>n</code>，那么这个新列表就会有<code>n</code>个<code>n</code>。即为n*n</p><p>这一大堆东西整理出来应该是</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">(flag<span class="hljs-selector-attr">[i]</span>*flag<span class="hljs-selector-attr">[i]</span>)<span class="hljs-built_in">-</span>(flag<span class="hljs-selector-attr">[i]</span>*num)<br></code></pre></td></tr></table></figure><p>配个方然后发现297412符合，可以直接flag[i]的值</p><p>这个题我们拿z3跑出来的</p><p>看到群里说Int型是跑不出来的，要用real</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs gcode">real型的<br>from z<span class="hljs-number">3</span> import * <span class="hljs-attr"># 创建⼀个Z3</span>求解器 <br>solver = Solver<span class="hljs-comment">()</span> <span class="hljs-attr"># 定义32</span>个<span class="hljs-number">32</span>位的变量 <br>fla<span class="hljs-name">g0</span> = Real<span class="hljs-comment">(&#x27;flag0&#x27;)</span><br>fla<span class="hljs-name">g1</span> = Real<span class="hljs-comment">(&#x27;flag1&#x27;)</span> <br>fla<span class="hljs-name">g2</span> = Real<span class="hljs-comment">(&#x27;flag2&#x27;)</span> <br>fla<span class="hljs-name">g3</span> = Real<span class="hljs-comment">(&#x27;flag3&#x27;)</span><br>fla<span class="hljs-name">g4</span> = Real<span class="hljs-comment">(&#x27;flag4&#x27;)</span> <br>fla<span class="hljs-name">g5</span> = Real<span class="hljs-comment">(&#x27;flag5&#x27;)</span> <br>fla<span class="hljs-name">g6</span> = Real<span class="hljs-comment">(&#x27;flag6&#x27;)</span> <br>fla<span class="hljs-name">g7</span> = Real<span class="hljs-comment">(&#x27;flag7&#x27;)</span><br>fla<span class="hljs-name">g8</span> = Real<span class="hljs-comment">(&#x27;flag8&#x27;)</span> <br>fla<span class="hljs-name">g9</span> = Real<span class="hljs-comment">(&#x27;flag9&#x27;)</span> <br>fla<span class="hljs-name">g10</span> = Real<span class="hljs-comment">(&#x27;flag10&#x27;)</span> <br>fla<span class="hljs-name">g11</span> = Real<span class="hljs-comment">(&#x27;flag11&#x27;)</span> <br>fla<span class="hljs-name">g12</span> = Real<span class="hljs-comment">(&#x27;flag12&#x27;)</span><br>fla<span class="hljs-name">g13</span> = Real<span class="hljs-comment">(&#x27;flag13&#x27;)</span><br>fla<span class="hljs-name">g14</span> = Real<span class="hljs-comment">(&#x27;flag14&#x27;)</span> <br>fla<span class="hljs-name">g15</span> = Real<span class="hljs-comment">(&#x27;flag15&#x27;)</span><br>fla<span class="hljs-name">g16</span> = Real<span class="hljs-comment">(&#x27;flag16&#x27;)</span><br>fla<span class="hljs-name">g17</span> = Real<span class="hljs-comment">(&#x27;flag17&#x27;)</span><br>fla<span class="hljs-name">g18</span> = Real<span class="hljs-comment">(&#x27;flag18&#x27;)</span><br>fla<span class="hljs-name">g19</span> = Real<span class="hljs-comment">(&#x27;flag19&#x27;)</span><br>fla<span class="hljs-name">g20</span> = Real<span class="hljs-comment">(&#x27;flag20&#x27;)</span><br>fla<span class="hljs-name">g21</span> = Real<span class="hljs-comment">(&#x27;flag21&#x27;)</span><br>fla<span class="hljs-name">g22</span> = Real<span class="hljs-comment">(&#x27;flag22&#x27;)</span><br>fla<span class="hljs-name">g23</span> = Real<span class="hljs-comment">(&#x27;flag23&#x27;)</span><br>fla<span class="hljs-name">g24</span> = Real<span class="hljs-comment">(&#x27;flag24&#x27;)</span><br>fla<span class="hljs-name">g25</span> = Real<span class="hljs-comment">(&#x27;flag25&#x27;)</span><br>fla<span class="hljs-name">g26</span> = Real<span class="hljs-comment">(&#x27;flag26&#x27;)</span><br>fla<span class="hljs-name">g27</span> = Real<span class="hljs-comment">(&#x27;flag27&#x27;)</span><br>fla<span class="hljs-name">g28</span> = Real<span class="hljs-comment">(&#x27;flag28&#x27;)</span><br>fla<span class="hljs-name">g29</span> = Real<span class="hljs-comment">(&#x27;flag29&#x27;)</span><br>fla<span class="hljs-name">g30</span> = Real<span class="hljs-comment">(&#x27;flag30&#x27;)</span><br>fla<span class="hljs-name">g31</span> = Real<span class="hljs-comment">(&#x27;flag31&#x27;)</span><br>solver.add<span class="hljs-comment">((flag23 * flag23)</span> + <span class="hljs-comment">(flag12 * flag12)</span> + <span class="hljs-comment">(flag1 * flag1)</span> -<br><span class="hljs-comment">(222 * flag24)</span> + <span class="hljs-comment">(flag22 * flag22)</span> + <span class="hljs-comment">(flag31 * flag31)</span> + <span class="hljs-comment">(flag26 *</span><br><span class="hljs-comment">flag26)</span> - <span class="hljs-comment">(178 * flag9)</span> - <span class="hljs-comment">(232 * flag29)</span> + <span class="hljs-comment">(flag17 * flag17)</span> - <span class="hljs-comment">(150 *</span><br><span class="hljs-comment">flag23)</span> - <span class="hljs-comment">(226 * flag6)</span> - <span class="hljs-comment">(110 * flag7)</span> + <span class="hljs-comment">(flag19 * flag19)</span> + <span class="hljs-comment">(flag2 *</span><br><span class="hljs-comment">flag2)</span> - <span class="hljs-comment">(176 * flag0)</span> + <span class="hljs-comment">(flag10 * flag10)</span> - <span class="hljs-comment">(198 * flag12)</span> + <span class="hljs-comment">(flag24 *</span><br><span class="hljs-comment">flag24)</span> + <span class="hljs-comment">(flag9 * flag9)</span> - <span class="hljs-comment">(168 * flag3)</span> + <span class="hljs-comment">(flag8 * flag8)</span> - <span class="hljs-comment">(134 *</span><br><span class="hljs-comment">flag2)</span> + <span class="hljs-comment">(flag14 * flag14)</span> - <span class="hljs-comment">(170 * flag13)</span> + <span class="hljs-comment">(flag4 * flag4)</span> - <span class="hljs-comment">(142 *</span><br><span class="hljs-comment">flag10)</span> + <span class="hljs-comment">(flag27 * flag27)</span> + <span class="hljs-comment">(flag15 * flag15)</span> - <span class="hljs-comment">(224 * flag15)</span> +<br><span class="hljs-comment">(flag16 * flag16)</span> - <span class="hljs-comment">(230 * flag11)</span> - <span class="hljs-comment">(178 * flag1)</span> + <span class="hljs-comment">(flag28 * flag28)</span> -<br><span class="hljs-comment">(246 * flag5)</span> - <span class="hljs-comment">(168 * flag17)</span> + <span class="hljs-comment">(flag30 * flag30)</span> - <span class="hljs-comment">(220 * flag21)</span> -<br><span class="hljs-comment">(212 * flag22)</span> - <span class="hljs-comment">(232 * flag16)</span> + <span class="hljs-comment">(flag25 * flag25)</span> - <span class="hljs-comment">(140 * flag4)</span> -<br><span class="hljs-comment">(250 * flag31)</span> - <span class="hljs-comment">(150 * flag28)</span> + <span class="hljs-comment">(flag11 * flag11)</span> + <span class="hljs-comment">(flag13 * flag13)</span><br>- <span class="hljs-comment">(234 * flag14)</span> + <span class="hljs-comment">(flag7 * flag7)</span> - <span class="hljs-comment">(174 * flag8)</span> + <span class="hljs-comment">(flag3 * flag3)</span> -<br><span class="hljs-comment">(242 * flag25)</span> + <span class="hljs-comment">(flag29 * flag29)</span> + <span class="hljs-comment">(flag5 * flag5)</span> - <span class="hljs-comment">(142 * flag30)</span> -<br><span class="hljs-comment">(170 * flag26)</span> - <span class="hljs-comment">(176 * flag19)</span> + <span class="hljs-comment">(flag0 * flag0)</span> - <span class="hljs-comment">(168 * flag27)</span> +<br><span class="hljs-comment">(flag20 * flag20)</span> - <span class="hljs-comment">(212 * flag20)</span> + <span class="hljs-comment">(flag21 * flag21)</span> + <span class="hljs-comment">(flag6 * flag6)</span><br>+ <span class="hljs-comment">(flag18 * flag18)</span> - <span class="hljs-comment">(178 * flag18)</span> + <span class="hljs-number">297412</span> == <span class="hljs-number">0</span>)<br><span class="hljs-attr"># 检查是否存在解</span><br><span class="hljs-attr">if solver.check() == sat:</span><br><span class="hljs-attr"># 获取解</span><br><span class="hljs-attr">model = solver.model()</span><br><span class="hljs-attr">print(model)</span><br><span class="hljs-attr">else:</span><br><span class="hljs-attr">print(&quot;No solution&quot;)</span><br></code></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">Int</span>型的<br>from z3.z3 import <span class="hljs-symbol">Int</span>, <span class="hljs-symbol">Solver</span>, sat<br>flag = [<span class="hljs-symbol">Int</span>(f<span class="hljs-string">&quot;flag[&#123;i&#125;]&quot;</span>) for i in range(<span class="hljs-number">32</span>)]<br>solver = <span class="hljs-symbol">Solver</span>()<br>solver.add(<br>flag[<span class="hljs-number">23</span>] * (flag[<span class="hljs-number">23</span>]) +<br>flag[<span class="hljs-number">12</span>] * (flag[<span class="hljs-number">12</span>]) +<br>flag[<span class="hljs-number">1</span>] * (flag[<span class="hljs-number">1</span>]) -<br>flag[<span class="hljs-number">24</span>] * <span class="hljs-number">222</span> +<br>flag[<span class="hljs-number">22</span>] * (flag[<span class="hljs-number">22</span>]) +<br>flag[<span class="hljs-number">31</span>] * (flag[<span class="hljs-number">31</span>]) +<br>flag[<span class="hljs-number">26</span>] * (flag[<span class="hljs-number">26</span>]) -<br>flag[<span class="hljs-number">9</span>] * <span class="hljs-number">178</span> -<br>flag[<span class="hljs-number">29</span>] * <span class="hljs-number">232</span> +<br>flag[<span class="hljs-number">17</span>] * (flag[<span class="hljs-number">17</span>]) -<br>flag[<span class="hljs-number">23</span>] * <span class="hljs-number">150</span> -<br>flag[<span class="hljs-number">6</span>] * <span class="hljs-number">226</span> -<br>flag[<span class="hljs-number">7</span>] * <span class="hljs-number">110</span> +<br>flag[<span class="hljs-number">19</span>] * (flag[<span class="hljs-number">19</span>]) +<br>flag[<span class="hljs-number">2</span>] * (flag[<span class="hljs-number">2</span>]) -<br>flag[<span class="hljs-number">0</span>] * <span class="hljs-number">176</span> +<br>flag[<span class="hljs-number">10</span>] * (flag[<span class="hljs-number">10</span>]) -<br>flag[<span class="hljs-number">12</span>] * <span class="hljs-number">198</span> +<br>flag[<span class="hljs-number">24</span>] * (flag[<span class="hljs-number">24</span>]) +<br>flag[<span class="hljs-number">9</span>] * (flag[<span class="hljs-number">9</span>]) -<br>flag[<span class="hljs-number">3</span>] * <span class="hljs-number">168</span> +<br>flag[<span class="hljs-number">8</span>] * (flag[<span class="hljs-number">8</span>]) -<br>flag[<span class="hljs-number">2</span>] * <span class="hljs-number">134</span> +<br>flag[<span class="hljs-number">14</span>] * (flag[<span class="hljs-number">14</span>]) -<br>flag[<span class="hljs-number">13</span>] * <span class="hljs-number">170</span> +<br>flag[<span class="hljs-number">4</span>] * (flag[<span class="hljs-number">4</span>]) -<br>flag[<span class="hljs-number">10</span>] * <span class="hljs-number">142</span> +<br>flag[<span class="hljs-number">27</span>] * (flag[<span class="hljs-number">27</span>]) +<br>flag[<span class="hljs-number">15</span>] * (flag[<span class="hljs-number">15</span>]) -<br>flag[<span class="hljs-number">15</span>] * <span class="hljs-number">224</span> +<br>flag[<span class="hljs-number">16</span>] * (flag[<span class="hljs-number">16</span>]) -<br>flag[<span class="hljs-number">11</span>] * <span class="hljs-number">230</span> -<br>flag[<span class="hljs-number">1</span>] * <span class="hljs-number">178</span> +<br>flag[<span class="hljs-number">28</span>] * (flag[<span class="hljs-number">28</span>]) -<br>flag[<span class="hljs-number">5</span>] * <span class="hljs-number">246</span> -<br>flag[<span class="hljs-number">17</span>] * <span class="hljs-number">168</span> +<br>flag[<span class="hljs-number">30</span>] * (flag[<span class="hljs-number">30</span>]) -<br>flag[<span class="hljs-number">21</span>] * <span class="hljs-number">220</span> -<br>flag[<span class="hljs-number">22</span>] * <span class="hljs-number">212</span> -<br>flag[<span class="hljs-number">16</span>] * <span class="hljs-number">232</span> +<br>flag[<span class="hljs-number">25</span>] * (flag[<span class="hljs-number">25</span>]) -<br>flag[<span class="hljs-number">4</span>] * <span class="hljs-number">140</span> -<br>flag[<span class="hljs-number">31</span>] * <span class="hljs-number">250</span> -<br>flag[<span class="hljs-number">28</span>] * <span class="hljs-number">150</span> +<br>flag[<span class="hljs-number">11</span>] * (flag[<span class="hljs-number">11</span>]) +<br>flag[<span class="hljs-number">13</span>] * (flag[<span class="hljs-number">13</span>]) -<br>flag[<span class="hljs-number">14</span>] * <span class="hljs-number">234</span> +<br>flag[<span class="hljs-number">7</span>] * (flag[<span class="hljs-number">7</span>]) -<br>flag[<span class="hljs-number">8</span>] * <span class="hljs-number">174</span> +<br>flag[<span class="hljs-number">3</span>] * (flag[<span class="hljs-number">3</span>]) -<br>flag[<span class="hljs-number">25</span>] * <span class="hljs-number">242</span> +<br>flag[<span class="hljs-number">29</span>] * (flag[<span class="hljs-number">29</span>]) +<br>flag[<span class="hljs-number">5</span>] * (flag[<span class="hljs-number">5</span>]) -<br>flag[<span class="hljs-number">30</span>] * <span class="hljs-number">142</span> -<br>flag[<span class="hljs-number">26</span>] * <span class="hljs-number">170</span> -<br>flag[<span class="hljs-number">19</span>] * <span class="hljs-number">176</span> +<br>flag[<span class="hljs-number">0</span>] * (flag[<span class="hljs-number">0</span>]) -<br>flag[<span class="hljs-number">27</span>] * <span class="hljs-number">168</span> +<br>flag[<span class="hljs-number">20</span>] * (flag[<span class="hljs-number">20</span>]) -<br>flag[<span class="hljs-number">20</span>] * <span class="hljs-number">212</span> +<br>flag[<span class="hljs-number">21</span>] * (flag[<span class="hljs-number">21</span>]) +<br>flag[<span class="hljs-number">6</span>] * (flag[<span class="hljs-number">6</span>]) +<br>整理得到flag<br>flag[<span class="hljs-number">18</span>] * (flag[<span class="hljs-number">18</span>]) -<br>flag[<span class="hljs-number">18</span>] * <span class="hljs-number">178</span> +<br><span class="hljs-number">297412</span> == <span class="hljs-number">0</span><br>)<br>if solver.check() == sat:<br>model = solver.model()<br>print(model)<br>solution = [model.evaluate(flag[i] for i in range(<span class="hljs-number">32</span>))]<br>print(<span class="hljs-string">&quot;Solution found:&quot;</span>)<br>print(solution)<br>for i in range(<span class="hljs-number">32</span>):<br>print(chr(int(str(model[flag[i]]))), end=<span class="hljs-string">&quot;&quot;</span>)<br>else:<br>print(<span class="hljs-string">&quot;No solution found.&quot;</span>)<br></code></pre></td></tr></table></figure><p>最后得到</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># flag[18] = 89,</span><br><span class="hljs-meta"># flag[6] = 113,</span><br><span class="hljs-meta"># flag[10] = 71,</span><br><span class="hljs-meta"># flag[17] = 84,</span><br><span class="hljs-meta"># flag[5] = 123,</span><br><span class="hljs-meta"># flag[21] = 110,</span><br><span class="hljs-meta"># flag[12] = 99,</span><br><span class="hljs-meta"># flag[20] = 106,</span><br><span class="hljs-meta"># flag[7] = 55,</span><br><span class="hljs-meta"># flag[24] = 111,</span><br><span class="hljs-meta"># flag[2] = 67,</span><br><span class="hljs-meta"># flag[26] = 85,</span><br><span class="hljs-meta"># flag[23] = 75,</span><br><span class="hljs-meta"># flag[1] = 89,</span><br><span class="hljs-meta"># flag[16] = 116,</span><br><span class="hljs-meta"># flag[25] = 121,</span><br><span class="hljs-meta"># flag[30] = 71,</span><br><span class="hljs-meta"># flag[14] = 117,</span><br><span class="hljs-meta"># flag[4] = 70,</span><br><span class="hljs-meta"># flag[11] = 115,</span><br><span class="hljs-meta"># flag[3] = 84,</span><br><span class="hljs-meta"># flag[28] = 75,</span><br><span class="hljs-meta"># flag[9] = 89,</span><br><span class="hljs-meta"># flag[15] = 112,</span><br><span class="hljs-meta"># flag[22] = 106,</span><br><span class="hljs-meta"># flag[8] = 87,</span><br><span class="hljs-meta"># flag[13] = 85,</span><br><span class="hljs-meta"># flag[29] = 116,</span><br><span class="hljs-meta"># flag[31] = 125,</span><br><span class="hljs-meta"># flag[0] = 88,</span><br><span class="hljs-meta"># flag[27] = 84,</span><br><span class="hljs-meta"># flag[19] = 88</span><br></code></pre></td></tr></table></figure><h2 id="easy-language"><a href="#easy-language" class="headerlink" title="easy language"></a>easy language</h2><p><a href="https://www.52pojie.cn/thread-1414525-1-1.html">https://www.52pojie.cn/thread-1414525-1-1.html</a>  <strong>IDA7.5支持中文函数命名的办法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405071505877.png" alt="image-20240507150507591"></p><p>这个地方能看到WelcometoXYCTF字符串（string窗口）这个图是IDA7.6开的</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405071530293.png" alt="image-20240507153057140"></p><p>图中横线貌似是因为函数名称被过度优化掉了</p><p>然后我们试试IDA7.5（还是有点小不习惯）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405080134910.png" alt="image-20240508013453769"></p><p>直接导入插件后好像查看函数窗口没有很明显的效果（不知道为什么）</p><p>从字符串交叉引用出主要逻辑处</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405080136889.png" alt="image-20240508013632840"></p><p><code>lpMem</code>通过调用<code>编辑框::编辑框1_读属性_内容</code>方法获得一个字符，后续分别进行AES-ECB加密以及base64编码</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202405080142169.png" alt="image-20240508014231091"></p><p>后面逻辑其实可以直接通过看字符串窗口猜，试几次就出来了</p><p>也可以参考这个<a href="https://blog.csdn.net/qq_42557115/article/details/138267583">https://blog.csdn.net/qq_42557115/article/details/138267583</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AES 加密算法（理解篇）</title>
    <link href="/2024/04/13/AES%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <url>/2024/04/13/AES%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="AES加密算法"><a href="#AES加密算法" class="headerlink" title="AES加密算法"></a>AES加密算法</h1><p>截图出处来自b站可厉害的土豆</p><p><a href="https://bbs.kanxue.com/thread-280335.htm">白盒AES算法详解(一)-密码应用-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://blog.csdn.net/qq_28205153/article/details/55798628">AES加密算法原理的详细介绍与实现-CSDN博客</a></p><p>（其他的）</p><p>AES是分组加密算法</p><p>名为长度固定为128位，密钥长度可以是128（16字节），192，256位</p><p>每增加64位会多增加2次循环，128位循环10轮，192为12轮，256为14轮</p><p>整个过程大约为如下操作</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122209365.png" alt="3999375b71c52c0925f9af151cb62be4"></p><h2 id="初始变化："><a href="#初始变化：" class="headerlink" title="初始变化："></a>初始变化：</h2><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122214484.png" alt="3be645923792fb3b86f8e8737725f994"></p><h3 id="字节代换"><a href="#字节代换" class="headerlink" title="字节代换"></a>字节代换</h3><p>先把明文按照上图排列以后与相同排列的子密钥局长分别异或</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122214088.png" alt="3219846cd15427629a5e07d7820e6cb8"></p><p>根据异或以后表中的数字对照S盒进行字节替换（读取方法类似 一    九）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122217525.png" alt="9dfb8af5578099a3791fe3b064530355"></p><p>得到替换完的结果</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122217529.png" alt="fc557d1cd044181416765ab15d406489"></p><h3 id="行移位"><a href="#行移位" class="headerlink" title="行移位"></a>行移位</h3><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122219891.png" alt="c6d4fd8290501fd28c321ebe76eb4614"></p><p>得到效果</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122221256.png" alt="image-20240412222130185"></p><h3 id="列混合"><a href="#列混合" class="headerlink" title="列混合"></a>列混合</h3><p>这是一种很特殊的运算，就是把我们经过上面一系列变换得到的矩阵再左乘一个固定的矩阵得到结果</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122223585.png" alt="image-20240412222334494"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122225422.png" alt="image-20240412222558319"></p><h2 id="轮密钥加"><a href="#轮密钥加" class="headerlink" title="轮密钥加"></a>轮密钥加</h2><p>将列混合得到的矩阵和子密钥矩阵进行异或得到结果</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122226975.png" alt="image-20240412222653862"></p><p>子密钥矩阵得到方式：</p><p>将最开始的16个字节的子密钥矩阵经过密钥扩展可以得到10个轮密钥</p><h3 id="密钥扩展（补充）"><a href="#密钥扩展（补充）" class="headerlink" title="密钥扩展（补充）"></a>密钥扩展（补充）</h3><h3 id="非4倍数"><a href="#非4倍数" class="headerlink" title="非4倍数"></a>非4倍数</h3><p>如果不是4的倍数直接经过异或就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122243580.png" alt="a06a43bb71a6c7f51df2548ebd3ea169"></p><p>如果是4的倍数就有点麻烦了</p><h3 id="4的倍数"><a href="#4的倍数" class="headerlink" title="4的倍数"></a>4的倍数</h3><p>要将w[i-1]经过字循环，字节代换和轮常量异或三次变换，得到的结果再和w[i-4]进行异或</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122244436.png" alt="85e9008a773c352095a84b219a88bbbd"></p><h3 id="字循环"><a href="#字循环" class="headerlink" title="字循环"></a>字循环</h3><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122250348.png" alt="e9f2da7d31b54ffe973a029e85ffe1e3"></p><h3 id="字节替换"><a href="#字节替换" class="headerlink" title="字节替换"></a>字节替换</h3><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122251663.png" alt="8a4b847c1332b353a2a048a839d953d5"></p><h3 id="轮常量异或"><a href="#轮常量异或" class="headerlink" title="轮常量异或"></a>轮常量异或</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">rcon ``=` `[``<span class="hljs-number">0</span>x01``, ``<span class="hljs-number">0</span>x02``, ``<span class="hljs-number">0</span>x04``, ``<span class="hljs-number">0</span>x08``, ``<span class="hljs-number">0</span>x10``, ``<span class="hljs-number">0</span>x20``, ``<span class="hljs-number">0</span>x40``, ``<span class="hljs-number">0</span>x80``, ``<span class="hljs-number">0</span>x1B``, ``<span class="hljs-number">0</span>x36``]<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122252728.png" alt="image-20240412225225621"></p><p>注意这个轮常量的表是固定的，每一次循环就对应选择其中的第i列进行异或，这样就</p><p>最终得到结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122308451.png" alt="image-20240412230848349"></p><p>但貌似有更简单点的做法</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404130005228.png" alt="image-20240413000526193"></p><h3 id="列混合运算（补充）"><a href="#列混合运算（补充）" class="headerlink" title="列混合运算（补充）"></a>列混合运算（补充）</h3><p>此处符号为异或操作（原来矩阵相乘后应该是进行相加，而这里是异或）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122310531.png" alt="2578b479d2f125b78ed41a2f0cba77ab"></p><p>举例（up主幸苦实操）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122329920.jpg" alt="c08224ecc41886d423273cd4c04e369f"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122330141.jpg" alt="8363b539dfbd8e70db59fb503bd4d781"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122330409.jpg" alt="a1be524df9e064e12bc8344f21bd01a2"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202404122332799.jpg" alt="60ce64028144f4f12680974aeca83eb7"></p><p>而最终轮就是将上面的9次循环过程中去掉列混合再执行一次</p>]]></content>
    
    
    
    <tags>
      
      <tag>加密算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hgame 2022-2024 week4 汇总</title>
    <link href="/2024/03/24/hgame%202022-2024%20week4%20%E6%B1%87%E6%80%BB/"/>
    <url>/2024/03/24/hgame%202022-2024%20week4%20%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="hgame-2022-2024-week4-汇总"><a href="#hgame-2022-2024-week4-汇总" class="headerlink" title="hgame 2022-2024 week4 汇总"></a>hgame 2022-2024 week4 汇总</h1><p>在该处下断点动调的时候，先输入32个字符，然后F9步过，然后出现下图情况</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344273.png" alt="image-20240314011117611"></p><p>下面的链接即为当比较成功时的跳转地，上方的则为当比较数据不同时的Never Gonna Give You UP（其实没啥用）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403141720247.png" alt="image-20240314172042098"></p><p>在If里面直接对两个数据进行比较，如果一样就输出win,所以我们可以得知两个数据相同</p><p>可以看出在48行前的加密和比较后进行的加密是对称加密，则我们可以选择将Buf2的1数据调整成条件判断里面unk_974D40这个地方的数据，然后通过动调得到flag(即v10)</p><p>双击buf2,右键选择paste data，将unk_974D40的数据给Buf2,注意不是动调的时候的输入的数据所存的位置</p><p>然后不用保存文件直接F9，在输入的位置的得到被还原的flag的数据</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403142012003.png" alt="image-20240314201249889"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344788.png" alt="image-20240314202708209"></p><p><strong>hgame{WOWOW_h@ppy_n3w_ye4r_2022}</strong></p><h2 id="ezvm"><a href="#ezvm" class="headerlink" title="ezvm"></a>ezvm</h2><p>典型vm</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344737.png" alt="image-20240315161342365"></p><p>已知为vm题，故可以将变量名改成寄存器，好看一点</p><p>下图可以看到关键步骤</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344227.png" alt="image-20240315170805448"></p><p>双击可以获取r的地址，为0x49F020，已知偏移量为0x6d，所以实际opcode的地址为0x49F020+0x6d*4&#x3D;0x49f364</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403151705496.png" alt="image-20240315170528451"></p><p>可以脚本获取地址</p><p>我们最开始动调，发现程序无输入，获取r[0]的初值为0</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403151751079.png" alt="image-20240315175108047"></p><p>通过分析发现case18里面在进行数据的压栈操作，动调可知此时v0&#x3D;0，由此我们可知data的数据地址为0x49F024+209*4,即为0x49f364</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344024.png" alt="image-20240315230647523"></p><p>前往0x49f364获取data</p><p>故</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> opcode[<span class="hljs-number">66</span>] = &#123;<br>      <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000010</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x0000000F</span>,<br>      <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000004</span>,<br>      <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x0000000A</span>, <span class="hljs-number">0x00000013</span>, <span class="hljs-number">0x00000012</span>,<br>      <span class="hljs-number">0x0000000B</span>, <span class="hljs-number">0x00000015</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000014</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x0000000D</span>,<br>      <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x0000000A</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000013</span>, <span class="hljs-number">0x0000000F</span>,<br>      <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>,<br>      <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000012</span>,<br>      <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x0000000A</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x0000000C</span>, <span class="hljs-number">0x00000011</span>,<br>      <span class="hljs-number">0x0000000E</span>, <span class="hljs-number">0xFFFFFFFF</span>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">unsigned <span class="hljs-built_in">int</span> data[<span class="hljs-number">83</span>] = &#123;<br>    <span class="hljs-number">0x0000000A</span>, <span class="hljs-number">0xFFFFFFFB</span>, <span class="hljs-number">0x00000020</span>, <span class="hljs-number">0x0000002F</span>, <span class="hljs-number">0xFFFFFFF6</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000005E</span>, <span class="hljs-number">0x00000046</span>, <br>    <span class="hljs-number">0x00000061</span>, <span class="hljs-number">0x00000043</span>, <span class="hljs-number">0x0000000E</span>, <span class="hljs-number">0x00000053</span>, <span class="hljs-number">0x00000049</span>, <span class="hljs-number">0x0000001F</span>, <span class="hljs-number">0x00000051</span>, <span class="hljs-number">0x0000005E</span>, <br>    <span class="hljs-number">0x00000036</span>, <span class="hljs-number">0x00000037</span>, <span class="hljs-number">0x00000029</span>, <span class="hljs-number">0x00000041</span>, <span class="hljs-number">0x00000063</span>, <span class="hljs-number">0x0000003B</span>, <span class="hljs-number">0x00000064</span>, <span class="hljs-number">0x0000003B</span>, <br>    <span class="hljs-number">0x00000015</span>, <span class="hljs-number">0x00000018</span>, <span class="hljs-number">0x0000005B</span>, <span class="hljs-number">0x0000003E</span>, <span class="hljs-number">0x00000022</span>, <span class="hljs-number">0x00000050</span>, <span class="hljs-number">0x00000046</span>, <span class="hljs-number">0x0000005E</span>, <br>    <span class="hljs-number">0x00000035</span>, <span class="hljs-number">0x0000004E</span>, <span class="hljs-number">0x00000043</span>, <span class="hljs-number">0x00000023</span>, <span class="hljs-number">0x00000060</span>, <span class="hljs-number">0x0000003B</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0xFFFFFFEF</span>, <br>    <span class="hljs-number">0x00000015</span>, <span class="hljs-number">0x0000008E</span>, <span class="hljs-number">0x00000088</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x00000099</span>, <span class="hljs-number">0x000000C4</span>, <span class="hljs-number">0x000000A5</span>, <span class="hljs-number">0x000000C3</span>, <br>    <span class="hljs-number">0x000000DD</span>, <span class="hljs-number">0x00000019</span>, <span class="hljs-number">0x000000EC</span>, <span class="hljs-number">0x0000006C</span>, <span class="hljs-number">0x0000009B</span>, <span class="hljs-number">0x000000F3</span>, <span class="hljs-number">0x0000001B</span>, <span class="hljs-number">0x0000008B</span>, <br>    <span class="hljs-number">0x0000005B</span>, <span class="hljs-number">0x0000003E</span>, <span class="hljs-number">0x0000009B</span>, <span class="hljs-number">0x000000F1</span>, <span class="hljs-number">0x00000086</span>, <span class="hljs-number">0x000000F3</span>, <span class="hljs-number">0x000000F4</span>, <span class="hljs-number">0x000000A4</span>, <br>    <span class="hljs-number">0x000000F8</span>, <span class="hljs-number">0x000000F8</span>, <span class="hljs-number">0x00000098</span>, <span class="hljs-number">0x000000AB</span>, <span class="hljs-number">0x00000086</span>, <span class="hljs-number">0x00000089</span>, <span class="hljs-number">0x00000061</span>, <span class="hljs-number">0x00000022</span>, <br>    <span class="hljs-number">0x000000C1</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0xFFFFFFFA</span>, <span class="hljs-number">0x00000073</span>, <span class="hljs-number">0x00000075</span>, <span class="hljs-number">0x00000063</span>, <span class="hljs-number">0x00000063</span>, <br>    <span class="hljs-number">0x00000065</span>, <span class="hljs-number">0x00000073</span>, <span class="hljs-number">0x00000073</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>通过脚本跑出结果</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344341.png" alt="image-20240315233423220"></p><p>xor_keys &#x3D; [94, 70, 97, 67, 14, 83, 73, 31, 81, 94, 54, 55, 41, 65, 99, 59, 100,  59, 21, 24, 91, 62, 34, 80, 70, 94, 53, 78, 67, 35, 96, 59] plain_text &#x3D; [] cipher &#x3D; [142, 136, 163, 153, 196, 165, 195, 221, 25, 236, 108, 155, 243, 27, 139,  91, 62, 155, 241, 134, 243, 244, 164, 248, 248, 152, 171, 134, 137, 97, 34, 193] for i in range(0,32): plain_text.append(chr((cipher[i]^xor_keys[i])&#x2F;&#x2F;2)) print(plain_text) print(‘’.join(plain_text))</p><p><strong>hgame{Ea$Y-Vm-t0-PrOTeCT_cOde!!}</strong></p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>在main_main函数里面找到</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344570.png" alt="image-20240314210636014"></p><p>进入main_HttpHandleFunc，找到main_encrypt</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344176.png" alt="image-20240314210746022"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344800.png" alt="image-20240315011532248"></p><p>在main_encrypt函数中，可以找到math_big_ptr_Int_SetString函数，经了解可知该题目若使用 IDA7.6 及以上版本打开时，会直接加载嵌入的符号表，可减轻逆向的难度，如果打开后部分的函数仍然分析不出函数参数时，可以自行针对math_big__ptr_Int_SetString函数进行数据的补齐</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344463.png" alt="image-20240315145544247"></p><p>参考格式：</p><p>__int64 __usercall math_big___ptr_Int__SetString@(char *str@, __int64  a2@, int a3@, int a4@)</p><p>关键加密逻辑</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403151549842.png"></p><p>根据前面的代码我们可以猜测是RSA，在main_encrypt函数里面可以获得数据</p><p>其中p&#x3D;92582184765240663364795767694262273105045150785272129481762171937885924776597</p><p>q&#x3D;107310528658039985708896636559112400334262005367649176746429531274300859498993</p><p>e&#x3D;950501</p><p>浅浅浅去看了一下RSA…………………………</p><h5 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h5><p>import gmpy2<br>from Crypto.Util.number import bytes_to_long,long_to_bytes</p><p>p&#x3D;92582184765240663364795767694262273105045150785272129481762171937885924776597<br>q&#x3D;107310528658039985708896636559112400334262005367649176746429531274300859498993<br>n&#x3D;p*q<br>e&#x3D;950501<br>ccc&#x3D;[99, 85, 4, 3, 5, 5, 5, 3, 7, 7, 2, 8, 8, 11, 1, 2, 10, 4, 2, 13, 8, 9, 12, 9, 4, 13, 8, 0, 14, 0, 15, 13, 14, 10, 2, 2, 1, 7, 3, 5, 6, 4, 6, 7, 6, 2, 2, 5, 3, 3, 9, 6, 0, 11, 13, 11, 0, 2, 3, 8, 3, 11, 7, 1, 11, 5, 14, 5, 0, 10, 14, 15, 13, 7, 13, 7, 14, 1, 15, 1, 11, 5, 6, 2, 12, 6, 10, 4, 1, 7, 4, 2, 6, 3, 6, 12, 5, 12, 3, 12, 6, 0, 4, 15, 2, 14, 7, 0, 14, 14, 12, 4, 3, 4, 2, 0, 0, 2, 6, 2, 3, 6, 4, 4, 4, 7, 1, 2, 3, 9, 2, 12, 8, 1, 12, 3, 12, 2, 0, 3, 14, 3, 14, 12, 9, 1, 7, 15, 5, 7, 2, 2, 4, 102, 94]</p><p>tmp&#x3D;0x66<br>for i in range(1,153,2):<br>    ccc[i] ^&#x3D; tmp<br>    tmp &#x3D; ccc[i]<br>    #print(i, chr(tmp))</p><p>print(hex(tmp))<br>for j in range(0x30,0x3a):<br>    tmp&#x3D;j<br>    tmp ^&#x3D; 0x66<br>    cct&#x3D;[i for i in ccc]<br>    for i in range(0,153,2):<br>        cct[i] ^&#x3D; tmp<br>        tmp &#x3D; cct[i]<br>    a&#x3D;bytes(cct)<br>    print(a)</p><p>c&#x3D;135005562109829034199059149474896341566307600227148289525068532297727897409776873250963225670468340868270979975367474527115512003915945795967599087720024<br>#c&#x3D;34015463119928024098049048464997351467317701237049299424078433287626887508766972240862235771478241878371969874377575537014502102905844785866589186730125<br>d&#x3D;gmpy2.invert(e,(p-1)*(q-1))<br>m&#x3D;pow(c,d,n)<br>print(long_to_bytes(m))</p><h5 id="hgame-g0-and-g0-http-5erv3r-nb"><a href="#hgame-g0-and-g0-http-5erv3r-nb" class="headerlink" title="hgame{g0_and_g0_http_5erv3r_nb}"></a>hgame{g0_and_g0_http_5erv3r_nb}</h5><h3 id="hardasm"><a href="#hardasm" class="headerlink" title="hardasm"></a>hardasm</h3><p>了解一下</p><h5 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h5><ol><li><p><strong>vpermd</strong>：这条指令用于按照索引重新排列一个256位的寄存器中的32位元素。它会根据指定的索引重新排列元素，将元素重新排列后存储到目标寄存器中。</p></li><li><p><strong>vpxor</strong>：这个指令执行两个向量寄存器之间的逻辑异或操作。即将两个向量寄存器中对应位置的元素进行逻辑异或运算，并将结果存储到目标寄存器中。</p></li><li><p><strong>vpaddb</strong>：这个指令用于在字节级别对两个向量寄存器中的元素进行相加操作。它会将两个向量寄存器中对应位置的字节元素相加，并将结果存储到目标寄存器中。</p></li><li><p><strong>vpsubb</strong>：这个指令用于在字节级别对两个向量寄存器中的元素进行相减操作。它会将两个向量寄存器中对应位置的字节元素相减，并将结果存储到目标寄存器中。</p></li><li><p><strong>vpshufb</strong>：这个指令执行按字节的逐元素选择和重组操作。根据掩码寄存器中的值，在源寄存器中选择元素，并将这些元素按照特定的顺序重新排列后存储到目标寄存器中。</p></li><li><p><strong>vpcmpeqb</strong>：将两个操作数进行逐字节比较，如果两个操作数的对应字节相等，则将目标寄存器中的对应字节设置为全部1（0xFF）</p><p>以上这些指令主要用于在向量级别上执行数据处理和计算操作</p></li></ol><p>在 AVX 指令集中，<code>__m256</code> 数据类型表示一个包含 8 个单精度浮点数的 256 位向量。这意味着它可以同时对这 8 个单精度浮点数执行相同的操作，从而实现数据的并行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403142114956.png" alt="image-20240314211454895"></p><p>上图中可以看出数据被存入ymm0-ymm7中</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344220.png" alt="image-20240314232209430"></p><p>这里的判断语句，切换到汇编界面如下</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403142321650.png" alt="image-20240314232124621"></p><p>我们可以看到下面的代码一直在进行逐个字节比较的操作，直到遇到一个字节为0或者比较完所有字节。如果所有字节都不为0，则跳转到标签”loc_140008055”，如果遇到字节为0，则直接跳转到标签”loc_14000804E”，即错误，所以当所有字节不为0时，即为正确</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344540.png" alt="image-20240314233349660"></p><p>从这一行我们可以看出比较是否相等的数据的结果被存放在ymm1寄存器里面</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344854.png" alt="image-20240314234926255"></p><p>因为在判断条件的比较里面有8个m256类型的单精度浮点数的向量，每个单精度浮点数会进行4次字节比较，所以会进行32次字节比较的操作，故flag长度为32字节</p><p>经过检验发现Flag的格式</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344592.png" alt="image-20240315001543060"></p><p>检验过程：1.准备除了固定的hgame{ }以外的25的字符（里面随便啥都行）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344048.png" alt="image-20240315001155280"></p><ol start="2"><li>动调，发现前面数据为0FFh,即可以说明该格式正确</li></ol><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403150017332.png" alt="image-20240315001700263"></p><p>所以尝试进行爆破，对程序进行patch,将[rsp+70h+var_50]处的内容传递给rcx，然后再打印出来</p><p>要使得字符让程序返回0xFFh</p><p>在file–&gt;script command里面添加脚本</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152344329.png" alt="image-20240315004344982"></p><p>等待……</p><p>exp:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">import <span class="hljs-keyword">subprocess</span><br><span class="hljs-keyword"></span>real_flag=<span class="hljs-string">&quot;hgame&#123;&quot;</span><span class="hljs-comment">#绝对正确的前6个字符</span><br>cur_index=<span class="hljs-number">6</span><span class="hljs-comment">#当前爆破的位置</span><br>while cur_index&lt;<span class="hljs-number">32</span>:<br>    for i in range(<span class="hljs-number">32</span>,<span class="hljs-number">128</span>):<span class="hljs-comment">#当前爆破的位置上的字符</span><br>        real_flag_arr = [<span class="hljs-number">0</span>] * <span class="hljs-number">32</span><br><br>        for <span class="hljs-keyword">j </span>in range(len(real_flag)):<span class="hljs-comment">#正确的先复制一下</span><br>            real_flag_arr[<span class="hljs-keyword">j]=ord(real_flag[j])</span><br><span class="hljs-keyword"></span>        real_flag_arr[len(real_flag_arr)-<span class="hljs-number">1</span>]=<span class="hljs-keyword">ord(&quot;&#125;&quot;)</span><span class="hljs-comment">#最后一个字符&quot;&#125;&quot;固定</span><br><br>        for <span class="hljs-keyword">j </span>in range(len(real_flag_arr)-<span class="hljs-number">2</span>,cur_index,-<span class="hljs-number">1</span>):<span class="hljs-comment">#除了当前爆破的位置，其他位置 上都设置为32(空格)</span><br>            real_flag_arr[<span class="hljs-keyword">j]=32</span><br><span class="hljs-keyword"></span><br>        real_flag_arr[cur_index]=i<span class="hljs-comment">#设置当前爆破的位置上的字符</span><br>        real_flag_arr_s=<span class="hljs-string">&quot;&quot;</span>.<span class="hljs-keyword">join(chr(k) </span>for k in real_flag_arr)<span class="hljs-comment">#输入到程序中的字符串</span><br>        <span class="hljs-comment">#下方路径填写自己的</span><br>        p = <span class="hljs-keyword">subprocess.Popen([&quot;G:\\A\\hgame\\2022\week4\\hardasm.exe], </span>stdin=<span class="hljs-keyword">subprocess.PIPE, </span>stdout=<span class="hljs-keyword">subprocess.PIPE, </span>stderr=<span class="hljs-keyword">subprocess.PIPE)</span><br><span class="hljs-keyword"></span>        p.stdin.write(real_flag_arr_s.encode())<br>        p.stdin.<span class="hljs-keyword">close()</span><br><span class="hljs-keyword"></span>        out = p.stdout.read()<br><br>        if len(out)&gt;cur_index:<span class="hljs-comment">#判断程序打印出的0xFF的个数是否增加，增加则说明当前爆破的位置 上的字符设置的是正确的</span><br>            real_flag+=chr(i)<br>            cur_index+=<span class="hljs-number">1</span> <br>            print(real_flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p><strong>hgame{right_your_asm_is_good!!}</strong></p><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><p>打开找到main_main函数，进入</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403150246182.png" alt="image-20240315024638054"></p><p>通过分析这段代码，发现主要功能——从指定目录中读取文件列表，对特定的字符串进行Base64解码操作，然后将解码后的结果存储到新文件中。</p><p>关键步骤：</p><ol><li>使用 <code>io_ioutil_ReadDir</code> 函数从 “inputdir” 目录中读取文件列表，并将结果存储在变量 <code>Dir</code> 中。</li><li>对特定的字符串进行 Base64 解码操作，结果存储在变量 <code>v81</code> 中。</li><li>调用 <code>main_VirtualAlloc</code> 函数分配内存，并将解码后的字符串拷贝到新分配的内存中。</li><li>使用 <code>main_RtlMoveMemory</code> 函数将数据从一个地址复制到另一个地址。</li><li>循环遍历Dir中的文件列表，依次读取每个文件内容，并进行处理：<ul><li>构造输入文件路径，使用 <code>os_ReadFile</code> 读取文件内容。</li><li>将文件内容拷贝到新的字节切片中，并执行一系列操作。</li><li>将处理后的数据写入到输出文件中。</li></ul></li><li>最后通过循环控制，实现对文件列表的遍历和处理，直到处理完所有文件或达到指定条件退出循环。</li></ol><p>开始做题</p><p>先在这几个关键地方下断点，然后开始动调，发现没有输入环节</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348312.png" alt="image-20240315034111606"></p><p>这个地方表示对字符串进行base64的解密，且字符串长度为284字节，双击进入获取进行解密的字符串数据，得到</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403150342685.png" alt="image-20240315034227633"></p><p>注意还有下面的那一部分</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403150344997.png" alt="image-20240315034440961"></p><p>获取得到数据：</p><p>VUiD7FBIjWwkIEiJTUBIi0VAiwCJRQC4BAAAAEgDRUCLAIlFBMdFCAAAAADHRQwj782rx0UQFgAAAMdFFCEAAADHRRgsAAAAx0UcNwAAAMdFIAAAAACLRSCD+CBzWotFDANFCIlFCItFBMHgBANFEItVCANVBDPCi1UEweoFA1UUM8IDRQCJRQCLRQDB4AQDRRiLVQgDVQAzwotVAMHqBQNVHDPCA0UEiUUEuAEAAAADRSCJRSDrnkiLRUCLVQCJELgEAAAASANFQItVBIkQSI1lMF3D</p><p>然后在线解码好像不太行，选择使用脚本一键解密后直接写入文件</p><p>脚本：</p><p>import base64</p><p>with open(‘ans’, ‘wb’) as f:<br>f.write(base64.b64decode(‘VUiD7FBIjWwkIEiJTUBIi0VAiwCJRQC4BAAAAEgDRUCLAIlFBMdFC AAAAADHRQwj782rx0UQFgAAAMdFFCEAAADHRRgsAAAAx0UcNwAAAMdFIAAAAACLRSCD+CBzWotFDANFCIlFCItFBMHgBANFEItVCANVBDPCi1UEweoFA1UUM8IDRQCJRQCLRQDB4AQDRRiLVQgDVQAzwotVAMHqBQNVHDPCA0UEiUUEuAEAAAADRSCJRSDrnkiLRUCLVQCJELgEAAAASANFQItVBIkQSI1lMF3D’))</p><p>将脚本运行得到生成的文件，将文件拖入IDA</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152347778.png" alt="image-20240315133800774"></p><p>p创建函数然后F5，得到加密逻辑</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152347660.png" alt="image-20240315133925625"></p><p>发现一个规整的tea加密</p><p>由下图可知enc文件时加密后的数据</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348792.png" alt="image-20240315134520317"></p><p>用winhex打开flag.enc</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348168.png" alt="image-20240315135048319"></p><p>得到数据</p><p>\x20\x69\xB3\xE4\xD0\x24\x69\x93\x44\xD1\x16\xA8\xF5\xD5\x82\xAA\xDA\xF0\x79\x36\x06\xFD\x32\x7F\xD3\xC0\x60\x34\x39\x49\x21\xB7\xA2\x69\x72\xE5\xFA\x51\x6A\x83</p><h5 id="exp-1"><a href="#exp-1" class="headerlink" title="exp:"></a>exp:</h5><p>#include &lt;stdio.h&gt;<br>#include &lt;stdint.h&gt;<br>void decrypt(uint32_t* v, int32_t* k) {<br>    uint32_t v0 &#x3D; v[0], v1 &#x3D; v[1], i;<br>    int32_t sum &#x3D; 0xABCDEF23 * 32;<br>    uint32_t delta &#x3D; 0xABCDEF23;<br>    uint32_t k0 &#x3D; k[0], k1 &#x3D; k[1], k2 &#x3D; k[2], k3 &#x3D; k[3];<br>    for (i &#x3D; 0; i&lt;32; i++) {<br>        v1 -&#x3D; ((v0 &lt;&lt; 4) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; 5) + k3);<br>        v0 -&#x3D; ((v1 &lt;&lt; 4) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; 5) + k1);<br>        sum -&#x3D; delta;<br>    }<br>    v[0] &#x3D; v0; v[1] &#x3D; v1;<br>}<br>int main(){<br>    uint32_t key[4] &#x3D; {22,33,44,55};<br>    uint32_t enc[10] &#x3D; {0xE4B36920, 0x936924D0, 0xA816D144, 0xAA82D5F5, 0x3679F0DA, 0x7F32FD06, 0x3460C0D3, 0xB7214939,<br>        0xE57269A2, 0x836A51FA};<br>    for(int i &#x3D; 0;i&lt;9;i+&#x3D;2){<br>        decrypt(&amp;enc[i],key);<br>    }</p><pre><code class="hljs">char* p = enc;for(int i = 0;i&lt;40;i++)&#123;    printf(&quot;%c&quot;,p[i]);&#125;</code></pre><p>}</p><h5 id="hgame-th1s-1s-th3-tutu’s-h0mew0rk"><a href="#hgame-th1s-1s-th3-tutu’s-h0mew0rk" class="headerlink" title="hgame{th1s_1s_th3_tutu’s_h0mew0rk}"></a>hgame{th1s_1s_th3_tutu’s_h0mew0rk}</h5><h2 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h2><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348645.png" alt="image-20240315181422964"></p><p>根据判断，遇到0xFF停止</p><p>修改变量名</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348422.png" alt="image-20240315181310675"></p><p>提取出opcode</p><p>这个为vm的主要逻辑</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348793.png" alt="image-20240315181608327"></p><p>找到数据</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348664.png" alt="image-20240315194950700"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348106.png" alt="image-20240315195021438"></p><p>分析所模拟的指令</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348030.png" alt="image-20240315203804816"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152038387.png" alt="image-20240315203846356"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348590.png" alt="image-20240315202307774"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348265.png" alt="image-20240315203337842"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348896.png" alt="image-20240315203414951"></p><p>概览：</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403152348398.png" alt="image-20240315204009120"></p><p>使用脚本打印出符合条件的指令</p><p>opcode &#x3D; [0x00, 0x03, 0x02, 0x00, 0x03, 0x00, 0x02, 0x03, 0x00, 0x00,<br>          0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x03, 0x02, 0x32,<br>          0x03, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,<br>          0x01, 0x00, 0x00, 0x03, 0x02, 0x64, 0x03, 0x00, 0x02, 0x03,<br>          0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x01, 0x00, 0x00, 0x03,<br>          0x00, 0x08, 0x00, 0x02, 0x02, 0x01, 0x03, 0x04, 0x01, 0x00,<br>          0x03, 0x05, 0x02, 0x00, 0x03, 0x00, 0x01, 0x02, 0x00, 0x02,<br>          0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x01, 0x03, 0x00,<br>          0x03, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x03, 0x01, 0x28,<br>          0x04, 0x06, 0x5F, 0x05, 0x00, 0x00, 0x03, 0x03, 0x00, 0x02,<br>          0x01, 0x00, 0x03, 0x02, 0x96, 0x03, 0x00, 0x02, 0x03, 0x00,<br>          0x00, 0x00, 0x00, 0x04, 0x07, 0x88, 0x00, 0x03, 0x00, 0x01,<br>          0x03, 0x00, 0x03, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x03,<br>          0x01, 0x28, 0x04, 0x07, 0x63, 0xFF, 0xFF]<br>input1 &#x3D; []<br>i &#x3D; 0<br>while opcode[i] !&#x3D; 0xFF:<br>    match opcode[i]:<br>        case 0x00:<br>            print(f’{i}’, end&#x3D;’ ‘)<br>            o &#x3D; i + 1<br>            if opcode[o]:<br>                match opcode[o]:<br>                    case 0x01:<br>                        print(“mov input[reg[2]], reg[0]”)<br>                    case 0x02:<br>                        print(“mov reg[%d], reg[%d]” % (opcode[i+2],opcode[i+3]))<br>                    case 0x03:<br>                        print(“mov reg[%d], %d” % (opcode[i+2], opcode[i+3]))<br>            else:<br>                print(“mov reg[0], input[reg[2]]”)<br>            i +&#x3D; 4<br>        case 0x01:<br>            print(f’{i}’, end&#x3D;’ ‘)<br>            o &#x3D; i + 1<br>            if opcode[o]:<br>                match opcode[o]:<br>                    case 0x01:<br>                        print(“push reg[0]”)<br>                    case 0x02:<br>                        print(“push reg[2]”)<br>                    case 0x03:<br>                        print(“push reg[3]”)<br>            else:<br>                print(“push reg[0]”)<br>            i +&#x3D; 2<br>        case 0x02:<br>            print(f’{i}’, end&#x3D;’ ‘)<br>            o &#x3D; i + 1<br>            if opcode[o]:<br>                match opcode[o]:<br>                    case 0x01:<br>                        print(“pop reg[1]”)<br>                    case 0x02:<br>                        print(“pop reg[2]”)<br>                    case 0x03:<br>                        print(“pop reg[3]”)<br>            else:<br>                print(“pop reg[0]”)<br>            i +&#x3D; 2<br>        case 0x03:<br>            print(f’{i}’, end&#x3D;’ ‘)<br>            o &#x3D; i + 1<br>            match opcode[o]:<br>                case 0:<br>                    print(“add reg[%d],reg[%d]” % (opcode[i + 2], opcode[i + 3]))<br>                case 1:<br>                    print(“sup reg[%d],reg[%d]” % (opcode[i + 2], opcode[i + 3]))<br>                case 2:<br>                    print(“mul reg[%d],reg[%d]” % (opcode[i + 2], opcode[i + 3]))<br>                case 3:<br>                    print(“xor reg[%d],reg[%d]” % (opcode[i + 2], opcode[i + 3]))<br>                case 4:<br>                    print(“shl reg[%d],reg[%d]” % (opcode[i + 2], opcode[i + 3]))<br>                case 5:<br>                    print(“shr reg[%d],reg[%d]” % (opcode[i + 2], opcode[i + 3]))<br>            i +&#x3D; 4<br>        case 0x04:<br>            print(f’{i} cmp reg[0], reg[1]’)<br>            i +&#x3D; 1<br>        case 0x05:<br>            print(f’{i} jmp %d ‘ % (opcode[i+1]))<br>            i +&#x3D; 2<br>        case 0x06:<br>            print(f’{i} je %d ‘ % (opcode[i+1]))<br>            i +&#x3D; 2<br>        case 0x07:<br>            print(f’{i} jne %d ‘ % (opcode[i+1]))<br>            i +&#x3D; 2</p><p>得到汇编结果</p><p>mov reg[2],0</p><p>add reg[2],reg[3]</p><p>mov reg[0],data[reg[2]]</p><p>mov reg[1],reg[0]</p><p>mov reg[2],50</p><p>add reg[2],reg[3]</p><p>mov reg[0],data[reg[2]]</p><p>add reg[1],reg[0]</p><p>mov reg[2],100</p><p>add reg[2],reg[3]</p><p>mov reg[0],data[reg[2]]</p><p>xor reg[1],reg[0]</p><p>mov reg[0],8</p><p>mov reg[2],reg[1]</p><p>shl reg[1],reg[0]</p><p>shr reg[2],reg[0]</p><p>add reg[1],reg[2]</p><p>mov reg[0],reg[1]</p><p>push reg[0]</p><p>mov reg[0],1</p><p>add reg[3],reg[0]</p><p>mov reg[0],reg[3]</p><p>mov reg[1],40</p><p>cmp reg[0],reg[1]</p><p>jne 95</p><p>jmp 0</p><p>mov reg[3],0</p><p>pop reg[0]</p><p>mov reg[2],150</p><p>add reg[2],reg[3]</p><p>mov reg[0],data[reg[2]]</p><p>cmp reg[0],reg[1]</p><p>je 136</p><p>mov reg[0],1</p><p>add reg[3],reg[0]</p><p>mov reg[0],reg[3]</p><p>mov reg[1],40</p><p>cmp reg[0],reg[1]</p><p>je 99</p><p>然后再读取汇编将汇编代码转换成反汇编</p><p>a &#x3D; [0x9b, 0xa8, 0x2, 0xbc, 0xac, 0x9c, 0xce, 0xfa, 0x2, 0xb9, 0xff, 0x3a, 0x74, 0x48, 0x19, 0x69, 0xe8, 0x3, 0xcb,<br>     0xc9, 0xff, 0xfc, 0x80, 0xd6, 0x8d, 0xd7, 0x72, 0x0, 0xa7, 0x1d, 0x3d, 0x99, 0x88, 0x99, 0xbf, 0xe8, 0x96, 0x2e,<br>     0x5d, 0x57, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]<br>b &#x3D; [0xc9, 0xa9, 0xbd, 0x8b, 0x17, 0xc2, 0x6e, 0xf8, 0xf5, 0x6e, 0x63, 0x63, 0xd5, 0x46, 0x5d, 0x16, 0x98, 0x38, 0x30,<br>     0x73, 0x38, 0xc1, 0x5e, 0xed, 0xb0, 0x29, 0x5a, 0x18, 0x40, 0xa7, 0xfd, 0xa, 0x1e, 0x78, 0x8b, 0x62, 0xdb, 0xf,<br>     0x8f, 0x9c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]<br>c &#x3D; [0x4800, 0xf100, 0x4000, 0x2100, 0x3501, 0x6400, 0x7801, 0xf900, 0x1801, 0x5200, 0x2500, 0x5d01, 0x4700, 0xfd00,<br>     0x6901, 0x5c00, 0xaf01, 0xb200, 0xec01, 0x5201, 0x4f01, 0x1a01, 0x5000, 0x8501, 0xcd00, 0x2300, 0xf800, 0xc00,<br>     0xcf00, 0x3d01, 0x4501, 0x8200, 0xd201, 0x2901, 0xd501, 0x601, 0xa201, 0xde00, 0xa601, 0xca01, 0x0, 0x0, 0x0, 0x0,<br>     0x0, 0x0, 0x0, 0x0, 0x0, 0x0]<br>flag &#x3D; ‘0123456789012345678901234567890123456789’<br>res &#x3D; [0 for i in range(40)]<br>for i in range(40): x &#x3D; a[i] + ord(flag[i])<br>y &#x3D; x ^ b[i]<br>z &#x3D; (y &lt;&lt; 8) &amp; 0xff00<br>m &#x3D; y &gt;&gt; 8<br>n &#x3D; z + m</p><p>最后，逆回去就行了……</p><p>a &#x3D; [0x9b, 0xa8, 0x2, 0xbc, 0xac, 0x9c, 0xce, 0xfa, 0x2, 0xb9, 0xff, 0x3a, 0x74, 0x48, 0x19, 0x69, 0xe8, 0x3, 0xcb,<br>     0xc9, 0xff, 0xfc, 0x80, 0xd6, 0x8d, 0xd7, 0x72, 0x0, 0xa7, 0x1d, 0x3d, 0x99, 0x88, 0x99, 0xbf, 0xe8, 0x96, 0x2e,<br>     0x5d, 0x57]<br>b &#x3D; [0xc9, 0xa9, 0xbd, 0x8b, 0x17, 0xc2, 0x6e, 0xf8, 0xf5, 0x6e, 0x63, 0x63, 0xd5, 0x46, 0x5d, 0x16, 0x98, 0x38, 0x30,<br>     0x73, 0x38, 0xc1, 0x5e, 0xed, 0xb0, 0x29, 0x5a, 0x18, 0x40, 0xa7, 0xfd, 0xa, 0x1e, 0x78, 0x8b, 0x62, 0xdb, 0xf,<br>     0x8f, 0x9c]<br>c &#x3D; [0x4800, 0xf100, 0x4000, 0x2100, 0x3501, 0x6400, 0x7801, 0xf900, 0x1801, 0x5200, 0x2500, 0x5d01, 0x4700, 0xfd00,<br>     0x6901, 0x5c00, 0xaf01, 0xb200, 0xec01, 0x5201, 0x4f01, 0x1a01, 0x5000, 0x8501, 0xcd00, 0x2300, 0xf800, 0xc00,<br>     0xcf00, 0x3d01, 0x4501, 0x8200, 0xd201, 0x2901, 0xd501, 0x601, 0xa201, 0xde00, 0xa601, 0xca01]<br>c &#x3D; [i for i in reversed(c)]<br>flag &#x3D; ‘’<br>for i in range(40):<br>    m &#x3D; c[i] &gt;&gt; 8<br>    n &#x3D; (c[i] &amp; 0xff) &lt;&lt; 8<br>    y &#x3D; m + n<br>    y &#x3D; y ^ b[i]<br>    y &#x3D; y - a[i]<br>    flag +&#x3D; chr(y)<br>print(flag)</p><h5 id="hgame-y0ur-rever5e-sk1ll-i5-very-g0od"><a href="#hgame-y0ur-rever5e-sk1ll-i5-very-g0od" class="headerlink" title="hgame{y0ur_rever5e_sk1ll_i5_very_g0od!!}"></a>hgame{y0ur_rever5e_sk1ll_i5_very_g0od!!}</h5><h1 id="hgame-week4-re-wp"><a href="#hgame-week4-re-wp" class="headerlink" title="hgame week4 re wp"></a>hgame week4 re wp</h1><h2 id="change"><a href="#change" class="headerlink" title="change"></a>change</h2><p>点开进入程序可以发现主要逻辑集中在中间那块</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403082110909.png" alt="image-20240308145909632"></p><h5 id="exp-2"><a href="#exp-2" class="headerlink" title="exp:"></a>exp:</h5><p>cmp&#x3D;[0x13, 0x0A, 0x5D, 0x1C, 0x0E, 0x08, 0x23, 0x06, 0x0B, 0x4B,<br>  0x38, 0x22, 0x0D, 0x1C, 0x48, 0x0C, 0x66, 0x15, 0x48, 0x1B,<br>  0x0D, 0x0E, 0x10, 0x4F]<br>s&#x3D;’am2qasl’<br>flag&#x3D;’’<br>for i in range(len(cmp)):<br>    if i%2:<br>        flag+&#x3D;chr(cmp[i]^ord(s[i%len(s)]))<br>    else:<br>        flag+&#x3D;chr((cmp[i]-10)^ord(s[i%len(s)]))<br>print(flag)</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">hgame</span><span class="hljs-template-variable">&#123;ugly_Cpp_and_hook&#125;</span><br></code></pre></td></tr></table></figure><h2 id="again"><a href="#again" class="headerlink" title="again"></a>again</h2><p>首先使用pyinstxtractor把bin1.exe进行解包</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403082217614.png" alt="image-20240308221703585"></p><p>在首个文件夹中找到pyc文件，并且使用命令.\pycdc 文件名进行反编译（注意不是.&#x2F;)</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403082217252.png" alt="image-20240308221738225"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403082219974.png" alt="image-20240308221944948"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403082235163.png" alt="image-20240308223550141"></p><p>上面两个不太行</p><p>直接pycdas查看字节码</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403082253958.png" alt="image-20240308225358872"></p><p>得到字节码如下：</p><p>D:\题目\hgame\again!\bin1.exe_extracted&gt;pycdas.exe bin1.pyc<br>bin1.pyc (Python 3.12)      &#x2F;&#x2F;<strong>文件信息</strong><br>[Code]       &#x2F;&#x2F;<strong>Code对象信息</strong><br>    File Name: bin1.py<br>    Object Name: <module><br>    Qualified Name: <module><br>    Arg Count: 0<br>    Pos Only Arg Count: 0<br>    KW Only Arg Count: 0<br>    Stack Size: 10<br>    Flags: 0x00000000<br>    [Names]     &#x2F;&#x2F;<strong>Names</strong> 包含了代码中使用到的变量名和模块名，例如：’hashlib’, ‘print’, ‘bytearray’ 等<br>        ‘hashlib’<br>        ‘print’<br>        ‘bytearray’<br>        ‘s’<br>        ‘open’<br>        ‘read’<br>        ‘f’<br>        ‘t’<br>        ‘range’<br>        ‘i’<br>        ‘ord’<br>        ‘len’<br>        ‘append’<br>        ‘md5’<br>        ‘bytes’<br>        ‘hexdigest’<br>        ‘md5_hash’<br>    [Locals+Names]    &#x2F;&#x2F;<strong>Locals+Names</strong>提供具体的本地变量信息<br>    [Constants]          &#x2F;&#x2F;<strong>Constants</strong>包含了代码中使用到的常量例如整数、字符串，一些常量示例<br>        0<br>        None<br>        ‘you should use this execute file to decrypt “bin2”‘<br>        ‘hint:md5’<br>        ‘bin1.pyc’<br>        ‘rb’<br>        ‘jkasnwojasd’<br>        15<br>        6<br>        256<br>    [Disassembly]<br>        0       RESUME                          0<br>        2       LOAD_CONST                      0: 0<br>        4       LOAD_CONST                      1: None<br>        6       IMPORT_NAME                     0: hashlib<br>        8       STORE_NAME                      0: hashlib<br>        10      PUSH_NULL<br>        12      LOAD_NAME                       1: print<br>        14      LOAD_CONST                      2: ‘you should use this execute file to decrypt “bin2”‘<br>        16      <INVALID><br>        20      CALL                            1<br>        30      POP_TOP<br>        32      PUSH_NULL<br>        34      LOAD_NAME                       1: print<br>        36      LOAD_CONST                      3: ‘hint:md5’<br>        38      <INVALID><br>        42      CALL                            1<br>        52      POP_TOP<br>        54      PUSH_NULL<br>        56      LOAD_NAME                       2: bytearray<br>        58      <INVALID><br>        62      CALL                            0<br>        72      STORE_NAME                      3: s<br>        74      PUSH_NULL<br>        76      LOAD_NAME                       2: bytearray<br>        78      PUSH_NULL<br>        80      LOAD_NAME                       4: open<br>        82      LOAD_CONST                      4: ‘bin1.pyc’<br>        84      LOAD_CONST                      5: ‘rb’<br>        86      <INVALID><br>        90      CALL                            2<br>        100     <INVALID><br>        122     <INVALID><br>        126     CALL                            0<br>        136     <INVALID><br>        140     CALL                            1<br>        150     STORE_NAME                      6: f<br>        152     LOAD_CONST                      6: ‘jkasnwojasd’<br>        154     STORE_NAME                      7: t<br>        156     PUSH_NULL<br>        158     LOAD_NAME                       8: range<br>        160     LOAD_CONST                      0: 0<br>        162     LOAD_CONST                      7: 15<br>        164     <INVALID><br>        168     CALL                            2<br>        178     GET_ITER<br>        180     FOR_ITER                        106 (to 394)<br>        182     STORE_NAME                      9: i<br>        184     LOAD_NAME                       6: f<br>        186     LOAD_NAME                       9: i<br>        188     BINARY_SUBSCR<br>        198     LOAD_NAME                       6: f<br>        200     LOAD_NAME                       9: i<br>        202     LOAD_CONST                      8: 6<br>        204     BINARY_OP                       6 (%)<br>        208     BINARY_SUBSCR<br>        218     BINARY_OP                       0 (+)<br>        222     PUSH_NULL<br>        224     LOAD_NAME                       10: ord<br>        226     LOAD_NAME                       7: t<br>        228     LOAD_NAME                       9: i<br>        230     LOAD_CONST                      8: 6<br>        232     BINARY_OP                       6 (%)<br>        236     BINARY_SUBSCR<br>        246     <INVALID><br>        250     CALL                            1<br>        260     PUSH_NULL<br>        262     LOAD_NAME                       10: ord<br>        264     LOAD_NAME                       7: t<br>        266     LOAD_NAME                       9: i<br>        268     PUSH_NULL<br>        270     LOAD_NAME                       11: len<br>        272     LOAD_NAME                       7: t<br>        274     <INVALID><br>        278     CALL                            1<br>        288     BINARY_OP                       6 (%)<br>        292     BINARY_SUBSCR<br>        302     <INVALID><br>        306     CALL                            1<br>        316     BINARY_OP                       0 (+)<br>        320     BINARY_OP                       12 (^)<br>        324     LOAD_CONST                      9: 256<br>        326     BINARY_OP                       6 (%)<br>        330     LOAD_NAME                       6: f<br>        332     LOAD_NAME                       9: i<br>        334     STORE_SUBSCR<br>        338     LOAD_NAME                       3: s<br>        340     <INVALID><br>        362     LOAD_NAME                       6: f<br>        364     LOAD_NAME                       9: i<br>        366     BINARY_SUBSCR<br>        376     <INVALID><br>        380     CALL                            1<br>        390     POP_TOP<br>        392     JUMP_BACKWARD                   107 (to 180)<br>        394     PUSH_NULL<br>        396     LOAD_NAME                       1: print<br>        398     LOAD_NAME                       3: s<br>        400     <INVALID><br>        404     CALL                            1<br>        414     POP_TOP<br>        416     PUSH_NULL<br>        418     LOAD_NAME                       0: hashlib<br>        420     LOAD_ATTR                       13: md5<br>        430     PUSH_NULL<br>        432     LOAD_NAME                       14: bytes<br>        434     LOAD_NAME                       3: s<br>        436     <INVALID><br>        440     CALL                            1<br>        450     <INVALID><br>        454     CALL                            1<br>        464     <INVALID><br>        486     <INVALID><br>        490     CALL                            0<br>        500     STORE_NAME                      16: md5_hash<br>        502     LOAD_CONST                      1: None<br>        504     RETURN_VALUE</p><p>手撕一下，写成py代码（把py文件和pyc放同一个路径下）</p><p>import hashlib<br>print(‘you should use this execute file to decrypt “bin2”‘)<br>print(‘hint:md5’)<br>s&#x3D;bytearray()<br>f&#x3D;bytearray(open(‘.&#x2F;bin1.pyc’,’rb’).read())<br>t&#x3D;’jkasnwojasd’<br>for i in range(15):<br>   f[i]&#x3D;((f[i]+f[i%6]) ^ (ord(t[i%6])+ord(t[i%len(t)]))) % 256<br>   s.append(f[i])<br>print(s)<br>md5_hash&#x3D;hashlib.md5(bytes(s)).hexdigest()<br>print(md5_hash)</p><p>#a405b5d321e446459d8f9169d027bd92</p><p>（不知道为什么我用之前的Pyinstxtractor最后解包解出来的pyc最后得到的结果和wp不一样，于是又重新搞了一个Pyinstxtractor)</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403090010819.png" alt="image-20240309001030771"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403090106702.png" alt="image-20240309010601647"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403090007554.png" alt="image-20240309000734521"></p><p>用winhex打开bin2,搜索刚刚得到的字符串发现如上</p><p>因为文件不可执行，盲猜和文件数据进行异或，刚好在头部尝试进行异或以后发现MZ，exe标志，则印证了猜想</p><h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><p>file&#x3D;open(‘bin2’,’rb’).read()  #读出来是b’xxxx’的形式<br>key1 &#x3D; (“a405b5d321e446459d8f9169d027bd92”).encode()  #key1进行encode后就是b’xxxx’<br>arr&#x3D;[key1[i%len(key1)]^file[i] for i in range(len(file))]<br>open(‘bin2.exe’,’wb’).write(bytes(arr))<br>print(‘Done!’)</p><p>还是在同一路径下运行得到最终的exe</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403090042198.png" alt="image-20240309004215171"></p><p>直接使用IDA打开</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403090125395.png" alt="image-20240309012538359"></p><h5 id="exp-3"><a href="#exp-3" class="headerlink" title="exp:"></a>exp:</h5><p>#include &lt;stdio.h&gt;<br>#include &lt;stdint.h&gt;<br>#include &lt;stdio.h&gt;<br>void decrypt1(uint32_t* v, uint32_t* k) {<br>    uint32_t v5 &#x3D; 0;<br>    uint32_t data;<br>    uint32_t z;<br>    uint32_t z2;<br>    uint32_t v7;<br>    uint32_t y;<br>    int v9;<br>    int v19 &#x3D; 12;<br>    int i;<br>    do {<br>        v5 +&#x3D; 0x7937B99E;<br>        v5 &amp;&#x3D; 0xffffffff;<br>    } while (–v19);<br>    v19 &#x3D; 12;<br>    y &#x3D; v[0];<br>    do<br>    {<br>        v7 &#x3D; (v5 &gt;&gt; 2) &amp; 3;<br>        for (i &#x3D; 7; i &gt; 0; –i)<br>        {<br>            z &#x3D; v[i - 1];<br>            y &#x3D; v[i] -&#x3D; ((v5 ^ y) + (z ^ k[v7 ^ i &amp; 3])) ^ (((16 * z) ^ (y &gt;&gt; 3)) + ((z &gt;&gt; 5) ^ (4 * y)));</p><pre><code class="hljs">    &#125;    z = v[7];    y = v[0] -= (((v5 ^ y) + (z ^ k[v7 ^ i &amp; 3])) ^ (((16 * z) ^ (y &gt;&gt; 3)) + ((z &gt;&gt; 5) ^ (4 * y))));    v5 += 0x7937B99E;    v5 &amp;= 0xffffffff;&#125; while (--v19);</code></pre><p>}</p><p>int main()<br>{<br>    uint32_t key[4] &#x3D; {<br>        0x1234, 0x2341, 0x3412, 0x4123<br>    };<br>    uint32_t array[8] &#x3D; { 0x506fb5c3, 0xb9358f45, 0xc91ae8c7, 0x3820e280, 0xd13aba83,<br>0x975cf554, 0x4352036b, 0x1cd20447 };<br>    uint32_t temp[2] &#x3D; { 0,0 };<br>    int i &#x3D; 0;<br>    decrypt1(array, key);<br>    for (int i &#x3D; 0; i &lt; 8; i++) {<br>        printf(“0x%x,”, array[i]);<br>    }</p><pre><code class="hljs">return 0;</code></pre><p>}</p><p>hgame{btea_is_a_hard_encryption}</p><h2 id="crackme2"><a href="#crackme2" class="headerlink" title="crackme2"></a>crackme2</h2><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403102341869.png" alt="image-20240310234147807"></p><p>打开最开始是一个没有经过修改的base64换表题</p><p>在线解码</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403102341313.png" alt="image-20240310234127150"></p><p>发现不对</p><p>退回到main函数的界面，发现unwind</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403102345768.png" alt="image-20240310234543687"></p><p>发现异常</p><p>将上方的main函数u掉，然后对except函数按p创建函数然后反汇编</p><p>将NtQueryInformationProcess给nop掉，然后保存一下</p><p>得到下图</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403110051363.png" alt="image-20240311005110312"></p><p>该程序通过VirtualProtect将原来的base的地址的函数进行异或操作</p><p>即为SMC程序，在执行时进行自解密</p><p>在第二个virtualprotect函数处下断点进行动调（注意最后进入动调输入环节结束后需要手动按F9执行到断点所在位置处）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403110129474.png" alt="image-20240311012900407"></p><p>然后F5即可得到反汇编代码，双击此时的Address，查看具体值，发现没有进行识别，手动全选然后c(force)，再P创建函数可以得到下图反汇编代码</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403112253901.png" alt="image-20240311225352833"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403112236366.png" alt="image-20240311223657299"></p><p>直接把上面条件一条一条搬下来使用z3求解</p><h5 id="exp-4"><a href="#exp-4" class="headerlink" title="exp:"></a>exp:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs cpp">from z3 <span class="hljs-keyword">import</span> *<br><br>a_0 =  <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_0&#x27;</span> )<br>a_1 =  <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_1&#x27;</span> )<br>a_2 =  <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_2&#x27;</span> )<br>a_3 =  <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_3&#x27;</span> )<br>a_4 =  <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_4&#x27;</span> )<br>a_5 =  <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_5&#x27;</span> )<br>a_6 =  <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_6&#x27;</span> )<br>a_7 =  <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_7&#x27;</span> )<br>a_8 =  <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_8&#x27;</span> )<br>a_9 =  <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_9&#x27;</span> )<br>a_10 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_10&#x27;</span>)<br>a_11 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_11&#x27;</span>)<br>a_12 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_12&#x27;</span>)<br>a_13 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_13&#x27;</span>)<br>a_14 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_14&#x27;</span>)<br>a_15 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_15&#x27;</span>)<br>a_16 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_16&#x27;</span>)<br>a_17 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_17&#x27;</span>)<br>a_18 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_18&#x27;</span>)<br>a_19 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_19&#x27;</span>)<br>a_20 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_20&#x27;</span>)<br>a_21 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_21&#x27;</span>)<br>a_22 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_22&#x27;</span>)<br>a_23 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_23&#x27;</span>)<br>a_24 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_24&#x27;</span>)<br>a_25 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_25&#x27;</span>)<br>a_26 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_26&#x27;</span>)<br>a_27 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_27&#x27;</span>)<br>a_28 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_28&#x27;</span>)<br>a_29 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_29&#x27;</span>)<br>a_30 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_30&#x27;</span>)<br>a_31 = <span class="hljs-built_in">Int</span>(<span class="hljs-string">&#x27;a_31&#x27;</span>)<br>v1 = a_25;<br>v2 = a_21;<br>v3 = a_31;<br>v4 = a_29;<br>v5 = a_0;<br>v6 = a_23;<br>v7 = a_8;<br>v8 = a_28;<br>v9 = a_12;<br>v10 = a_3;<br>v11 = a_2;<br>v19 = a_30;<br>v15 = a_18;<br>v16 = a_24;<br>v27 = a_11;<br>v17 = a_26;<br>v30 = a_14;<br>v40 = a_7;<br>v26 = a_20;<br>v37 = <span class="hljs-number">2</span> * v26;<br>v42 = a_22;<br>v28 = a_1;<br>v25 = a_27;<br>v21 = a_19;<br>v23 = a_16;<br>v31 = a_13;<br>v29 = a_10;<br>v41 = a_5;<br>v24 = a_4;<br>v20 = a_15;<br>v39 = a_17;<br>v22 = a_6;<br>v18 = a_9;<br>s=<span class="hljs-built_in">Solver</span>()<br><br>v37 = <span class="hljs-number">2</span> * v26<br>s.<span class="hljs-built_in">add</span>( v18 + <span class="hljs-number">201</span> * v24 + <span class="hljs-number">194</span> * v10 + <span class="hljs-number">142</span> * v20 + <span class="hljs-number">114</span> * v39 + <span class="hljs-number">103</span> * v11 + <span class="hljs-number">52</span> * (v17 + v31) + ((v9 + v23) * <span class="hljs-number">64</span>) + <span class="hljs-number">14</span> * (v21 + <span class="hljs-number">4</span> * v25 + v25) + <span class="hljs-number">9</span> * (v40 + <span class="hljs-number">23</span> * v27 + v2 + <span class="hljs-number">3</span> * v1 + <span class="hljs-number">4</span> * v2 + <span class="hljs-number">4</span> * v6) + <span class="hljs-number">5</span> * (v16 + <span class="hljs-number">23</span> * v30 + <span class="hljs-number">2</span> * (v3 + <span class="hljs-number">2</span> * v19) + <span class="hljs-number">5</span> * v5 + <span class="hljs-number">39</span> * v15 + <span class="hljs-number">51</span> * v4) + <span class="hljs-number">24</span> * (v8 + <span class="hljs-number">10</span> * v28 + <span class="hljs-number">4</span> * (v42 + v7 + <span class="hljs-number">2</span> * v26)) + <span class="hljs-number">62</span> * v22 + <span class="hljs-number">211</span> * v41 + <span class="hljs-number">212</span> * v29 == <span class="hljs-number">296473</span>  )<br>v38 = <span class="hljs-number">2</span> * v16<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">207</span> * v41 + <span class="hljs-number">195</span> * v22 + <span class="hljs-number">151</span> * v40 + <span class="hljs-number">57</span> * v5 + <span class="hljs-number">118</span> * v6 + <span class="hljs-number">222</span> * v42 + <span class="hljs-number">103</span> * v7 + <span class="hljs-number">181</span> * v8 + <span class="hljs-number">229</span> * v9 + <span class="hljs-number">142</span> * v31 + <span class="hljs-number">51</span> * v29 + <span class="hljs-number">122</span> * (v26 + v20) + <span class="hljs-number">91</span> * (v2 + <span class="hljs-number">2</span> * v16) + <span class="hljs-number">107</span> * (v27 + v25) + <span class="hljs-number">81</span> * (v17 + <span class="hljs-number">2</span> * v18 + v18) + <span class="hljs-number">45</span> * (v19 + <span class="hljs-number">2</span> * (v11 + v24) + v11 + v24) + <span class="hljs-number">4</span> * (<span class="hljs-number">3</span> * (v23 + a_19 + <span class="hljs-number">2</span> * v23 + <span class="hljs-number">5</span> * v4) + v39 + <span class="hljs-number">29</span> * (v10 + v1) + <span class="hljs-number">25</span> * v15) + <span class="hljs-number">26</span> * v28 + <span class="hljs-number">101</span> * v30 + <span class="hljs-number">154</span> * v3 == <span class="hljs-number">354358</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">177</span> * v40 + <span class="hljs-number">129</span> * v26 + <span class="hljs-number">117</span> * v42 + <span class="hljs-number">143</span> * v28 + <span class="hljs-number">65</span> * v8 + <span class="hljs-number">137</span> * v25 + <span class="hljs-number">215</span> * v21 + <span class="hljs-number">93</span> * v31 + <span class="hljs-number">235</span> * v39 + <span class="hljs-number">203</span> * v11 + <span class="hljs-number">15</span> * (v7 + <span class="hljs-number">17</span> * v30) + <span class="hljs-number">2</span> * (v24 + <span class="hljs-number">91</span> * v9 + <span class="hljs-number">95</span> * v29 + <span class="hljs-number">51</span> * v41 + <span class="hljs-number">81</span> * v20 + <span class="hljs-number">92</span> * v18 + <span class="hljs-number">112</span> * (v10 + v6) + <span class="hljs-number">32</span> * (v22 + <span class="hljs-number">2</span> * (v1 + v23)) + <span class="hljs-number">6</span> * (v2 + <span class="hljs-number">14</span> * v16 + <span class="hljs-number">19</span> * v15) + <span class="hljs-number">83</span> * v5 + <span class="hljs-number">53</span> * v4 + <span class="hljs-number">123</span> * v19) + v17 + <span class="hljs-number">175</span> * v27 + <span class="hljs-number">183</span> * v3 == <span class="hljs-number">448573</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">113</span> * v19 + <span class="hljs-number">74</span> * v3 + <span class="hljs-number">238</span> * v6 + <span class="hljs-number">140</span> * v2 + <span class="hljs-number">214</span> * v26 + <span class="hljs-number">242</span> * v8 + <span class="hljs-number">160</span> * v21 + <span class="hljs-number">136</span> * v23 + <span class="hljs-number">209</span> * v9 + <span class="hljs-number">220</span> * v31 + <span class="hljs-number">50</span> * v24 + <span class="hljs-number">125</span> * v10 + <span class="hljs-number">175</span> * v20 + <span class="hljs-number">23</span> * v39 + <span class="hljs-number">137</span> * v22 + <span class="hljs-number">149</span> * v18 + <span class="hljs-number">83</span> * (v4 + <span class="hljs-number">2</span> * v30) + <span class="hljs-number">21</span> * (<span class="hljs-number">9</span> * v29 + v16) + <span class="hljs-number">59</span> * (<span class="hljs-number">4</span> * v27 + v17) + <span class="hljs-number">41</span> * (v1 + v41) + <span class="hljs-number">13</span> * (v7 + <span class="hljs-number">11</span> * (v40 + v15) + <span class="hljs-number">6</span> * v42 + <span class="hljs-number">4</span> * (v28 + <span class="hljs-number">2</span> * v11) + v28 + <span class="hljs-number">2</span> * v11 + <span class="hljs-number">17</span> * v5) + <span class="hljs-number">36</span> * v25 == <span class="hljs-number">384306</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">229</span> * v21 + <span class="hljs-number">78</span> * v1 + v2 + v9 + <span class="hljs-number">133</span> * v27 + <span class="hljs-number">74</span> * v6 + <span class="hljs-number">69</span> * v26 + <span class="hljs-number">243</span> * v7 + <span class="hljs-number">98</span> * v28 + <span class="hljs-number">253</span> * v8 + <span class="hljs-number">142</span> * v25 + <span class="hljs-number">175</span> * v31 + <span class="hljs-number">105</span> * v41 + <span class="hljs-number">221</span> * v10 + <span class="hljs-number">121</span> * v39 + <span class="hljs-number">218</span> * (v19 + v29) + <span class="hljs-number">199</span> * (v24 + v30) + <span class="hljs-number">33</span> * (v40 + <span class="hljs-number">7</span> * v17) + <span class="hljs-number">4</span> * (<span class="hljs-number">27</span> * v20 + <span class="hljs-number">50</span> * v11 + <span class="hljs-number">45</span> * v18 + <span class="hljs-number">19</span> * (v3 + v42) + v16 + <span class="hljs-number">16</span> * v23 + <span class="hljs-number">52</span> * v4) + <span class="hljs-number">195</span> * v22 + <span class="hljs-number">211</span> * v5 + <span class="hljs-number">153</span> * v15 == <span class="hljs-number">424240</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">181</span> * v25 + <span class="hljs-number">61</span> * v2 + <span class="hljs-number">65</span> * v21 + <span class="hljs-number">58</span> * v31 + <span class="hljs-number">170</span> * v29 + <span class="hljs-number">143</span> * v24 + <span class="hljs-number">185</span> * v10 + <span class="hljs-number">86</span> * v11 + <span class="hljs-number">97</span> * v22 + <span class="hljs-number">235</span> * (v23 + v27) + <span class="hljs-number">3</span> * (<span class="hljs-number">53</span> * v41 + <span class="hljs-number">74</span> * (v8 + v3) + <span class="hljs-number">13</span> * (v42 + <span class="hljs-number">6</span> * v9) + <span class="hljs-number">11</span> * (v39 + <span class="hljs-number">7</span> * v20) + <span class="hljs-number">15</span> * (v18 + <span class="hljs-number">4</span> * v17) + v7 + <span class="hljs-number">35</span> * v1 + <span class="hljs-number">29</span> * v15) + <span class="hljs-number">4</span> * (<span class="hljs-number">57</span> * v6 + <span class="hljs-number">18</span> * (v5 + v37) + v28 + <span class="hljs-number">17</span> * v16 + <span class="hljs-number">55</span> * v30) + <span class="hljs-number">151</span> * v40 + <span class="hljs-number">230</span> * v4 + <span class="hljs-number">197</span> * v19 == <span class="hljs-number">421974</span> )<br>v33 = <span class="hljs-number">2</span> * v41<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">209</span> * v21 + <span class="hljs-number">249</span> * v30 + <span class="hljs-number">195</span> * v2 + <span class="hljs-number">219</span> * v25 + <span class="hljs-number">201</span> * v39 + <span class="hljs-number">85</span> * v18 + <span class="hljs-number">213</span> * (v17 + v31) + <span class="hljs-number">119</span> * (v11 + <span class="hljs-number">2</span> * v41) + <span class="hljs-number">29</span> * (<span class="hljs-number">8</span> * v24 + v40 + <span class="hljs-number">4</span> * v27 + v27) + <span class="hljs-number">2</span> * (v8 + <span class="hljs-number">55</span> * (<span class="hljs-number">2</span> * v29 + v19) + <span class="hljs-number">3</span> * (v10 + <span class="hljs-number">39</span> * v9 + <span class="hljs-number">2</span> * (v6 + <span class="hljs-number">20</span> * v20) + <span class="hljs-number">35</span> * v7) + <span class="hljs-number">4</span> * (v5 + <span class="hljs-number">31</span> * v42 + <span class="hljs-number">28</span> * v3) + <span class="hljs-number">26</span> * v28 + <span class="hljs-number">46</span> * (v37 + v16) + <span class="hljs-number">98</span> * v1) + <span class="hljs-number">53</span> * v23 + <span class="hljs-number">171</span> * v15 + <span class="hljs-number">123</span> * v4 == <span class="hljs-number">442074</span> )<br>v32 = <span class="hljs-number">2</span> * v18<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">162</span> * v19 + <span class="hljs-number">74</span> * v5 + <span class="hljs-number">28</span> * v27 + <span class="hljs-number">243</span> * v42 + <span class="hljs-number">123</span> * v28 + <span class="hljs-number">73</span> * v8 + <span class="hljs-number">166</span> * v23 + <span class="hljs-number">94</span> * v24 + <span class="hljs-number">113</span> * v11 + <span class="hljs-number">193</span> * v22 + <span class="hljs-number">122</span> * (v6 + <span class="hljs-number">2</span> * v7) + <span class="hljs-number">211</span> * (v10 + v25) + <span class="hljs-number">21</span> * (v17 + <span class="hljs-number">7</span> * v41) + <span class="hljs-number">11</span> * (v4 + <span class="hljs-number">23</span> * (v16 + v39) + <span class="hljs-number">2</span> * (v40 + <span class="hljs-number">5</span> * v30 + <span class="hljs-number">2</span> * (<span class="hljs-number">2</span> * v18 + v29) + <span class="hljs-number">2</span> * v18 + v29)) + <span class="hljs-number">5</span> * (<span class="hljs-number">46</span> * v9 + <span class="hljs-number">26</span> * v20 + <span class="hljs-number">4</span> * (v31 + <span class="hljs-number">2</span> * v21) + v15 + <span class="hljs-number">27</span> * v2 + <span class="hljs-number">10</span> * v1) + <span class="hljs-number">36</span> * (v3 + <span class="hljs-number">5</span> * v26) == <span class="hljs-number">376007</span> )<br>v35 = v25 + v30<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">63</span> * v19 + <span class="hljs-number">143</span> * v5 + <span class="hljs-number">250</span> * v6 + <span class="hljs-number">136</span> * v2 + <span class="hljs-number">214</span> * v40 + <span class="hljs-number">62</span> * v26 + <span class="hljs-number">221</span> * v42 + <span class="hljs-number">226</span> * v7 + <span class="hljs-number">171</span> * v28 + <span class="hljs-number">178</span> * v8 + <span class="hljs-number">244</span> * v23 + (v9 * <span class="hljs-number">128</span>) + <span class="hljs-number">150</span> * v31 + <span class="hljs-number">109</span> * v29 + <span class="hljs-number">70</span> * v41 + <span class="hljs-number">127</span> * v20 + <span class="hljs-number">204</span> * v39 + <span class="hljs-number">121</span> * v22 + <span class="hljs-number">173</span> * v18 + <span class="hljs-number">69</span> * (v25 + v30 + v27) + <span class="hljs-number">74</span> * (v16 + <span class="hljs-number">2</span> * v15 + v15) + <span class="hljs-number">22</span> * (<span class="hljs-number">7</span> * v24 + v17 + <span class="hljs-number">10</span> * v11) + <span class="hljs-number">40</span> * (v1 + <span class="hljs-number">4</span> * v21 + v21) + <span class="hljs-number">81</span> * v10 + <span class="hljs-number">94</span> * v4 + <span class="hljs-number">84</span> * v3 == <span class="hljs-number">411252</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">229</span> * v15 + <span class="hljs-number">121</span> * v4 + <span class="hljs-number">28</span> * v30 + <span class="hljs-number">206</span> * v16 + <span class="hljs-number">145</span> * v27 + <span class="hljs-number">41</span> * v1 + <span class="hljs-number">247</span> * v6 + <span class="hljs-number">118</span> * v26 + <span class="hljs-number">241</span> * v28 + <span class="hljs-number">79</span> * v8 + <span class="hljs-number">102</span> * v25 + <span class="hljs-number">124</span> * v23 + <span class="hljs-number">65</span> * v9 + <span class="hljs-number">68</span> * v31 + <span class="hljs-number">239</span> * v17 + <span class="hljs-number">148</span> * v24 + <span class="hljs-number">245</span> * v39 + <span class="hljs-number">115</span> * v11 + <span class="hljs-number">163</span> * v22 + <span class="hljs-number">137</span> * v18 + <span class="hljs-number">53</span> * (v5 + <span class="hljs-number">2</span> * v29) + <span class="hljs-number">126</span> * (v40 + <span class="hljs-number">2</span> * v10) + <span class="hljs-number">38</span> * (v7 + v21 + <span class="hljs-number">4</span> * v7 + <span class="hljs-number">6</span> * v41) + <span class="hljs-number">12</span> * (v2 + <span class="hljs-number">16</span> * v42) + <span class="hljs-number">109</span> * v20 + <span class="hljs-number">232</span> * v3 + <span class="hljs-number">47</span> * v19 == <span class="hljs-number">435012</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">209</span> * v21 + <span class="hljs-number">233</span> * v40 + <span class="hljs-number">93</span> * v1 + <span class="hljs-number">241</span> * v2 + <span class="hljs-number">137</span> * v8 + <span class="hljs-number">249</span> * v17 + <span class="hljs-number">188</span> * v29 + <span class="hljs-number">86</span> * v24 + <span class="hljs-number">246</span> * v10 + <span class="hljs-number">149</span> * v20 + <span class="hljs-number">99</span> * v11 + <span class="hljs-number">37</span> * v22 + <span class="hljs-number">219</span> * v18 + <span class="hljs-number">17</span> * (v6 + <span class="hljs-number">10</span> * v25) + <span class="hljs-number">49</span> * (v5 + <span class="hljs-number">3</span> * v3 + <span class="hljs-number">4</span> * v28 + v28) + <span class="hljs-number">5</span> * (<span class="hljs-number">16</span> * v39 + <span class="hljs-number">11</span> * (v41 + <span class="hljs-number">2</span> * v27 + v27) + <span class="hljs-number">12</span> * v7 + v31 + <span class="hljs-number">30</span> * v16 + <span class="hljs-number">27</span> * v19) + <span class="hljs-number">18</span> * (v23 + <span class="hljs-number">2</span> * (v4 + v26 + <span class="hljs-number">2</span> * v4) + v4 + v26 + <span class="hljs-number">2</span> * v4) + <span class="hljs-number">24</span> * v9 + <span class="hljs-number">109</span> * v42 + <span class="hljs-number">183</span> * v30 + <span class="hljs-number">154</span> * v15 == <span class="hljs-number">392484</span> )<br>v34 = <span class="hljs-number">2</span> * v31<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">155</span> * v15 + <span class="hljs-number">247</span> * v40 + <span class="hljs-number">157</span> * v28 + <span class="hljs-number">119</span> * v23 + <span class="hljs-number">161</span> * v17 + <span class="hljs-number">133</span> * v20 + <span class="hljs-number">85</span> * v22 + <span class="hljs-number">229</span> * (v7 + v24) + <span class="hljs-number">123</span> * (<span class="hljs-number">2</span> * v31 + v42) + <span class="hljs-number">21</span> * (v41 + <span class="hljs-number">12</span> * v30) + <span class="hljs-number">55</span> * (v9 + v5 + v18 + <span class="hljs-number">2</span> * v5) + <span class="hljs-number">15</span> * (v3 + <span class="hljs-number">16</span> * v10 + <span class="hljs-number">9</span> * v21) + <span class="hljs-number">2</span> * (v2 + <span class="hljs-number">115</span> * v29 + <span class="hljs-number">111</span> * v16 + <span class="hljs-number">26</span> * v6 + <span class="hljs-number">88</span> * v8 + <span class="hljs-number">73</span> * v39 + <span class="hljs-number">71</span> * v11 + <span class="hljs-number">28</span> * (v26 + <span class="hljs-number">2</span> * (v25 + <span class="hljs-number">2</span> * v1)) + <span class="hljs-number">51</span> * v27 + <span class="hljs-number">99</span> * v4 + <span class="hljs-number">125</span> * v19) == <span class="hljs-number">437910</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">220</span> * v3 + <span class="hljs-number">200</span> * v4 + <span class="hljs-number">139</span> * v15 + <span class="hljs-number">33</span> * v5 + <span class="hljs-number">212</span> * v30 + <span class="hljs-number">191</span> * v16 + <span class="hljs-number">30</span> * v27 + <span class="hljs-number">233</span> * v1 + <span class="hljs-number">246</span> * v6 + <span class="hljs-number">89</span> * v2 + <span class="hljs-number">252</span> * v40 + <span class="hljs-number">223</span> * v42 + <span class="hljs-number">19</span> * v25 + <span class="hljs-number">141</span> * v21 + <span class="hljs-number">163</span> * v9 + <span class="hljs-number">185</span> * v17 + <span class="hljs-number">136</span> * v31 + <span class="hljs-number">46</span> * v24 + <span class="hljs-number">109</span> * v10 + <span class="hljs-number">217</span> * v39 + <span class="hljs-number">75</span> * v22 + <span class="hljs-number">157</span> * v18 + <span class="hljs-number">125</span> * (v11 + v19) + <span class="hljs-number">104</span> * (v33 + v20) + <span class="hljs-number">43</span> * (v28 + <span class="hljs-number">2</span> * v29 + v29) + <span class="hljs-number">32</span> * (v8 + v7 + <span class="hljs-number">2</span> * v8 + <span class="hljs-number">2</span> * (v23 + v26)) == <span class="hljs-number">421905</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">211</span> * v24 + <span class="hljs-number">63</span> * v15 + <span class="hljs-number">176</span> * v5 + <span class="hljs-number">169</span> * v16 + <span class="hljs-number">129</span> * v27 + <span class="hljs-number">146</span> * v40 + <span class="hljs-number">111</span> * v26 + <span class="hljs-number">68</span> * v42 + <span class="hljs-number">39</span> * v25 + <span class="hljs-number">188</span> * v23 + <span class="hljs-number">130</span> * v9 + (v31 * <span class="hljs-number">64</span>) + <span class="hljs-number">91</span> * v41 + <span class="hljs-number">208</span> * v20 + <span class="hljs-number">145</span> * v39 + <span class="hljs-number">247</span> * v18 + <span class="hljs-number">93</span> * (v22 + v17) + <span class="hljs-number">71</span> * (v6 + <span class="hljs-number">2</span> * v11) + <span class="hljs-number">103</span> * (v8 + <span class="hljs-number">2</span> * v30) + <span class="hljs-number">6</span> * (v21 + <span class="hljs-number">10</span> * v28 + <span class="hljs-number">28</span> * v7 + <span class="hljs-number">9</span> * v29 + <span class="hljs-number">19</span> * v2 + <span class="hljs-number">24</span> * v1 + <span class="hljs-number">22</span> * v3) + <span class="hljs-number">81</span> * v10 + <span class="hljs-number">70</span> * v4 + <span class="hljs-number">23</span> * v19 == <span class="hljs-number">356282</span> )<br>v12 = v10 + <span class="hljs-number">2</span> * (v31 + <span class="hljs-number">4</span> * (v29 + v17)) + v31 + <span class="hljs-number">4</span> * (v29 + v17)<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">94</span> * v42 + <span class="hljs-number">101</span> * v2 + <span class="hljs-number">152</span> * v40 + <span class="hljs-number">200</span> * v7 + <span class="hljs-number">226</span> * v8 + <span class="hljs-number">211</span> * v23 + <span class="hljs-number">121</span> * v24 + <span class="hljs-number">74</span> * v11 + <span class="hljs-number">166</span> * v18 + ((v6 + <span class="hljs-number">3</span> * v28) * <span class="hljs-number">64</span>) + <span class="hljs-number">41</span> * (<span class="hljs-number">4</span> * v9 + v21) + <span class="hljs-number">23</span> * (v39 + <span class="hljs-number">11</span> * v41) + <span class="hljs-number">7</span> * (v20 + <span class="hljs-number">10</span> * v25 + <span class="hljs-number">2</span> * v12 + v12) + <span class="hljs-number">3</span> * (<span class="hljs-number">78</span> * v30 + <span class="hljs-number">81</span> * v16 + <span class="hljs-number">55</span> * v27 + <span class="hljs-number">73</span> * v1 + <span class="hljs-number">4</span> * v26 + v15 + <span class="hljs-number">85</span> * v3 + <span class="hljs-number">65</span> * v19) + <span class="hljs-number">62</span> * v22 + <span class="hljs-number">88</span> * v5 + <span class="hljs-number">110</span> * v4 == <span class="hljs-number">423091</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">133</span> * v22 + <span class="hljs-number">175</span> * v15 + <span class="hljs-number">181</span> * v30 + <span class="hljs-number">199</span> * v16 + <span class="hljs-number">123</span> * v27 + <span class="hljs-number">242</span> * v1 + <span class="hljs-number">75</span> * v6 + <span class="hljs-number">69</span> * v2 + <span class="hljs-number">153</span> * v40 + <span class="hljs-number">33</span> * v26 + <span class="hljs-number">100</span> * v42 + <span class="hljs-number">229</span> * v7 + <span class="hljs-number">177</span> * v8 + <span class="hljs-number">134</span> * v31 + <span class="hljs-number">179</span> * v29 + <span class="hljs-number">129</span> * v41 + <span class="hljs-number">14</span> * v10 + <span class="hljs-number">247</span> * v24 + <span class="hljs-number">228</span> * v20 + <span class="hljs-number">92</span> * v11 + <span class="hljs-number">86</span> * (v9 + v32) + <span class="hljs-number">94</span> * (v23 + v21) + <span class="hljs-number">37</span> * (v17 + <span class="hljs-number">4</span> * v3) + <span class="hljs-number">79</span> * (v25 + <span class="hljs-number">2</span> * v28) + <span class="hljs-number">72</span> * v5 + <span class="hljs-number">93</span> * v39 + <span class="hljs-number">152</span> * v4 + <span class="hljs-number">214</span> * v19 == <span class="hljs-number">391869</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">211</span> * v24 + <span class="hljs-number">213</span> * v18 + <span class="hljs-number">197</span> * v40 + <span class="hljs-number">159</span> * v25 + <span class="hljs-number">117</span> * v21 + <span class="hljs-number">119</span> * v9 + <span class="hljs-number">98</span> * v17 + <span class="hljs-number">218</span> * v41 + <span class="hljs-number">106</span> * v39 + <span class="hljs-number">69</span> * v11 + <span class="hljs-number">43</span> * (v2 + v29 + <span class="hljs-number">2</span> * v2) + <span class="hljs-number">116</span> * (v4 + v10 + v37) + <span class="hljs-number">5</span> * (v42 + <span class="hljs-number">9</span> * v23 + <span class="hljs-number">35</span> * v20 + <span class="hljs-number">37</span> * v31) + <span class="hljs-number">11</span> * (v16 + <span class="hljs-number">13</span> * v27 + <span class="hljs-number">5</span> * v5 + <span class="hljs-number">8</span> * v30) + <span class="hljs-number">6</span> * (<span class="hljs-number">29</span> * v28 + <span class="hljs-number">25</span> * v8 + <span class="hljs-number">38</span> * v22 + v15 + <span class="hljs-number">13</span> * v1 + <span class="hljs-number">10</span> * v3) + <span class="hljs-number">136</span> * v7 + <span class="hljs-number">142</span> * v6 + <span class="hljs-number">141</span> * v19 == <span class="hljs-number">376566</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">173</span> * v3 + <span class="hljs-number">109</span> * v15 + <span class="hljs-number">61</span> * v30 + <span class="hljs-number">187</span> * v1 + <span class="hljs-number">79</span> * v6 + <span class="hljs-number">53</span> * v40 + <span class="hljs-number">184</span> * v21 + <span class="hljs-number">43</span> * v23 + <span class="hljs-number">41</span> * v9 + <span class="hljs-number">166</span> * v31 + <span class="hljs-number">193</span> * v41 + <span class="hljs-number">58</span> * v24 + <span class="hljs-number">146</span> * v10 + (v20 * <span class="hljs-number">64</span>) + <span class="hljs-number">89</span> * v39 + <span class="hljs-number">121</span> * v11 + <span class="hljs-number">5</span> * (v17 + <span class="hljs-number">23</span> * v8) + <span class="hljs-number">7</span> * (<span class="hljs-number">29</span> * v18 + v29 + <span class="hljs-number">4</span> * v7) + <span class="hljs-number">13</span> * (<span class="hljs-number">3</span> * v42 + v16 + <span class="hljs-number">7</span> * v26 + <span class="hljs-number">13</span> * v2) + <span class="hljs-number">3</span> * (v4 + <span class="hljs-number">83</span> * v5 + <span class="hljs-number">51</span> * v27 + <span class="hljs-number">33</span> * v22 + <span class="hljs-number">8</span> * (v19 + <span class="hljs-number">4</span> * v28) + <span class="hljs-number">18</span> * v25) == <span class="hljs-number">300934</span> )<br>v36 = <span class="hljs-number">3</span> * v21<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">78</span> * v1 + <span class="hljs-number">131</span> * v5 + <span class="hljs-number">185</span> * v16 + <span class="hljs-number">250</span> * v40 + <span class="hljs-number">90</span> * v26 + <span class="hljs-number">129</span> * v42 + <span class="hljs-number">255</span> * v28 + <span class="hljs-number">206</span> * v8 + <span class="hljs-number">239</span> * v25 + <span class="hljs-number">150</span> * v10 + <span class="hljs-number">253</span> * v39 + <span class="hljs-number">104</span> * v22 + <span class="hljs-number">58</span> * (v2 + <span class="hljs-number">2</span> * v7) + <span class="hljs-number">96</span> * (v15 + v31) + <span class="hljs-number">117</span> * (v9 + <span class="hljs-number">2</span> * v4) + <span class="hljs-number">27</span> * (v17 + <span class="hljs-number">8</span> * v18 + v18) + <span class="hljs-number">19</span> * (v23 + <span class="hljs-number">3</span> * v21 + <span class="hljs-number">4</span> * v29 + v29) + <span class="hljs-number">7</span> * (<span class="hljs-number">22</span> * v41 + <span class="hljs-number">3</span> * (v11 + <span class="hljs-number">11</span> * v24) + v3 + <span class="hljs-number">29</span> * v6 + <span class="hljs-number">14</span> * v27) + <span class="hljs-number">109</span> * v20 + <span class="hljs-number">102</span> * v30 + <span class="hljs-number">100</span> * v19 == <span class="hljs-number">401351</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">233</span> * v19 + <span class="hljs-number">71</span> * v5 + <span class="hljs-number">209</span> * v27 + <span class="hljs-number">82</span> * v6 + <span class="hljs-number">58</span> * v26 + <span class="hljs-number">53</span> * v25 + <span class="hljs-number">113</span> * v23 + <span class="hljs-number">206</span> * v31 + <span class="hljs-number">39</span> * v41 + <span class="hljs-number">163</span> * v20 + <span class="hljs-number">222</span> * v11 + <span class="hljs-number">191</span> * v18 + <span class="hljs-number">123</span> * (v7 + v40) + <span class="hljs-number">69</span> * (v9 + <span class="hljs-number">2</span> * v22 + v22) + <span class="hljs-number">9</span> * (v3 + <span class="hljs-number">8</span> * v24 + <span class="hljs-number">7</span> * (<span class="hljs-number">3</span> * v1 + v28) + <span class="hljs-number">5</span> * v16 + <span class="hljs-number">19</span> * v30) + <span class="hljs-number">4</span> * (v15 + <span class="hljs-number">26</span> * v17 + <span class="hljs-number">61</span> * v29 + <span class="hljs-number">43</span> * v42 + <span class="hljs-number">49</span> * v2 + <span class="hljs-number">32</span> * v4) + <span class="hljs-number">10</span> * (<span class="hljs-number">7</span> * (v8 + v36) + v39 + <span class="hljs-number">12</span> * v10) == <span class="hljs-number">368427</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">139</span> * v30 + <span class="hljs-number">53</span> * v5 + <span class="hljs-number">158</span> * v16 + <span class="hljs-number">225</span> * v1 + <span class="hljs-number">119</span> * v6 + <span class="hljs-number">67</span> * v2 + <span class="hljs-number">213</span> * v40 + <span class="hljs-number">188</span> * v28 + <span class="hljs-number">152</span> * v8 + <span class="hljs-number">187</span> * v21 + <span class="hljs-number">129</span> * v23 + <span class="hljs-number">54</span> * v9 + <span class="hljs-number">125</span> * v17 + <span class="hljs-number">170</span> * v24 + <span class="hljs-number">184</span> * v11 + <span class="hljs-number">226</span> * v22 + <span class="hljs-number">253</span> * v18 + <span class="hljs-number">26</span> * (v29 + v41) + <span class="hljs-number">97</span> * (v4 + <span class="hljs-number">2</span> * v25) + <span class="hljs-number">39</span> * (<span class="hljs-number">5</span> * v26 + v27) + <span class="hljs-number">21</span> * (v39 + <span class="hljs-number">8</span> * v42) + <span class="hljs-number">12</span> * (<span class="hljs-number">17</span> * v10 + v31 + <span class="hljs-number">15</span> * v7 + <span class="hljs-number">12</span> * v19) + <span class="hljs-number">165</span> * v20 + <span class="hljs-number">88</span> * v15 + <span class="hljs-number">157</span> * v3 == <span class="hljs-number">403881</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">114</span> * v3 + <span class="hljs-number">61</span> * v27 + <span class="hljs-number">134</span> * v40 + <span class="hljs-number">62</span> * v42 + <span class="hljs-number">89</span> * v9 + <span class="hljs-number">211</span> * v17 + <span class="hljs-number">163</span> * v41 + <span class="hljs-number">66</span> * v24 + <span class="hljs-number">201</span> * (v7 + v18) + <span class="hljs-number">47</span> * (<span class="hljs-number">5</span> * v16 + v22) + <span class="hljs-number">74</span> * (v4 + v31) + <span class="hljs-number">142</span> * (v2 + v28) + <span class="hljs-number">35</span> * (v20 + <span class="hljs-number">6</span> * v26) + <span class="hljs-number">39</span> * (v15 + <span class="hljs-number">6</span> * v30) + <span class="hljs-number">27</span> * (v25 + <span class="hljs-number">9</span> * v23 + <span class="hljs-number">8</span> * v6) + <span class="hljs-number">4</span> * (v21 + <span class="hljs-number">63</span> * v19 + <span class="hljs-number">2</span> * (v1 + <span class="hljs-number">12</span> * (v10 + v5) + <span class="hljs-number">8</span> * v11 + <span class="hljs-number">26</span> * v29)) + <span class="hljs-number">10</span> * (v8 + <span class="hljs-number">4</span> * v39 + v39) == <span class="hljs-number">382979</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">122</span> * v25 + <span class="hljs-number">225</span> * v21 + <span class="hljs-number">52</span> * v23 + <span class="hljs-number">253</span> * v9 + <span class="hljs-number">197</span> * v17 + <span class="hljs-number">187</span> * v31 + <span class="hljs-number">181</span> * v29 + <span class="hljs-number">183</span> * v41 + <span class="hljs-number">47</span> * v20 + <span class="hljs-number">229</span> * v39 + <span class="hljs-number">88</span> * v22 + <span class="hljs-number">127</span> * (v10 + v32) + <span class="hljs-number">37</span> * (v7 + <span class="hljs-number">3</span> * v3) + ((v11 + <span class="hljs-number">2</span> * v30 + v30) * <span class="hljs-number">64</span>) + <span class="hljs-number">7</span> * (<span class="hljs-number">21</span> * v8 + v27 + <span class="hljs-number">18</span> * (v4 + v1 + v38)) + <span class="hljs-number">6</span> * (<span class="hljs-number">23</span> * v24 + v26 + <span class="hljs-number">17</span> * v2 + <span class="hljs-number">39</span> * v6) + <span class="hljs-number">10</span> * (v5 + <span class="hljs-number">11</span> * v28 + <span class="hljs-number">21</span> * v42) + <span class="hljs-number">149</span> * v19 + <span class="hljs-number">165</span> * v40 + <span class="hljs-number">121</span> * v15 == <span class="hljs-number">435695</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">165</span> * v20 + <span class="hljs-number">223</span> * v4 + <span class="hljs-number">249</span> * v5 + <span class="hljs-number">199</span> * v1 + <span class="hljs-number">135</span> * v2 + <span class="hljs-number">133</span> * v26 + <span class="hljs-number">254</span> * v42 + <span class="hljs-number">111</span> * v7 + <span class="hljs-number">189</span> * v28 + <span class="hljs-number">221</span> * v25 + <span class="hljs-number">115</span> * v21 + <span class="hljs-number">186</span> * v9 + <span class="hljs-number">79</span> * v41 + <span class="hljs-number">217</span> * v24 + <span class="hljs-number">122</span> * v11 + <span class="hljs-number">38</span> * v18 + <span class="hljs-number">109</span> * (v34 + v29) + <span class="hljs-number">14</span> * (v8 + <span class="hljs-number">17</span> * v40 + <span class="hljs-number">8</span> * (v6 + v38)) + <span class="hljs-number">4</span> * (<span class="hljs-number">11</span> * (<span class="hljs-number">5</span> * v30 + v39) + <span class="hljs-number">6</span> * (v10 + <span class="hljs-number">2</span> * v22) + v27 + <span class="hljs-number">52</span> * v17 + <span class="hljs-number">50</span> * v23) + <span class="hljs-number">229</span> * v15 + <span class="hljs-number">86</span> * v3 + <span class="hljs-number">234</span> * v19 == <span class="hljs-number">453748</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">181</span> * v25 + <span class="hljs-number">94</span> * v42 + <span class="hljs-number">125</span> * v1 + <span class="hljs-number">226</span> * v26 + <span class="hljs-number">155</span> * v7 + <span class="hljs-number">95</span> * v21 + <span class="hljs-number">212</span> * v17 + <span class="hljs-number">91</span> * v31 + <span class="hljs-number">194</span> * v29 + <span class="hljs-number">98</span> * v24 + <span class="hljs-number">166</span> * v11 + <span class="hljs-number">120</span> * v22 + <span class="hljs-number">59</span> * v18 + <span class="hljs-number">32</span> * (v9 + v8) + <span class="hljs-number">158</span> * (v6 + v5) + <span class="hljs-number">101</span> * (v41 + v19) + <span class="hljs-number">63</span> * (v4 + <span class="hljs-number">2</span> * v23) + <span class="hljs-number">67</span> * (v28 + <span class="hljs-number">2</span> * v20) + <span class="hljs-number">11</span> * (v39 + <span class="hljs-number">10</span> * v16 + <span class="hljs-number">11</span> * v10) + <span class="hljs-number">39</span> * (v30 + <span class="hljs-number">4</span> * (v2 + v15)) + <span class="hljs-number">233</span> * v40 + <span class="hljs-number">56</span> * v27 + <span class="hljs-number">225</span> * v3 == <span class="hljs-number">358321</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">229</span> * v21 + <span class="hljs-number">135</span> * v4 + <span class="hljs-number">197</span> * v15 + <span class="hljs-number">118</span> * v5 + <span class="hljs-number">143</span> * v16 + <span class="hljs-number">134</span> * v6 + <span class="hljs-number">204</span> * v40 + <span class="hljs-number">173</span> * v26 + <span class="hljs-number">81</span> * v7 + <span class="hljs-number">60</span> * v28 + <span class="hljs-number">58</span> * v8 + <span class="hljs-number">179</span> * v23 + <span class="hljs-number">142</span> * v9 + <span class="hljs-number">178</span> * v17 + <span class="hljs-number">230</span> * v31 + <span class="hljs-number">148</span> * v29 + <span class="hljs-number">224</span> * v41 + <span class="hljs-number">194</span> * v24 + <span class="hljs-number">223</span> * v10 + <span class="hljs-number">87</span> * v20 + <span class="hljs-number">200</span> * v39 + <span class="hljs-number">233</span> * v11 + <span class="hljs-number">49</span> * v22 + <span class="hljs-number">127</span> * v35 + <span class="hljs-number">31</span> * (<span class="hljs-number">4</span> * v27 + v18) + <span class="hljs-number">42</span> * (v1 + <span class="hljs-number">6</span> * v2) + <span class="hljs-number">109</span> * v42 + <span class="hljs-number">75</span> * v3 + <span class="hljs-number">165</span> * v19 == <span class="hljs-number">456073</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">41</span> * v4 + <span class="hljs-number">253</span> * v3 + <span class="hljs-number">163</span> * v15 + <span class="hljs-number">193</span> * v30 + <span class="hljs-number">155</span> * v16 + <span class="hljs-number">113</span> * v27 + <span class="hljs-number">131</span> * v6 + <span class="hljs-number">55</span> * v2 + <span class="hljs-number">21</span> * v40 + <span class="hljs-number">53</span> * v26 + <span class="hljs-number">13</span> * v8 + <span class="hljs-number">201</span> * v25 + <span class="hljs-number">237</span> * v9 + <span class="hljs-number">223</span> * v31 + <span class="hljs-number">95</span> * v24 + <span class="hljs-number">194</span> * v20 + <span class="hljs-number">62</span> * v39 + <span class="hljs-number">119</span> * v11 + <span class="hljs-number">171</span> * v22 + <span class="hljs-number">135</span> * v18 + <span class="hljs-number">69</span> * (v10 + <span class="hljs-number">3</span> * v28) + <span class="hljs-number">211</span> * (v1 + v29) + <span class="hljs-number">4</span> * (<span class="hljs-number">43</span> * v7 + v42 + <span class="hljs-number">40</span> * v17) + <span class="hljs-number">6</span> * (v5 + <span class="hljs-number">33</span> * v41 + <span class="hljs-number">20</span> * (<span class="hljs-number">2</span> * v19 + v21) + <span class="hljs-number">24</span> * v23) == <span class="hljs-number">407135</span> )<br>v13 = v6 + v1 + <span class="hljs-number">8</span> * v6 + <span class="hljs-number">4</span> * (v8 + <span class="hljs-number">2</span> * v27)<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">111</span> * v19 + <span class="hljs-number">190</span> * v3 + <span class="hljs-number">149</span> * v4 + <span class="hljs-number">173</span> * v28 + <span class="hljs-number">118</span> * v23 + <span class="hljs-number">146</span> * v29 + <span class="hljs-number">179</span> * v10 + <span class="hljs-number">51</span> * v20 + <span class="hljs-number">49</span> * v39 + <span class="hljs-number">61</span> * v11 + <span class="hljs-number">125</span> * v22 + <span class="hljs-number">162</span> * v18 + <span class="hljs-number">214</span> * v35 + <span class="hljs-number">14</span> * (v34 + v24) + <span class="hljs-number">178</span> * (v41 + v16) + <span class="hljs-number">11</span> * (<span class="hljs-number">4</span> * v9 + v21 + <span class="hljs-number">17</span> * v42) + <span class="hljs-number">65</span> * (v26 + v17 + <span class="hljs-number">2</span> * v26 + <span class="hljs-number">2</span> * v5) + <span class="hljs-number">4</span> * (v7 + <span class="hljs-number">38</span> * v15 + <span class="hljs-number">4</span> * v13 + v13 + <span class="hljs-number">8</span> * v40 + <span class="hljs-number">43</span> * v2) == <span class="hljs-number">369835</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">27</span> * v27 + <span class="hljs-number">223</span> * v6 + <span class="hljs-number">147</span> * v26 + <span class="hljs-number">13</span> * v21 + <span class="hljs-number">35</span> * (v17 + <span class="hljs-number">7</span> * v4) + <span class="hljs-number">57</span> * (v19 + v32 + <span class="hljs-number">3</span> * v11) + <span class="hljs-number">11</span> * (v1 + <span class="hljs-number">17</span> * (v9 + v5) + <span class="hljs-number">10</span> * v16 + <span class="hljs-number">3</span> * v31) + <span class="hljs-number">2</span> * (<span class="hljs-number">53</span> * v23 + v25 + <span class="hljs-number">38</span> * v15 + <span class="hljs-number">43</span> * v42 + <span class="hljs-number">115</span> * v29 + <span class="hljs-number">61</span> * v22 + <span class="hljs-number">111</span> * (v10 + v40) + <span class="hljs-number">14</span> * (v20 + v7 + <span class="hljs-number">2</span> * v7 + <span class="hljs-number">8</span> * v28) + <span class="hljs-number">109</span> * v2 + <span class="hljs-number">100</span> * v41 + <span class="hljs-number">63</span> * v8) + <span class="hljs-number">93</span> * v39 + <span class="hljs-number">251</span> * v30 + <span class="hljs-number">131</span> * v3 == <span class="hljs-number">393303</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">116</span> * v9 + <span class="hljs-number">152</span> * v29 + <span class="hljs-number">235</span> * v20 + <span class="hljs-number">202</span> * v18 + <span class="hljs-number">85</span> * (v8 + <span class="hljs-number">3</span> * v11) + <span class="hljs-number">221</span> * (v16 + v40) + <span class="hljs-number">125</span> * (v33 + v24) + <span class="hljs-number">7</span> * (<span class="hljs-number">19</span> * v4 + <span class="hljs-number">9</span> * (v10 + <span class="hljs-number">2</span> * v25) + v2 + <span class="hljs-number">33</span> * v3 + <span class="hljs-number">32</span> * v19) + <span class="hljs-number">3</span> * (<span class="hljs-number">71</span> * v39 + <span class="hljs-number">43</span> * v22 + <span class="hljs-number">32</span> * (v17 + v26) + <span class="hljs-number">15</span> * (v5 + v6 + <span class="hljs-number">2</span> * v23) + v28 + <span class="hljs-number">74</span> * v31 + <span class="hljs-number">48</span> * v42) + <span class="hljs-number">10</span> * (v21 + <span class="hljs-number">11</span> * v30 + <span class="hljs-number">16</span> * v15) + <span class="hljs-number">136</span> * v7 + <span class="hljs-number">106</span> * v1 + <span class="hljs-number">41</span> * v27 == <span class="hljs-number">403661</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">127</span> * v4 + <span class="hljs-number">106</span> * v15 + <span class="hljs-number">182</span> * v30 + <span class="hljs-number">142</span> * v5 + <span class="hljs-number">159</span> * v16 + <span class="hljs-number">17</span> * v1 + <span class="hljs-number">211</span> * v6 + <span class="hljs-number">134</span> * v2 + <span class="hljs-number">199</span> * v7 + <span class="hljs-number">103</span> * v28 + <span class="hljs-number">247</span> * v23 + <span class="hljs-number">122</span> * v9 + <span class="hljs-number">95</span> * v41 + <span class="hljs-number">62</span> * v10 + <span class="hljs-number">203</span> * v39 + <span class="hljs-number">16</span> * v11 + <span class="hljs-number">41</span> * (<span class="hljs-number">6</span> * v42 + v25) + <span class="hljs-number">9</span> * (<span class="hljs-number">22</span> * v24 + v20 + <span class="hljs-number">27</span> * v31 + <span class="hljs-number">28</span> * v40) + <span class="hljs-number">10</span> * (v8 + v22 + v36 + <span class="hljs-number">8</span> * v17 + <span class="hljs-number">2</span> * (v22 + v36 + <span class="hljs-number">8</span> * v17) + <span class="hljs-number">13</span> * v29) + <span class="hljs-number">6</span> * (<span class="hljs-number">23</span> * v27 + v26) + <span class="hljs-number">213</span> * v18 + <span class="hljs-number">179</span> * v3 + <span class="hljs-number">43</span> * v19 == <span class="hljs-number">418596</span> )<br>s.<span class="hljs-built_in">add</span>( <span class="hljs-number">149</span> * v19 + v1 + <span class="hljs-number">133</span> * v22 + <span class="hljs-number">207</span> * v41 + <span class="hljs-number">182</span> * v26 + <span class="hljs-number">234</span> * v7 + <span class="hljs-number">199</span> * v8 + <span class="hljs-number">168</span> * v21 + <span class="hljs-number">58</span> * v10 + <span class="hljs-number">108</span> * v20 + <span class="hljs-number">142</span> * v18 + <span class="hljs-number">156</span> * (v9 + v25) + <span class="hljs-number">16</span> * (v29 + <span class="hljs-number">6</span> * v31) + <span class="hljs-number">126</span> * (v17 + <span class="hljs-number">2</span> * v39) + <span class="hljs-number">127</span> * (v4 + <span class="hljs-number">2</span> * v27 + v40) + <span class="hljs-number">49</span> * (v30 + <span class="hljs-number">4</span> * v16) + <span class="hljs-number">11</span> * (v5 + <span class="hljs-number">22</span> * v11) + <span class="hljs-number">5</span> * (v15 + v42 + <span class="hljs-number">45</span> * v24 + <span class="hljs-number">50</span> * v28) + <span class="hljs-number">109</span> * v2 + <span class="hljs-number">124</span> * v6 + <span class="hljs-number">123</span> * v3 == <span class="hljs-number">418697</span> )<br><br><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">check</span>())<br>m = s.<span class="hljs-built_in">model</span>()<br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><p>hgame{SMC_4nd_s0lv1ng_equ4t1Ons}</p><p>​</p>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>脱壳概念基础篇</title>
    <link href="/2024/03/09/%E8%84%B1%E5%A3%B3%E6%A6%82%E5%BF%B5%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2024/03/09/%E8%84%B1%E5%A3%B3%E6%A6%82%E5%BF%B5%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="脱壳概念基础篇"><a href="#脱壳概念基础篇" class="headerlink" title="脱壳概念基础篇"></a>脱壳概念基础篇</h1><h2 id="1-壳的加载过程"><a href="#1-壳的加载过程" class="headerlink" title="1.壳的加载过程"></a>1.壳的加载过程</h2><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091525508.jpg" alt="D526FEE13409303A711B38708D1DA3A5"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091525051.jpg" alt="6B2750CDF21D0BDFEE7205F0CCE1EECC"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091525840.jpg" alt="D085D8032C06EB770D41C400639DC93E"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091527534.jpg" alt="73BE13D70DB398A1094475005474168F"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091535891.jpg" alt="8B666B57B2FC5D05063D4258807AE268"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091529572.jpg" alt="3CA1B2D9DD07AFE07BCB56A42A81CE30"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091529499.jpg" alt="C1FD409CD88241B869A0F9CBC4FF5B77"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091529051.jpg" alt="1E188D8C87021FAF0223A61FAC2FAFE8"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091529086.jpg" alt="BA73F79F827B0AFC9CF0874C919E5D8F"></p><h2 id="2-脱壳技术"><a href="#2-脱壳技术" class="headerlink" title="2.脱壳技术"></a>2.脱壳技术</h2><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091530279.jpg" alt="82FC0C68A7CFF41CBD9459CD627B3BF2"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091530124.jpg" alt="87AB783DA928413A366272587A1240D8"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091531155.jpg" alt="7DD991BE0E746B2CE03B1CDB17D13726"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403091531953.jpg" alt="73BDBA0371A03D7B6BDF96CDED3DA3A0"></p>]]></content>
    
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SEH结构化异常处理</title>
    <link href="/2024/03/08/SEH%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2024/03/08/SEH%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="SEH结构化异常处理"><a href="#SEH结构化异常处理" class="headerlink" title="SEH结构化异常处理"></a>SEH结构化异常处理</h1><p>计算机领域异常：打断程序正常执行流程，不在期望之中的硬件和软件的异常</p><p>硬件一般指CPU抛出的问题，例如除以0，数据溢出等</p><p>软件一般指操作系统与程序通过exception语句抛出的异常</p><p>结构化异常处理和异常处理是微软对异常处理程序在实现上的不同</p><p>普通C++异常处理：使用3条附加的C++语句</p><p>try catch throw</p><p>作用：当正在执行的程序出现异常时，允许其找到安全出口。异常处理程序可捕获任何数据异常情况，包括C++类</p><p>try ……except……函数和try…… finally…… 不可以同时使用但是可以嵌套</p><p>异常程序可释放已获取资源，显示出的信息和程序内部状态供调试，使得调试从错误中恢复，尝试重新执行代码&#x2F;关闭程序</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403081357659.jpg" alt="1B0CEF4110F27A6AB2E6AB61E46B18BF"></p><h5 id="故障，例如页面故障——恢复到引起故障的指令之前的状态，然后再次执行一次，发生故障异常后程序仍能正常执行"><a href="#故障，例如页面故障——恢复到引起故障的指令之前的状态，然后再次执行一次，发生故障异常后程序仍能正常执行" class="headerlink" title="故障，例如页面故障——恢复到引起故障的指令之前的状态，然后再次执行一次，发生故障异常后程序仍能正常执行"></a>故障，例如页面故障——恢复到引起故障的指令之前的状态，然后再次执行一次，发生故障异常后程序仍能正常执行</h5><h5 id="陷阱——立即报告错误，返回地址为引起异常的下一条的地址"><a href="#陷阱——立即报告错误，返回地址为引起异常的下一条的地址" class="headerlink" title="陷阱——立即报告错误，返回地址为引起异常的下一条的地址"></a>陷阱——立即报告错误，返回地址为引起异常的下一条的地址</h5><h5 id="终止——不会报告精确位置且不允许重新执行"><a href="#终止——不会报告精确位置且不允许重新执行" class="headerlink" title="终止——不会报告精确位置且不允许重新执行"></a>终止——不会报告精确位置且不允许重新执行</h5><p>从左往右依次是——向量号 助记符 说明 类型 错误号 产生源 </p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403081404818.jpg" alt="6B224C0374F57D5BD91D9B9F7388B5BA"></p><p>SIMD 浮点异常</p><p>21-31 Intel 保留位</p><p>SEH 使得拥有回调函数的最后机会</p><h5 id="对齐检查-Alignment-check"><a href="#对齐检查-Alignment-check" class="headerlink" title="对齐检查 Alignment check"></a>对齐检查 Alignment check</h5><p>可由任何对内存数据的引用除法</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403081412997.jpg" alt="C93F7D6F9570D256D0D58473724EF27A"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403081413256.jpg" alt="3857FBB5337AFDC1E4E6EB0EEEAC12BF"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403081413890.jpg" alt="A630AC72A0F75FEC0C104F4392ED48E9"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403081414802.jpg" alt="BC228BFA2F76EE7A60519C7B9E56C4F1"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403081414164.jpg" alt="68EB2BFE87AF114E288BB1663A1C5F7A"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403081414821.jpg" alt="AC8F882F567902C05263024AE4D49DBB"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403081414977.jpg" alt="3A838A1BB8D0E036613D4634174AC584"></p>]]></content>
    
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows逆向基础知识</title>
    <link href="/2024/03/06/Windows%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/03/06/Windows%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows逆向基础知识"><a href="#Windows逆向基础知识" class="headerlink" title="Windows逆向基础知识"></a>Windows逆向基础知识</h1><h5 id="字节存储顺序："><a href="#字节存储顺序：" class="headerlink" title="字节存储顺序："></a>字节存储顺序：</h5><p>小端序和大端序，windows平台均为小端序（低字节数据放在低地址处）</p><h5 id="ASCII与UNICODE："><a href="#ASCII与UNICODE：" class="headerlink" title="ASCII与UNICODE："></a>ASCII与UNICODE：</h5><p>ASCII（美国信息交换标准码）：是一个7位编码，共128个代码，是现今最通用的单字节编码系统</p><p>UNiCODE：包括字符集，编码方案等，为了解决传统的字符数据局限而产生的，为每种语言的每一个字符设置了统一的二进制编码，以满足跨语言，跨平台的要求，宽字符集，是ASCII字符编码的一扩展，在Windows中，用2个字节对其进行编码。所有的字符都是16位，包括7位的ASCII，在高位填充0</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403061001713.jpg" alt="99F0E97DAE78F07211CF8D6901258F1E"></p><h5 id="windows-API-apple"><a href="#windows-API-apple" class="headerlink" title="windows API:apple:"></a>windows API:apple:</h5><p>API:全称叫应用程序编程接口，在windows程序设计领域发展初期，程序员所能使用的编程工具只有API函数，这些函数提供程序运行所需要的窗口管理，图形设备接口，内存管理等各项服务功能，这些功能以函数库的形式储备在一起，形成了windows应用程序编程接口，简称WIN API</p><p>WIN API子系统负责将API调用转换成windows操作系统的系统服务调用</p><p>windows提供了应用程序可利用的丰富的函数调用，这些函数调用采用动态链接库即DLL的形式实现</p><h5 id="三个主要的动态链接库："><a href="#三个主要的动态链接库：" class="headerlink" title="三个主要的动态链接库："></a>三个主要的动态链接库：</h5><p>kernel32.dll,user32.dll,gdi32.dll,分别提供操作系统核心功能服务（包括进程与线程控制，内存管理，文件访问等），用户接口（处理用户接口，包括键盘和鼠标的输入，窗口和菜单的管理等），图形设备接口（允许程序在屏幕和打印机上显示文本和图形)</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403061001808.jpg" alt="3060EEEF6FEEA20E418F9B1CD43EB968"></p><h4 id="windows常见的两个API函数："><a href="#windows常见的两个API函数：" class="headerlink" title="windows常见的两个API函数："></a>windows常见的两个API函数：</h4><h5 id="MessageBox函数："><a href="#MessageBox函数：" class="headerlink" title="MessageBox函数："></a>MessageBox函数：</h5><p>在user32.dll中，作用是创建和显示信息框</p><p>int  MessageBox{</p><p>HWND hWnd   ,&#x2F;&#x2F;父窗口句柄</p><p>LPCTSTR IpText  ,&#x2F;&#x2F;消息框文本地址（内容）</p><p>LPCTSTR IpCation ,&#x2F;&#x2F;消息框标题样式</p><p>UNIT  uType ,  &#x2F;&#x2F;消息框样式</p><p>}</p><p>ANSI版是MessageBoxA,Unicode版是MessageBoxW</p><p>父窗口句柄，是HWND格式的</p><p>句柄handle,32位的一个数值，windows需要使用很多句柄来标识例如应用程序的实例，窗口，图标，菜单，输出设备，文件等对象，程序通过调用windows函数获取句柄，然后在其他windows函数中使用句柄以引用它代表的对象，句柄的实际值对于程序来说无关紧要，这个值是在windows程序内部用来应用相应的对象的</p><p>GetDIgltem Text 函数：</p><p>在user32.dll用户模块中，获取对话框文本</p><p>Unit GetDIgltem Text{</p><p>HWND hDlg  , &#x2F;&#x2F;对话框句柄</p><p>Int   nlDDlgltem , &#x2F;&#x2F;控件标识（ID号）</p><p>LPCTSRT  IpString , &#x2F;&#x2F;文本缓冲区指针</p><p>int   nMaxCount  &#x2F;&#x2F;字符缓冲区的长度</p><p>}</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403061002251.jpg" alt="C1E2786BC9AB508D1B45DD9E9B0D1746"></p><p>ANSI版是GetDIgltem TextA,Unicode版是GetDIgltem TextW</p><p>如果函数执行成功，返回值是文本长度，失败则返回0</p><p>MB_OK  只有一个对话框按钮</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403061002997.jpg" alt="9729A33465A01EDBEB8CA4EAEF6921FC"></p><p>Windows消息机制：</p><p>Windows是一个消息驱动的系统</p><p>Windows消息提供应用程序与应用程序之间，应用程序与Windows操作系统之间进行通信的手段，应用程序想要实现的功能由消息来触发，并且靠对消息的响应和处理来完成功能</p><p>在windows系统中，有2种消息队列，一种是系统消息队列，一种是应用程序消息队列，计算机的所有输入设备由windows监控，当应用事件发生时，windows先将输入的消息放在系统消息队列里面，再把消息拷贝到相应的应用程序消息队列里面，，然后发送到相应的窗口处理函数中</p>]]></content>
    
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件的块</title>
    <link href="/2024/03/05/PE%E6%96%87%E4%BB%B6%E7%9A%84%E5%9D%97/"/>
    <url>/2024/03/05/PE%E6%96%87%E4%BB%B6%E7%9A%84%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="PE文件的块"><a href="#PE文件的块" class="headerlink" title="PE文件的块"></a>PE文件的块</h1><p>PE文件使用的是一个平面的地址空间，所有的代码和数据都被合并在一起，组成一个很大的结构，文件的内容被分为很多的块，块中包含代码和数据，在排列位置上，在PE文件的DOS头部和PE文件头之后就是块表和多个不同的块，（Section,又称为节，区块，区段）</p><h2 id="Windows是如何将PE文件映射到内存中的："><a href="#Windows是如何将PE文件映射到内存中的：" class="headerlink" title="Windows是如何将PE文件映射到内存中的："></a>Windows是如何将PE文件映射到内存中的：</h2><h6 id="在执行一个PE文件时，Windows并不在一开始就将整个文件读入内存，而是采用与内存映射文件类似的机制，也就是说windows装载器在装载的时候仅仅建立好虚拟地址与PE文件的映射关系，只有真正执行到某个内存页指令或者访问页中数据时，这个页面才会被从磁盘提交到物理内存"><a href="#在执行一个PE文件时，Windows并不在一开始就将整个文件读入内存，而是采用与内存映射文件类似的机制，也就是说windows装载器在装载的时候仅仅建立好虚拟地址与PE文件的映射关系，只有真正执行到某个内存页指令或者访问页中数据时，这个页面才会被从磁盘提交到物理内存" class="headerlink" title="在执行一个PE文件时，Windows并不在一开始就将整个文件读入内存，而是采用与内存映射文件类似的机制，也就是说windows装载器在装载的时候仅仅建立好虚拟地址与PE文件的映射关系，只有真正执行到某个内存页指令或者访问页中数据时，这个页面才会被从磁盘提交到物理内存"></a>在执行一个PE文件时，Windows并不在一开始就将整个文件读入内存，而是采用与内存映射文件类似的机制，也就是说windows装载器在装载的时候仅仅建立好虚拟地址与PE文件的映射关系，只有真正执行到某个内存页指令或者访问页中数据时，这个页面才会被从磁盘提交到物理内存</h6><p>这种机制使文件装入的速度和文件大小没有关系，但是需要注意的是系统装载可执行文件的方法又不完全等同于内存映射文件，在装载前，有些数据会发生预处理，比如重定位，所以，数据之间的相对位置可能发生轻微变化</p><p>windows装载器在装载PE文件时的DOS头部，PE文件头和块表部分不会做任何处理，而在装载块时根据块的属性做不同的处理</p><p>块的偏移：块在磁盘文件中是按照可选映像头结构中的FileAlignment字段的值对齐的，而被装载到内存中是按照可选映像头结构中的SectionAlignment字段的值对齐的。所以一个块被装入内存后相对于文件头的偏移和1磁盘文件的偏移是不同的。</p><p>重点块♥：</p><p>.text:代码块，内容全是指令代码。在编译或者汇编结束产生的一种块</p><p>.data：读&#x2F;写数据块，一般存放全局变量和静态变量，是初始化的数据块</p><p>.rdata:只读数据块，用于存放调试目录和说明字符串，是运行期只读的数据</p><p>.idata:输入表，包含其他的DLL的函数及数据信息，有的编译器会将这个块合并到.rdata块</p><p>.edata:输入表，创建一个输出API或数据的可执行文件时，会用到此块</p><p>.rsrc:资源快，包含模块的全部资源，如图标，菜单，位图等</p><p>IMAGE_SECTION_HEADER长度为40个字节</p><p>PE文件头的最后部分——可选映像头的数据目录表：位于128h到117h之间</p><p>可在LoadPE中选择区段来查看区段表</p><h1 id="PE文件的输入和输出表"><a href="#PE文件的输入和输出表" class="headerlink" title="PE文件的输入和输出表"></a>PE文件的输入和输出表</h1><p>一个windows程序基本上所实现的所有功能几乎都是直接调用系统dll提供的API函数实现的，要使用任何一个dll所提供的函数，我们需要将它导入，也就是用到了输入表，输入表在软件外壳基础中十分重要对于那些提供了被导出函数的dll程序来说，它们必须使用输出表将函数输出之后别的程序才可以使用</p><p>无论是自己编写的dll还是系统提供的标准dll，只要想要提供函数给别人使用，就一定要建立输出表，一般的开发环境都能编写具有输出功能的程序，输出表都是由链接器之中建立的，我们只需要指定被输出函数的名称或者序号就可以了，输出表通常出现在dll文件的edata中。</p><h5 id="IT"><a href="#IT" class="headerlink" title="IT:"></a>IT:</h5><p>可执行文件使用来自于其他DLL的代码或数据时，称为输入。当PE文件装载到内存时，windows加载器的工作之一就是定位所有被输入的函数和数据，并且让正在被装入的文件可以使用那些地址。这个过程是通过PE文件的输入表（Import Table ，简称IT，又称为导入表）来完成的，输入表中保存的是函数名和其驻留dll名等动态连接所需要的信息。</p><h5 id="IAT"><a href="#IAT" class="headerlink" title="IAT:"></a>IAT:</h5><p>在PE文件中，有一组数据结构，它们分别对应着每个被输入的dll，每一个这样的结构都给出了被输入的dll名称并指向一组函数指针。这组函数指针被称为输入地址表（Import Address Table,简称IAT)。每一个被引入的API在IAT里都有它自己的保留位置，在那里它将被windows装载器写入输入函数的地址，一旦模块被装入，IAT中包含所要调用输入函数的地址。</p><h5 id="IID："><a href="#IID：" class="headerlink" title="IID："></a>IID：</h5><p>PE文件头的可选映像头中，数据目录表的第二个成员指向输入表，输入表以一个IMAGE_IMPORT_DESCRIPTOR（简称IID)数组开始。每个被PE文件隐式地链接进来的DLL都有一个IID。在这个数组中，没有字段指出该数组结构的项数，但是它的最后一个单元是NULL，由此计算出该数组的项数。</p><p>例如，某个PE文件从两个DLL文件中引入函数，就存在两个IID结构来描述这些DLL文件，并在两个IID结构的最后一个内容全为0的IID结构作为结束。</p><p>每个IID结构的长度是5个双字，即20个字节。</p><p>每个IMAGE_IMPORT_DESCRIPOR(简称IID)结构定义如下：（部分）</p><p>IMAGE_IMPORT_DESCRIPOR STRUCT{</p><p>UNION</p><p>Characteristics dd?</p><p>OriginalFirstThunk dd? &#x2F;&#x2F;指向INT（输入名称表），为RVA</p><p>Ends</p><p>TimeDateStamp dd? &#x2F;&#x2F;32位</p><p>ForwaderChain dd? &#x2F;&#x2F;转向索引，一般为0</p><p>Name dd？ &#x2F;&#x2F;指向DLL名称的RVA值，如“kernel32.dll”</p><p>FirstThunk dd? &#x2F;&#x2F;指向IAT（输入地址表）的RVA值</p><p>IMAGE_IMPORT_DESCRIPOR STRUCT ENDS}</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403052057177.png" alt="image-20240304223655245"></p><p>OriginalFirstThunk 与FirstThunk非常相似，它们指向两个本质上相同的IMAGE_THUNK_DATA的结构的数组。一般来说，OriginalFirstThunk 指向的 IMAGE_THUNK_DATA的结构数据称为输入名称表，（Import Name Table—-INT),FirstThunk指向的数据结构数组称为输入地址表（Import Address Table–IAT)</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403052059827.jpeg" alt="img"></p><p>IMAGE_THUNK_DATA结构的数组中，每个元素对应于一个从可执行文件输入的函数，数组结构的结束也是通过一个全为0的元素作为标识。</p><p>在IMAGE_THUNK_DATA中的ForwarderString指向一个转向字符的RVA值，Function是被输入函数的内存地址，ordinal是被输入函数的API的序数值，AddressOfData指向IMAGE_IMPORT_BY_NAME</p><p>ordinal和addressofdata什么时候使用？</p><p>当IMAGE_THUNK_DATA类型的数据的最高位为1的时候，代表函数以序号的方式导入，ordinal的低31位就是输入函数在其DLL内的导出序号</p><p>当IMAGE_THUNK_DATA类型的数据最高位为0的时候，代表函数以字符串方式导入，这时AddressOfData就是一个指向用来导入函数名称的IMAGE_IMPORT_BY_NAME的数据结构的RVA</p><p>typedef struct _IMAGE_IMPORT_BY_NAME {<br>        WORD Hint; &#x2F;&#x2F;函数序号，不是必须的</p><p>​BYTE Name[1];&#x2F;&#x2F;导入函数名称，为以0结尾的ASCII字串<br>} </p><p>IMAGE_IMPORT_BY_NAME ENDS</p><p>这里的NAME大小是一个可变的尺寸域</p><p>数据目录表位于128h到1A7h之间，每个成员占8个字节，分别指向相关的结构，</p><p>第一个八个字节指向输出表，如果全部为0，这个文件的地址和大小都是0，表示没有输出表</p><p>地址130h-137h是数据目录表第二项，指向输入表，输入表的前四个字节是一个相对虚拟地址（注意小端序存放地址，这个地方不是实际地址也不是偏移量），后4个字节是大小</p><p>LordPE位置计算器可以用来计算偏移量</p>]]></content>
    
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-2024 上学期寒假假期学习总结</title>
    <link href="/2024/03/04/2023-2024%20%E4%B8%8A%E5%AD%A6%E6%9C%9F%E5%AF%92%E5%81%87%E5%81%87%E6%9C%9F%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2024/03/04/2023-2024%20%E4%B8%8A%E5%AD%A6%E6%9C%9F%E5%AF%92%E5%81%87%E5%81%87%E6%9C%9F%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-2024-上学期寒假假期学习总结"><a href="#2023-2024-上学期寒假假期学习总结" class="headerlink" title="2023-2024 上学期寒假假期学习总结"></a>2023-2024 上学期寒假假期学习总结</h1><h5 id="这个假期先是学习了下linux的指令（参考韩顺平b站课程），没有特别多的实操，常用指令还是可以了，"><a href="#这个假期先是学习了下linux的指令（参考韩顺平b站课程），没有特别多的实操，常用指令还是可以了，" class="headerlink" title="这个假期先是学习了下linux的指令（参考韩顺平b站课程），没有特别多的实操，常用指令还是可以了，"></a>这个假期先是学习了下linux的指令（参考韩顺平b站课程），没有特别多的实操，常用指令还是可以了，</h5><h5 id="java看课看了大概50节（总共900多节……嘶），感觉看了就是看了，之前其实上学的时候大概十一月吧浅看过的，当时速通了一晚上起来感觉还是要实践一下才行，害，安卓！然后配了下相应环境"><a href="#java看课看了大概50节（总共900多节……嘶），感觉看了就是看了，之前其实上学的时候大概十一月吧浅看过的，当时速通了一晚上起来感觉还是要实践一下才行，害，安卓！然后配了下相应环境" class="headerlink" title="java看课看了大概50节（总共900多节……嘶），感觉看了就是看了，之前其实上学的时候大概十一月吧浅看过的，当时速通了一晚上起来感觉还是要实践一下才行，害，安卓！然后配了下相应环境"></a>java看课看了大概50节（总共900多节……嘶），感觉看了就是看了，之前其实上学的时候大概十一月吧浅看过的，当时速通了一晚上起来感觉还是要实践一下才行，害，安卓！然后配了下相应环境</h5><h5 id="假期IDA寄了一下，然后搞了7-6，7-7，8-3的IDA-当时是做begin-ctf的那个xor题发现字符串无法显示，换了很多版本开都不太行，有点影响对程序里面加密函数的追踪了，然后就想着把这个问题解决了（后来看其他人是一直交叉引用找到main函数还是啥），看了一部分wp好像就是说那个题目最好拿8-3的开，但是当时还是不知道，在网上把方法那些都试过了还是不太行。"><a href="#假期IDA寄了一下，然后搞了7-6，7-7，8-3的IDA-当时是做begin-ctf的那个xor题发现字符串无法显示，换了很多版本开都不太行，有点影响对程序里面加密函数的追踪了，然后就想着把这个问题解决了（后来看其他人是一直交叉引用找到main函数还是啥），看了一部分wp好像就是说那个题目最好拿8-3的开，但是当时还是不知道，在网上把方法那些都试过了还是不太行。" class="headerlink" title="假期IDA寄了一下，然后搞了7.6，7.7，8.3的IDA,当时是做begin ctf的那个xor题发现字符串无法显示，换了很多版本开都不太行，有点影响对程序里面加密函数的追踪了，然后就想着把这个问题解决了（后来看其他人是一直交叉引用找到main函数还是啥），看了一部分wp好像就是说那个题目最好拿8.3的开，但是当时还是不知道，在网上把方法那些都试过了还是不太行。"></a>假期IDA寄了一下，然后搞了7.6，7.7，8.3的IDA,当时是做begin ctf的那个xor题发现字符串无法显示，换了很多版本开都不太行，有点影响对程序里面加密函数的追踪了，然后就想着把这个问题解决了（后来看其他人是一直交叉引用找到main函数还是啥），看了一部分wp好像就是说那个题目最好拿8.3的开，但是当时还是不知道，在网上把方法那些都试过了还是不太行。</h5><p>也收获了一些经验（虽然解决不了当时那个问题）：</p><p>1.多试几个版本的IDA开，一个不行换另外一个</p><p>2.重新开机</p><p>3.点一下这几个dll<img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403041755958.png" alt="4B43930D53D2B5C0047D7799A56D7E52"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403041755565.png" alt="CC5EC185CA4FBF54A9D6797C916DBAAE"></p><p>4.把IDA里面的字体设置(options–&gt;general–&gt;strings)的UTF-8换成CP936,在字符串界面全选后右键rebuild,然后左下角</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403041759478.png" alt="image-20240304175943442"></p><p>然后再次全选rebuild，然后就出来了</p><h5 id="西湖论剑看了看题，还未复现，复现有一点点卡"><a href="#西湖论剑看了看题，还未复现，复现有一点点卡" class="headerlink" title="西湖论剑看了看题，还未复现，复现有一点点卡"></a>西湖论剑看了看题，还未复现，复现有一点点卡</h5><h5 id="对着b站的课又学了下汇编，发现自己以前对汇编部分的指令的理解出现了一些偏差，算是复习"><a href="#对着b站的课又学了下汇编，发现自己以前对汇编部分的指令的理解出现了一些偏差，算是复习" class="headerlink" title="对着b站的课又学了下汇编，发现自己以前对汇编部分的指令的理解出现了一些偏差，算是复习"></a>对着b站的课又学了下汇编，发现自己以前对汇编部分的指令的理解出现了一些偏差，算是复习</h5><p>花指令：</p><p>xor ebx,ebx </p><p>test ebx </p><p>jz label1 </p><p>jnz label2 </p><p>由于上一步已经将EBX设为0，所以ZF标志位会被设置。因此，接着执行”jz label1”指令，跳转到label1处</p><h5 id="beginctf做了一些题（未复现完，第一次做vm），搞了下真机调试"><a href="#beginctf做了一些题（未复现完，第一次做vm），搞了下真机调试" class="headerlink" title="beginctf做了一些题（未复现完，第一次做vm），搞了下真机调试"></a>beginctf做了一些题（未复现完，第一次做vm），搞了下真机调试</h5><h5 id="hgame-week2-和-week3-复现，感觉还是写的比较详细吧"><a href="#hgame-week2-和-week3-复现，感觉还是写的比较详细吧" class="headerlink" title="hgame week2 和 week3 复现，感觉还是写的比较详细吧"></a>hgame week2 和 week3 复现，感觉还是写的比较详细吧</h5><h5 id="博客重新整了一下，因为距第一次上传太久了，后面惊讶发现自己上传文章以后在博客网页点开文章后显示页面不存在，后面发现是因为md文章里面标题的名字大小写和md文章本身名字不一样，然后注意最上方加粗的格式里面的冒号不是中文的"><a href="#博客重新整了一下，因为距第一次上传太久了，后面惊讶发现自己上传文章以后在博客网页点开文章后显示页面不存在，后面发现是因为md文章里面标题的名字大小写和md文章本身名字不一样，然后注意最上方加粗的格式里面的冒号不是中文的" class="headerlink" title="博客重新整了一下，因为距第一次上传太久了，后面惊讶发现自己上传文章以后在博客网页点开文章后显示页面不存在，后面发现是因为md文章里面标题的名字大小写和md文章本身名字不一样，然后注意最上方加粗的格式里面的冒号不是中文的"></a>博客重新整了一下，因为距第一次上传太久了，后面惊讶发现自己上传文章以后在博客网页点开文章后显示页面不存在，后面发现是因为md文章里面标题的名字大小写和md文章本身名字不一样，然后注意最上方加粗的格式里面的冒号不是中文的</h5><p>最后又重新传了一遍，不知道为什么以前传的头像和背景都没了，然后又拖了段时间实在受不了了（其实是看别人博客都很好看……），然后重新传了一下（虽然现在也就只有首页能看吧），注意编辑yml的时候不要用”\“应该用“&#x2F;”，然后因为之前配置图片是在img文件夹下面发现没有用，网上搜也没有很具体，最后试出来是在blog\public最后下面的img里面配置图片，然后编辑yml界面的时候的相对路径写这个就可以了</p><p>看了些别人写的博客</p><h5 id="nss还是做了点小题，polar也做了一些感觉确实题目有些出的比较奇怪（可忽略）"><a href="#nss还是做了点小题，polar也做了一些感觉确实题目有些出的比较奇怪（可忽略）" class="headerlink" title="nss还是做了点小题，polar也做了一些感觉确实题目有些出的比较奇怪（可忽略）"></a>nss还是做了点小题，polar也做了一些感觉确实题目有些出的比较奇怪（可忽略）</h5><h5 id="逆向工程核心原理搞到第一部分，但是后期因为对windows方面知识储备不足所以有所卡顿"><a href="#逆向工程核心原理搞到第一部分，但是后期因为对windows方面知识储备不足所以有所卡顿" class="headerlink" title="逆向工程核心原理搞到第一部分，但是后期因为对windows方面知识储备不足所以有所卡顿"></a>逆向工程核心原理搞到第一部分，但是后期因为对windows方面知识储备不足所以有所卡顿</h5><h5 id="工具方面都很粗略看了下，网课，docker-cmake-git-正则表达式，IDA特训营（看了一些没有看完，有些想实践一下实在没有找到对应的题）"><a href="#工具方面都很粗略看了下，网课，docker-cmake-git-正则表达式，IDA特训营（看了一些没有看完，有些想实践一下实在没有找到对应的题）" class="headerlink" title="工具方面都很粗略看了下，网课，docker,cmake,git,正则表达式，IDA特训营（看了一些没有看完，有些想实践一下实在没有找到对应的题）"></a>工具方面都很粗略看了下，网课，docker,cmake,git,正则表达式，IDA特训营（看了一些没有看完，有些想实践一下实在没有找到对应的题）</h5><p>目前感觉好像没有怎么用到上面的工具所以还是很生疏感觉会忘，感觉学的很浅</p><h5 id="很粗浅的看了一点点计网的东西，然后接触了点点简单的Misc"><a href="#很粗浅的看了一点点计网的东西，然后接触了点点简单的Misc" class="headerlink" title="很粗浅的看了一点点计网的东西，然后接触了点点简单的Misc"></a>很粗浅的看了一点点计网的东西，然后接触了点点简单的Misc</h5><p>然后这个假期差不多就这样了，偶尔还是会有点焦虑，想个题想半天搞不出来有点自闭，不过幸好最后都解决了，这个学期的目标是争取按板块完善自己RE方面的知识储备，还没有开始pwn，还是希望后期自己能稳住心态，学踏实一点吧</p><p>新学期加油💪</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024第一周学习笔记</title>
    <link href="/2024/03/03/2024%20%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/03/03/2024%20%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-第一周学习笔记"><a href="#2024-第一周学习笔记" class="headerlink" title="2024 第一周学习笔记"></a>2024 第一周学习笔记</h1><p>壳：分为两种，一种是压缩壳1，一种是加密壳</p><p>用IDA打开加壳后的文件</p><p>使用 IDA 打开时会提示 <code>Some imported modules will not be visible because the IAT is located outside of memory range of the input file.</code></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031724361.png" alt="img"></p><h2 id="手动脱壳三种方法："><a href="#手动脱壳三种方法：" class="headerlink" title="手动脱壳三种方法："></a>手动脱壳三种方法：</h2><h3 id="1-单步跟踪法"><a href="#1-单步跟踪法" class="headerlink" title="1.单步跟踪法"></a>1.单步跟踪法</h3><h5 id="原则：向上的跳转，不执行，向下的跳转执行，灰色的不用管"><a href="#原则：向上的跳转，不执行，向下的跳转执行，灰色的不用管" class="headerlink" title="原则：向上的跳转，不执行，向下的跳转执行，灰色的不用管"></a>原则：向上的跳转，不执行，向下的跳转执行，灰色的不用管</h5><p>单步运行程序，当发现程序向下运行时有向上跳转的箭头时，在程序的下一步（即下一行）设置断点，然后不进行向上的跳转</p><p>步骤：</p><p>法一：右键选中，断点–&gt;运行到选定位置（F4）</p><p>法二：右键选中，断点–&gt;切换，然后运行，最后再点击切换来取消这个断点</p><p>注意：</p><p>当此时下一行的指令还是跳转时(JZ JNZ CALL)，则继续选择下一行进行跳转</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031533234.png" alt="image-20240303153301086"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031450046.png"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031538280.png" alt="image-20240303153848169"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031540308.png" alt="image-20240303154057257"></p><p>脱壳方式有两种：一种是使用od插件ollydump，另一种是使用工具lordpe</p><p>od插件又有两种，一种是方式一，一种是方式二</p><p>进入OEP，可以进行脱壳了</p><p>使用ollydump脱壳调试进程</p><p>lordpe:（这个看上去好像有点麻烦，浅记一下）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031547434.png" alt="image-20240303154743390"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031550982.png" alt="image-20240303155052911"></p><p>查看相对基址（上图中的OEP）可以使用下图方法，点击后在修正值处的值就是我们所需要的OEP的值</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031550212.png" alt="image-20240303155015170"></p><h2 id="2-一步直达法"><a href="#2-一步直达法" class="headerlink" title="2.一步直达法"></a>2.一步直达法</h2><p>说明：适用于绝大部分的upx壳和aspack壳</p><p>进入OD，使用Ctrl+F搜索出popad（搜索时不要勾选”整个块“这个选项），然后使用跳转，跳转到此处，然后F8进入OEP，开始使用ollydump脱壳</p><h2 id="3-ESP定律脱壳"><a href="#3-ESP定律脱壳" class="headerlink" title="3.ESP定律脱壳"></a>3.ESP定律脱壳</h2><p>使用快捷键F8，单步一次，发现只有ESP寄存器是红的，就可以使用ESP定律</p><p>右键选择数据窗口跟随，设置断点</p><p>F9运行</p><p>F8进入OEP，此处如果是push ebp,就是进入了OEP</p><p>开始使用OD的插件脱壳</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031507844.png" alt="image-20240303150734726"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031508296.png" alt="image-20240303150833144"></p><p>这个地方设置断点的时候dword和word都一样</p><h2 id="4-内存镜像法"><a href="#4-内存镜像法" class="headerlink" title="4.内存镜像法"></a>4.内存镜像法</h2><p>右上角点击查看–&gt;内存</p><p>找程序出现的第一个rsrc</p><p>总结：</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031611904.png" alt="image-20240303161111876"></p><p><a href="https://blog.csdn.net/sirrior/article/details/134597589">upx手动脱壳学习笔记_如何使用upx脱壳-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_46296905/article/details/116049504">UPX手动脱壳-CSDN博客</a></p><h2 id="使用bindiff对去符号化题目进行处理报错处理"><a href="#使用bindiff对去符号化题目进行处理报错处理" class="headerlink" title="使用bindiff对去符号化题目进行处理报错处理"></a>使用bindiff对去符号化题目进行处理报错处理</h2><p>打开文件</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031653064.JPG" alt="FF1F28C59D5D07660321030BB8F66733"></p><p>据说最开始第一个报错没有什么具体影响</p><p>但是第二个报错有，会影响接下来对文件的分析</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031651240.png" alt="image-20240302115416240"></p><p>网上好像也没有找到相应的解决办法，最后试了很久找到两个方法：</p><p>法一：</p><p>手动拖动，按下import symbols</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031657326.png" alt="img"></p><p>然后在一旁的汇编框内按下f5</p><p>法二：</p><p>尝试更换bindiff的插件，bindiff</p><p>BinDiff 7 通常与 IDA Pro 7.x 版本兼容，7的版本似乎只适用于IDA7.6，在github上面重新下载一个Bindiff，然后在</p><p>C:\Users\asus\AppData\Roaming\Hex-Rays\IDA Pro\plugins下替换掉原来的Bindiff插件（放在一个公共插件存放的位置）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202403031708317.png" alt="image-20240303170808277"></p><h2 id="青少年ctf-re复现"><a href="#青少年ctf-re复现" class="headerlink" title="青少年ctf re复现"></a>青少年ctf re复现</h2><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20240303235625824.png" alt="image-20240303235625824"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20240304000021168.png" alt="image-20240304000021168"></p>]]></content>
    
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hagme week3 RE wp</title>
    <link href="/2024/02/24/hagme%20week3%20RE%20wp/"/>
    <url>/2024/02/24/hagme%20week3%20RE%20wp/</url>
    
    <content type="html"><![CDATA[<h1 id="hagme-week3-RE-wp"><a href="#hagme-week3-RE-wp" class="headerlink" title="hagme week3 RE wp"></a>hagme week3 RE wp</h1><h2 id="mystery"><a href="#mystery" class="headerlink" title="mystery"></a>mystery</h2><p>用ida打开题目发现main函数界面只有ptrace反调试函数，搜索字符串可定位</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402241400204.png" alt="image-20240224140048114"></p><p>用7打开大概是这样的（wp上那种）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402241427676.png" alt="image-20240224142704607"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402241427821.png" alt="image-20240224142722779"></p><p>用8开会好看很多，即主要逻辑（可直接通过字符串定位）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402262103486.png" alt="image-20240226210346347"></p><p>可以看到这里两个函数都有unk_4080</p><p>交叉引用</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402262106382.png" alt="image-20240226210629311"></p><p>打开func2，因为题目为elf文件，发现func2在初始化函数里面，可以得知rc4加密的密钥在初始化时被修改</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402262120942.png" alt="image-20240226212051860"></p><p>所以执行顺序为func2——&gt;func1</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402262319003.png" alt="image-20240226231945892"></p><p>动调获取Key的值</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402270103013.png" alt="屏幕截图 2024-02-27 010131"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402270106267.png" alt="image-20240227010609229"></p><h2 id="Encrypt"><a href="#Encrypt" class="headerlink" title="Encrypt"></a>Encrypt</h2><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/seccng/encrypting-data-with-cng">使用 CNG 加密数据 - Win32 apps | Microsoft Learn</a></p><p>首先通过一系列函数调用设置算法属性、生成对称密钥并导出密钥，如果这些函数都成功执行，则进入条件判断语句的大括号内部。</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261422929.png" alt="image-20240226142233845"></p><p>获得key</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261450940.png" alt="image-20240226145038903"></p><p>又因为</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261456165.png" alt="image-20240226145603116"></p><p>这里v6&#x3D;v11</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261458867.png" alt="image-20240226145839824"></p><p>其中memcpy(v11, &amp;unk_1400034A0, *(unsigned int *)v26)将定数据（unk_1400034A0）复制到 v11 指向的内存块中</p><p>所以找到IV</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261501326.png" alt="image-20240226150100286"></p><p>获取数据然后转换下形式</p><p>key:4c9d7b3eecd0661fa034dc863f5f1fe2</p><p>iv:936af225fa6810b8d07c3e5e9ee8ee0d</p><p>input：</p><p>A4E10F1C53BC42CD8E7154B7F175E35097207197A83B7761406968C1B47B88549F19034470782425F0A96535913A049C4E66BED28B8B2073CEA0CBE939BD6D83</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261557621.png" alt="image-20240226155706564"></p><p>hgame{rever5e_wind0ws_4P1_is_1nter3sting}</p><p>下面是当时看的一些函数</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261401558.png" alt="image-20240226140054441"></p><ol><li>通过调用<code>BCryptOpenAlgorithmProvider</code>函数，使用AES算法初始化一个算法提供程序句柄。</li><li>使用<code>BCryptGetProperty</code>函数和属性<code>BCRYPT_OBJECT_LENGTH</code>确定密钥对象缓冲区的大小。</li><li>使用<code>HeapAlloc</code>为密钥对象缓冲区（<code>pbKeyObject</code>）分配内存。</li><li>使用<code>BCryptGenerateSymmetricKey</code>函数，使用算法提供程序句柄、密钥对象缓冲区、密钥长度和密钥数据生成密钥。</li></ol><h2 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h2><p>打开文件然后发现Buffer</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402251741675.png" alt="image-20240225174156609"></p><p>发现数据里面有MZ和90，合理怀疑这个地方藏的是一个exe的数据</p><p>（Windows下的exe文件格式有两种：MZ格式、PE格式。MZ格式为较早的exe文件格式，主要用于DOS系统。PE格式是目前Windows下常见的exe文件格式，它兼容MZ格式，本身也是一个MZ格式的可执行文件。）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402251743392.png" alt="image-20240225174311353"></p><p>经尝试，直接获取里面的数据失败，采用脚本获取#include &lt;stdio.h&gt;<br><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402251747372.png" alt="image-20240225174726335"></p><p>将该脚本的exe与题目放在同一个文件夹下后运行，然后生成一个real.exe的文件1，即为要真正分析的文件</p><p>打开生成的real.exe，注意这个是32位的😂手动去花</p><p>这个地方复习一下花指令，jz和jnz永远跳转类型，把junkcode nop掉</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402251955327.png" alt="image-20240225195501289"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402251800849.png" alt="image-20240225180049816"></p><p>然后选中后c识别代码，p创建函数，f5反汇编得到正常逻辑代码</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402251949912.png" alt="image-20240225194915865"></p><p>这个题直接找加密算法找不到</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402251957276.png" alt="image-20240225195706218"></p><p>可以看出第一个循环在初始化s盒 byte_403390，改变量名，好看</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402252005446.png" alt="image-20240225200545389"></p><p>func2:使用上述func1初始化好的数组 <code>s</code> 进行加密操作</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402252024849.png" alt="image-20240225202401793"></p><p>flag长度为32，则构造一个32的数据进行动调</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402252117679.png" alt="image-20240225211757624"></p><p><a href="https://blog.csdn.net/xiao__1bai/article/details/123357156">解析 RC4 加密算法(C语言、python)-CSDN博客</a></p><p>这个地方涉及到下标越界的问题,可以直接采用动调每次步过记录result的值（感觉有点麻烦）</p><h5 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h5><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402252151072.png" alt="image-20240225215140982"></p><p>hgame{Fl0w3rs_Ar3_Very_fr4grant}</p><h2 id="Crackme"><a href="#Crackme" class="headerlink" title="Crackme"></a>Crackme</h2><p>定位找到main函数</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402252216477.png" alt="image-20240225221645408"></p><p>（<code>std::exception</code> 是一个 C++ 标准库中的基类，用于表示所有标准异常类的基类。它定义了一个名称为 <code>what()</code> 的虚函数，用于返回一个 C 字符串，即异常的描述信息。因此，如果你在代码中看到某个异常类型是 <code>std::exception</code>，那么可以认为这个异常类型是一个通用的、基础的异常类型，表示出现了未知的异常情况。通常情况下，具体的异常类型应该是 <code>std::exception</code> 的派生类，以便更好地表达出具体异常的类型和描述信息，从而更好地处理异常情况。）</p><p>在 C++ 中，<code>try</code> 和 <code>catch</code> 是用于异常处理的关键字，<code>try</code> 用于尝试执行可能会抛出异常的代码块，而 <code>catch</code> 则用于捕获并处理抛出的异常。</p><p>动调</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261631856.png" alt="image-20240226163152814"></p><p>单步一下，然后发现报错</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261632531.png" alt="image-20240226163233471"></p><p>（解释：这是一个 Windows 操作系统的错误提示信息，指示一个程序在执行时遇到了问题。具体而言，错误信息表明程序尝试读取内存中的某个位置，但该内存位置的值为 0xFFFFFFFFFFFFFFFF，也就是无效的内存地址。由于该内存地址无法访问，程序无法读取该内存位置的数据，从而导致了错误。错误代码 “c0000005” 是 Windows 中的通用异常代码，通常表示由于访问违反了内存保护或者其他原因，导致了应用程序终止的问题。线程 ID (tid) “88396” 表示在哪个线程中发生了错误。）</p><p>tab然后发现只有try的汇编代码，没有catch的，所以把这3个连续的catch函数给dump（shift + E)下来</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261826951.png" alt="image-20240226182658873"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261835104.png" alt="image-20240226183515040"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261835701.png" alt="image-20240226183540637"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261836269.png" alt="image-20240226183600212"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261837735.png" alt="image-20240226183755642"></p><p>export后在文件所在文件夹下生成含该数据的txt</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402272128029.png" alt="image-20240227212814904"></p><p>emmmm winhex没试出来</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402272143386.png" alt="image-20240227214307333"></p><p>打开010editor选择十六进制导入——另存为（不要后缀名）——导出——得到文件</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402272158291.png" alt="image-20240227215842231"></p><p>全选以后p创建函数然后F5反汇编，得到加密代码</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261947804.png" alt="image-20240226194731643"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402261948791.png" alt="image-20240226194802727"></p><p>hgame{C_p1us_plus_exc3pti0n!!!!}</p><h5 id="关于try-catch-finally"><a href="#关于try-catch-finally" class="headerlink" title="关于try catch finally:"></a>关于try catch finally:</h5><p>当我们编写程序时，经常会遇到一些可能会引发异常的代码。为了处理这些异常情况，我们可以使用 try-catch-finally 结构来捕获和处理异常。下面是它的具体用法解释：</p><ol><li><strong>try</strong> 块：<ul><li>在 try 块中，我们编写可能会引发异常的代码。这些代码被放置在 try 块中，因为我们希望监视并处理可能发生的异常。</li></ul></li><li><strong>catch</strong> 块：<ul><li>如果在 try 块中的代码引发了异常，那么程序会跳转到 catch 块，并执行 catch 块中的代码。在 catch 块中，我们可以编写针对特定异常类型的处理逻辑，比如打印错误信息、记录日志或者采取其他恢复措施。</li></ul></li><li><strong>finally</strong> 块：<ul><li>无论是否发生异常，finally 块中的代码都会被执行。通常在 finally 块中放置一些清理工作，比如释放资源、关闭文件等操作。</li></ul></li></ol><p>综合起来，try-catch-finally 结构的作用是确保程序在遇到异常时能够进行适当的处理，同时保证一些必要的清理工作得以完成。</p><p>举例来说，比如在读取文件时可能会发生文件不存在的异常。我们可以将文件读取的代码放在 try 块中，然后在 catch 块中捕获文件不存在的异常并进行处理，最后在 finally 块中确保文件流得到关闭，以释放资源。这样可以保证程序在面对异常情况时仍能够安全运行，并且不会因为资源未释放而导致问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hgame week2 re wp</title>
    <link href="/2024/02/23/hgame%20week2%20re%20wp/"/>
    <url>/2024/02/23/hgame%20week2%20re%20wp/</url>
    
    <content type="html"><![CDATA[<h2 id="Arithmetic"><a href="#Arithmetic" class="headerlink" title="Arithmetic"></a>Arithmetic</h2><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402222130671.png" alt="image-20240222213004584"></p><p>[关于upx壳的一点认知，以及upx壳的特征识别 - 北北软件园 - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/xiazai/p/14295684.html#:~:text=%E4%B8%80%E8%88%AC%E6%98%AF%E8%A2%AB%E8%AF%86%E5%88%AB%E5%87%BA%E4%BA%86upx%E7%9A%84%E7%89%B9%E5%BE%81%EF%BC%8C%E7%84%B6%E5%90%8E%E7%9B%B4%E6%8E%A5%E5%86%8D%E6%8B%96%E5%85%A5%E5%88%B0upx%E5%8A%A0%E5%A3%B3%E5%99%A8%E4%B8%AD%EF%BC%8C%E5%8A%A0%E5%A3%B3%E5%99%A8%E8%87%AA%E5%B7%B1%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%AF%86%E5%88%AB%E5%87%BA%E8%BF%99%E6%98%AF%E5%8A%A0%E8%BF%87%E5%A3%B3%E7%9A%84%EF%BC%8C%E7%84%B6%E5%90%8E%E6%89%A7%E8%A1%8C%E8%84%B1%E5%A3%B3%E3%80%82">https://www.cnblogs.com/xiazai/p/14295684.html#:~:text=一般是被识别出了upx的特征，然后直接再拖入到upx加壳器中，加壳器自己就可以识别出这是加过壳的，然后执行脱壳。</a> (upx加壳器就可以脱自己加密出来的upx) upx的特征，我们可以通过抹掉特征码来隐藏 特征码处1：upx字符串，特征码为55 50 58 一般存在于区段名称这里%2C等字节长度随意替换，对程序没有任何影响 特征码处2%3Aoep前几个字节,%3F%3F %3F%3F 00 8D BE %3F%3F %3F%3F %3F%3F)</p><p>upx特征码：55 50 58</p><p>首先，我们来讲一讲查壳的原理。不论是压缩壳，还是加密壳，都有特定的算法。加同种壳的不同应用程序，有一部分机器码是相同的，它们被称为“签名”或者“特征码”。有些壳还会将自身的一些信息写入可执行程序。</p><p><a href="https://blog.csdn.net/whatday/article/details/99709317?app_version=6.2.8&code=app_1562916241&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%2299709317%22,%22source%22:%222301_79688961%22%7D&uLinkId=usr1mkqgl919blen&utm_source=app">手动去upx特征_upx -d-CSDN博客</a></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402292002904.png" alt="image-20240229200154657"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402292002042.png" alt="image-20240229200230956"></p><p>对比，改成upx特征码</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402222220743.png" alt="image-20240222222044654"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402292003743.png" alt="image-20240229200320670"></p><p>然后保存文件，再次查壳发现文件由最开始的upx3.91+变成了upx3.96</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402222227317.png" alt="image-20240222222701283"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402222227288.png" alt="image-20240222222727256"></p><p>打开发现是这样的（部分）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402272350601.png" alt="image-20240227235023536"></p><p>按照次规律下去，在最后一行第500行应该有500个数，只不过因为显示问题没用呈三角形排列</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402281332718.png" alt="image-20240228133245628"></p><p>点开查看dword_1400048B0,发现和1400048B4是连续的</p><p>所以可以判断得到路径：</p><p>若为1则加正下⽅的数，若为2则加右下⽅的数</p><p>v10为由⾸层加⾄末层的路径值的和 </p><p>路径和&gt;&#x3D;6752833的路径求md5即可得到路径</p><h5 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h5><p>#include &lt;bits&#x2F;stdc++.h&gt;<br>#include &lt;time.h&gt;<br>#define MAX 6752833</p><p>using namespace std;</p><p>long a[500][500], f[510][510], last[510][510], lis[510];<br>int path[510];</p><p>int main()<br>{<br>    srand(time(NULL));<br>    int x &#x3D; 1, y &#x3D; 1;<br>    FILE *fp &#x3D; fopen(“out”, “rb”);</p><pre><code class="hljs">while (fscanf(fp, &quot;%d&quot;, &amp;a[x][y]) != EOF)&#123;    if (x == y)//这个条件检查当前读取的位置是否位于数字金字塔的对角线上    &#123;        y = 1;//将 y 重置为 1，表示转到下一行的第一个位置        x++;//将 x 增加 1，表示转到下一行        continue;    &#125;    y++;//当数字金字塔的位置不在对角线上时，将 y 增加 1，表示继续读取当前行的下一个位置的数字&#125;x--;//在整个循环结束后，将 x 减去 1，因为在最后一次循环中，x 已经增加了一个额外的值，超过了实际的行数f[1][1] = a[1][1];for (int i = 2; i &lt;= x; i++)&#123;    for (int j = 1; j &lt;= i; j++)    &#123;        f[i][j] = f[i - 1][j] + a[i][j];        last[i][j] = j;        if (f[i - 1][j - 1] + a[i][j] &gt;= f[i][j])        &#123;            f[i][j] = f[i - 1][j - 1] + a[i][j];            last[i][j] = j - 1;        &#125;    &#125;&#125;//这部分代码使用动态规划的方法计算出从金字塔的顶部到每个位置的最大路径和。f[i][j] 表示从顶部到第 i 行第 j 列的最大路径和，last[i][j] 记录在计算最大路径和时选择的路径for (int i = 1; i &lt;= x; i++)&#123;    if (f[x][i] == 6752833)    &#123;        x = 500, y = i;        while (x &gt; 1)        &#123;            lis[x] = a[x][y];            if (last[x][y] == y - 1)            &#123;                path[x] = 2;                y = y - 1;            &#125;            else            &#123;                path[x] = 1;            &#125;            x--;        &#125;    &#125;&#125;for (int i = 2; i &lt;= 500; i++)&#123;    printf(&quot;%d&quot;, path[i]);&#125;return 0;</code></pre><p>}</p><p>hgame{934f7f68145038b3b81482b3d9f3a355}</p><h2 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h2><p>需要掌握：</p><p>1.ELF（Executable and Linkable Format）是一种常见的可执行文件和目标文件格式。在 ELF 文件中，有一个叫做 <strong>.init_array</strong> 的节（section），用于存放程序的初始化函数（init function）的地址。这些初始化函数会在程序执行之前被自动调用，用于执行一些必要的初始化工作。</p><p>.init_array 节中存放着一系列函数指针，这些函数指针指向程序中需要在加载时执行的初始化函数。操作系统在加载 ELF 文件时会依次调用这些初始化函数，确保程序的各个部分都得到正确的初始化。</p><p>需要注意的是，.init_array 节中的初始化函数的执行顺序是按照它们在节中的出现顺序来确定的。因此，开发者在编写这些初始化函数时需要考虑它们之间的依赖关系，以确保程序能够正确地初始化。</p><p>2.特定库&lt;pthread.h&gt;</p><p>​部分函数：</p><p><strong>sem_wait() 函数</strong>:</p><ul><li>当一个线程调用 sem_wait() 函数时，它会试图获取一个信号量。如果信号量的值大于 0，表示有可用的资源，那么该线程将继续执行，并且信号量的值会减 1。</li><li>如果信号量的值为 0，表示当前没有可用的资源，那么调用 sem_wait() 的线程会被挂起（阻塞），直到有其他线程调用 sem_post() 来增加信号量的值。</li></ul><p><strong>sem_post() 函数</strong>:</p><ul><li>当一个线程调用 sem_post() 函数时，它会释放一个资源，并将信号量的值加 1。</li><li>如果此时有其他线程正在等待该信号量（即信号量的值为 0），则会有一个或多个线程从 sem_wait() 中返回，并继续执行其后续操作。</li></ul><p>总的来说，信号量提供了一种线程间同步和互斥的机制，允许线程之间协调共享资源的访问。sem_wait() 用于等待资源的获取，并在获取到资源时继续执行，而在资源不可用时被挂起；sem_post() 用于释放资源，以便其他线程可以继续执行。这样，通过信号量的使用，可以有效地控制并发线程对共享资源的访问，避免竞态条件和数据不一致的问题。</p><h5 id="signal-8-handler-：这行代码用于设置信号处理函数。signal-函数用于注册信号处理函数，其中第一个参数表示信号编号，这里是-8（通常用于处理程序错误）。第二个参数是信号处理函数的地址，即-handler"><a href="#signal-8-handler-：这行代码用于设置信号处理函数。signal-函数用于注册信号处理函数，其中第一个参数表示信号编号，这里是-8（通常用于处理程序错误）。第二个参数是信号处理函数的地址，即-handler" class="headerlink" title="signal(8, handler) ：这行代码用于设置信号处理函数。signal 函数用于注册信号处理函数，其中第一个参数表示信号编号，这里是 8（通常用于处理程序错误）。第二个参数是信号处理函数的地址，即 handler"></a>signal(8, handler) ：这行代码用于设置信号处理函数。<code>signal</code> 函数用于注册信号处理函数，其中第一个参数表示信号编号，这里是 8（通常用于处理程序错误）。第二个参数是信号处理函数的地址，即 <code>handler</code></h5><p>使用：</p><ul><li><h6 id="sem-init-adress，0，初值-初始化信号值"><a href="#sem-init-adress，0，初值-初始化信号值" class="headerlink" title="sem_init(adress，0，初值)        初始化信号值"></a>sem_init(adress，0，初值)        初始化信号值</h6></li><li><h6 id="pthread-create-adress，0，函数，0-创建线程"><a href="#pthread-create-adress，0，函数，0-创建线程" class="headerlink" title="pthread_create(adress，0，函数，0)           创建线程"></a>pthread_create(adress，0，函数，0)           创建线程</h6></li><li><h6 id="sem-wait-adress-等待信号值，一旦信号值不为0，则信号值立马减一并返回，若信号值为0则阻塞线程的进行"><a href="#sem-wait-adress-等待信号值，一旦信号值不为0，则信号值立马减一并返回，若信号值为0则阻塞线程的进行" class="headerlink" title="sem_wait(adress)        等待信号值，一旦信号值不为0，则信号值立马减一并返回，若信号值为0则阻塞线程的进行"></a>sem_wait(adress)        等待信号值，一旦信号值不为0，则信号值立马减一并返回，若信号值为0则阻塞线程的进行</h6></li><li><h6 id="sem-post-adress-信号值加一"><a href="#sem-post-adress-信号值加一" class="headerlink" title="sem_post(adress)      信号值加一"></a>sem_post(adress)      信号值加一</h6></li><li><h6 id="pthread-join-ptr-0LL-暂停现行线程，直到指定线程运行完毕"><a href="#pthread-join-ptr-0LL-暂停现行线程，直到指定线程运行完毕" class="headerlink" title="pthread_join(*(&amp;ptr ), 0LL)   暂停现行线程，直到指定线程运行完毕"></a>pthread_join(*(&amp;ptr ), 0LL)   暂停现行线程，直到指定线程运行完毕</h6></li></ul><p>3.进程</p><p><a href="https://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html">进程与线程的一个简单解释 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><p>4.浮点异常</p><ul><li>试图将一个数除以0</li><li>试图对负数取平方根</li><li>试图对负数取对数</li><li>浮点数溢出或下溢（例如，结果太大或太小无法表示）</li></ul><p>​在这种情况下，程序会收到一个 SIGFPE 信号并终止执行</p><p>做题：修改变量名后</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402232143280.png" alt="image-20240223214302243"></p><p>进入输入函数，可知 dword_41C0为输入input，点开后发现地址与4240连续，即输入32个字节，第33个字节被设置为249</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402232142518.png" alt="image-20240223214236445"></p><p>进入func1，如下</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402232150169.png" alt="image-20240223215051132"></p><p>用8.3 IDA远调 注意用同一个版本的server，不然就会报错</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402232211534.png" alt="image-20240223221128486"></p><p>调试</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402232326490.png" alt="image-20240223232657455"></p><p>调试到第四次，F8步过的时候，发生浮点异常</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402232328756.png" alt="image-20240223232802732"></p><p>对于<img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402232348608.png" alt="image-20240223234814579"></p><p>这段代码的作用是设置一个信号处理函数 <code>handler</code>，然后在执行关键代码之前，检查是否是第一次执行，如果是则注册信号处理函数，并进行数组元素异或操作。这样，在执行关键代码期间，如果产生了信号（例如，程序错误），会跳转到注册的信号处理函数进行相应的处理，所以最后得到字符串wtxfei</p><p>然后就是注意看清楚循环结构，一次循环会执行完1,2,3,4四个线程</p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp:"></a>exp:</h4><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402240150190.png" alt="image-20240224015018099"></p><p>hgame{you_are_3o_c1ever2_3Olve!}</p><h2 id="babyAndroid"><a href="#babyAndroid" class="headerlink" title="babyAndroid"></a>babyAndroid</h2><p>主要逻辑</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402241834999.png" alt="image-20240224183444916"></p><p>注意此时双击key获取的是key的资源id而不是key的值</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402241833507.png" alt="image-20240224183354420"></p><p>最初在下图中可得知经过加密后的数据如最下方check函数，发现是RC4加密</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402241820634.png" alt="image-20240224182056478"></p><p>接下来就是获取key（正确打开方式）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3e1fel<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402241556639.png"></p><p>使用工具解密，注意要将数据进行处理变为16进制，我们会发现得到的数据里面包含了负数</p><p>对于负数的转换，常用的方法是使用补码表示法。以下是将负数转换为十六进制的步骤：</p><ol><li>将负数的绝对值转换为二进制表示。例如，-75 的绝对值是 75，其二进制表示为 1001011。</li><li>如果二进制表示不足 8 位，需要在左侧填充零，使其达到 8 位长度。在这种情况下，补充前导零使二进制表示为 01001011。</li><li>取该二进制数的按位取反。对于 01001011，按位取反后为 10110100。</li><li>将按位取反后的二进制数加 1。对于 10110100，加 1 后为 10110101。</li><li>将得到的补码转换为十六进制表示。10110101 转换为十六进制表示为 0xB5。</li></ol><p>因此，-75 的十六进制表示为 0xB5。同样的方法可以应用于其他负数的转换。</p><p>按照以上方法，所以处理后得到的数据为 0xB5 0x50 0x50 0x30 0xA8 0x4B 0x67 0xD3 0xA5 0x59 0xC4 0x5B 0xCA 0x05 0x06 0xB8，去空格，替换小写后得 G&gt;IkH&lt;aHu5FE3GSV</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402241950194.png" alt="image-20240224195057092"></p><p>（不知道为什么拿cyberchef解出来不对）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402241955465.png"></p><p>apk改后缀名为zip解压后在lib里面找到so文件，然后在native层</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402241629750.png" alt="image-20240224162921712"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402241753192.png" alt="image-20240224175313128"></p><p>点开函数发现是AES（可使用findcrypt判断）</p><p>得到加密数据</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402292005165.png" alt="image-20240229200503061"></p><p>（在汇编语言中，<code>DCB</code> 是 “Define Constant Byte” 的缩写，用于声明一个或多个字节常量。每个 <code>DCB</code> 指令后面跟随着一系列以逗号分隔的字节值。）</p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402251314330.png" alt="image-20240225131403217"></p><h2 id="ezcpp"><a href="#ezcpp" class="headerlink" title="ezcpp"></a>ezcpp</h2><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402242116472.png" alt="image-20240224211649383"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402242117762.png" alt="image-20240224211719667"></p><p><img src="https://cdn.jsdelivr.net/gh/pzlzx/tuchuang@main/main/202402242118370.png" alt="image-20240224211802299"></p><p>总的加密逻辑就这样，逆回去就行了（这个题因为数据是一样的但是我以为不一样，看wp看了半天最后知道是一样的……深深的伤透了我的心……）</p><p>循环四次，从后面往前面，八个字节为一组</p><h5 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h5><p>#include&lt;bits&#x2F;stdc++.h&gt;<br> using namespace std;<br> void decrypt(uint32_t* v, uint32_t* k)<br> {<br>   uint32_t v0 &#x3D; v[0], v1 &#x3D; v[1];<br>   uint32_t delta &#x3D; 0xdeadbeef, sum &#x3D; delta * 32;<br>   for (int i &#x3D; 0; i &lt; 32; i++)<br>   {<br>     v1 -&#x3D; (v0 + sum) ^ (k[2] + (v0 &lt;&lt; 4)) ^ (k[3] + (v0 &lt;&lt; 5));<br>     v0 -&#x3D; (v1 + sum) ^ (k[0] + (v1 &lt;&lt; 4)) ^ (k[1] + (v1 &lt;&lt;5));<br>     sum -&#x3D; delta;<br>   }<br>   v[0] &#x3D; v0, v[1] &#x3D; v1;<br> }</p><p> int main()<br> {<br>   uint32_t key[] &#x3D; {1234,2341,3412,4123};<br>   unsigned char cipher[] &#x3D; {0x88, 0x04, 0xC6, 0x6A, 0x7F, 0xA7, 0xEC, 0x27, 0x6E, 0xBF, 0xB8, 0xAA, 0x0D, 0x3A, 0xAD, 0xE7, 0x7E, 0x52, 0xFF, 0x8C, 0x8B, 0xEF, 0x11, 0x9C, 0x3D, 0xC3, 0xEA, 0xFD, 0x23, 0x1F, 0x71, 0x4D };<br>   decrypt((uint32_t *)&amp;cipher[24], key);<br>   decrypt((uint32_t *)&amp;cipher[16], key);<br>   decrypt((uint32_t *)&amp;cipher[8], key);<br>   decrypt((uint32_t *)&amp;cipher[0], key);<br>   printf(“%s”, cipher);</p><p> }</p><p>hgame</p>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式（部分）</title>
    <link href="/2024/02/21/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/"/>
    <url>/2024/02/21/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式（部分）"><a href="#正则表达式（部分）" class="headerlink" title="正则表达式（部分）"></a>正则表达式（部分）</h1><p>d? d出现0&#x2F;1次  </p><p>a＊ a可以出现0&#x2F;多次  </p><p>a+ a出现一次以上  </p><p>a｛6｝ a出现6次  </p><p>a｛2，｝ a出现2次以上  </p><p>a｛2，6｝ a出现2-6次  </p><h2 id="匹配多个字符："><a href="#匹配多个字符：" class="headerlink" title="匹配多个字符："></a>匹配多个字符：</h2><p>(ab)+ ab出现一次以上  </p><h2 id="或运算："><a href="#或运算：" class="headerlink" title="或运算："></a>或运算：</h2><p>a (cat|dog) 匹配 a cat or a dog  </p><p>a cat|dog 匹配 a cat or dog  </p><h2 id="字符类："><a href="#字符类：" class="headerlink" title="字符类："></a>字符类：</h2><p>匹配由abc构成的数据【abc】+ abc 出现一次以上 abc aabbcc  </p><p>【a-zA-Z0-9】 ABCabc123  </p><p>^ 排除 【^0-9】 匹配0-9之外的数据(包括换行符)  </p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>\d 数字字符 \d+ 匹配一个以上的数字  </p><p>\D 非数字字符  </p><p>\w 单词字符 单词 数字 下划线即英文字符  </p><p>\W 非单词字符  </p><p>\s 空白符 包含空格和换行符  </p><p>\S 非空白字符  </p><p>\b 单词的边界 单词的开头或结尾 单词与符号之前的边界  </p><p>\B 非单词的边界 符号与符号 单词与单词的边界  </p><p>. 任意字符不包含换行符  </p><p>\. 表示. 通过\进行了转义  </p><p>^ 匹配行首 $ 匹配行尾  </p><p>＊+｛｝贪婪匹配  </p><p>&lt;.+&gt; 会匹配整串 因为是贪婪匹配  </p><p>&lt;.+?&gt; 只匹配两个标签代码，➕? 设置为懒惰匹配</p>]]></content>
    
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zoomeye</title>
    <link href="/2024/02/19/zoomeye/"/>
    <url>/2024/02/19/zoomeye/</url>
    
    <content type="html"><![CDATA[<h1 id="zoomeye-md"><a href="#zoomeye-md" class="headerlink" title="zoomeye.md"></a>zoomeye.md</h1><p>应该最突出的就是首页的搜索引擎</p><p><a href="https://www.zoomeye.org/profile/domain">https://www.zoomeye.org/profile/domain</a></p><p>用处：可以查询域名&#x2F;IP关联信息，也可以查询子域名信息，并且支持TXT和Json 格式导出</p><h4 id="生活篇："><a href="#生活篇：" class="headerlink" title="生活篇："></a>生活篇：</h4><p>右上方个人的界面中，在数据订阅界面可以添加特定ip进行订阅，可以通过将自己的关注对象添加到订阅列表里面而避免查看众多网页。</p><p>ZoomEye可以记录的具体IP地址的变动：</p><p>例如：</p><ol><li><h5 id="IP地址更改：如果一个网站或服务的IP地址发生变化，ZoomEye可以记录这种变化。例如，当一个网站从一个服务器迁移到另一个服务器时，IP地址会发生变化，ZoomEye可以捕捉到这种变动。"><a href="#IP地址更改：如果一个网站或服务的IP地址发生变化，ZoomEye可以记录这种变化。例如，当一个网站从一个服务器迁移到另一个服务器时，IP地址会发生变化，ZoomEye可以捕捉到这种变动。" class="headerlink" title="IP地址更改：如果一个网站或服务的IP地址发生变化，ZoomEye可以记录这种变化。例如，当一个网站从一个服务器迁移到另一个服务器时，IP地址会发生变化，ZoomEye可以捕捉到这种变动。"></a>IP地址更改：如果一个网站或服务的IP地址发生变化，ZoomEye可以记录这种变化。例如，当一个网站从一个服务器迁移到另一个服务器时，IP地址会发生变化，ZoomEye可以捕捉到这种变动。</h5></li><li><h5 id="域名解析变化：如果一个域名的解析记录发生变化，导致与该域名相关联的IP地址发生变化，ZoomEye可以记录这种变化。这可能发生在网站迁移、域名所有权更改或DNS配置变动等情况下。"><a href="#域名解析变化：如果一个域名的解析记录发生变化，导致与该域名相关联的IP地址发生变化，ZoomEye可以记录这种变化。这可能发生在网站迁移、域名所有权更改或DNS配置变动等情况下。" class="headerlink" title="域名解析变化：如果一个域名的解析记录发生变化，导致与该域名相关联的IP地址发生变化，ZoomEye可以记录这种变化。这可能发生在网站迁移、域名所有权更改或DNS配置变动等情况下。"></a>域名解析变化：如果一个域名的解析记录发生变化，导致与该域名相关联的IP地址发生变化，ZoomEye可以记录这种变化。这可能发生在网站迁移、域名所有权更改或DNS配置变动等情况下。</h5></li><li><h5 id="IP地址切换：某些服务或网站可能会在不同的IP地址之间进行切换，以实现负载均衡或故障转移。ZoomEye可以记录这种IP地址切换的情况，当一个服务在不同的IP地址之间进行轮换时，ZoomEye可以捕捉到这种变动。"><a href="#IP地址切换：某些服务或网站可能会在不同的IP地址之间进行切换，以实现负载均衡或故障转移。ZoomEye可以记录这种IP地址切换的情况，当一个服务在不同的IP地址之间进行轮换时，ZoomEye可以捕捉到这种变动。" class="headerlink" title="IP地址切换：某些服务或网站可能会在不同的IP地址之间进行切换，以实现负载均衡或故障转移。ZoomEye可以记录这种IP地址切换的情况，当一个服务在不同的IP地址之间进行轮换时，ZoomEye可以捕捉到这种变动。"></a>IP地址切换：某些服务或网站可能会在不同的IP地址之间进行切换，以实现负载均衡或故障转移。ZoomEye可以记录这种IP地址切换的情况，当一个服务在不同的IP地址之间进行轮换时，ZoomEye可以捕捉到这种变动。</h5></li></ol><h5 id="针对以上功能，可以实现预防被网络诈骗，攻击等，例如一些网络技术人员通过改变ip地址来隐藏真实身份，或者通过改变ip地址隐藏行踪，传播违法内容等（具体的使用还可以结合对ip的精确地理定位）"><a href="#针对以上功能，可以实现预防被网络诈骗，攻击等，例如一些网络技术人员通过改变ip地址来隐藏真实身份，或者通过改变ip地址隐藏行踪，传播违法内容等（具体的使用还可以结合对ip的精确地理定位）" class="headerlink" title="针对以上功能，可以实现预防被网络诈骗，攻击等，例如一些网络技术人员通过改变ip地址来隐藏真实身份，或者通过改变ip地址隐藏行踪，传播违法内容等（具体的使用还可以结合对ip的精确地理定位）"></a>针对以上功能，可以实现预防被网络诈骗，攻击等，例如一些网络技术人员通过改变ip地址来隐藏真实身份，或者通过改变ip地址隐藏行踪，传播违法内容等（具体的使用还可以结合对ip的精确地理定位）</h5><p><a href="https://www.imagehub.cc/image/1hNr0a"><img src="https://s1.imagehub.cc/images/2024/02/19/1be02aae939aa9087ac7c3f4efd7eb51.png" alt="1be02aae939aa9087ac7c3f4efd7eb51.png"></a></p><p>曲线图可以直观显示订阅量变化</p><p><a href="https://www.imagehub.cc/image/1hNbXA"><img src="https://s1.imagehub.cc/images/2024/02/19/c5d64666abd174856df66e650d24303e.png" alt="c5d64666abd174856df66e650d24303e.png"></a></p><p>可以对ip所在地理位置进行解析应该zoomeye是除了搜索功能外的另外一个大的亮点，其位置可以精确到50m以内（只在中国大陆地区）</p><p><a href="https://www.imagehub.cc/image/1hNEdS"><img src="https://s1.imagehub.cc/images/2024/02/19/9f176a0d9672becf77818496cabaeef9.png" alt="9f176a0d9672becf77818496cabaeef9.png"></a></p><p>可以通过对特定端口的搜索来找到互联网上公开暴露该特定端口的服务，可以达到信息集合的效果</p><p>例如，搜索3306端口可以得到与MySOL数据库服务器相关的结果。</p><p><a href="https://www.imagehub.cc/image/1hNGWL"><img src="https://s1.imagehub.cc/images/2024/02/19/ae9e9798e358cdb76782a62c359d552d.png" alt="ae9e9798e358cdb76782a62c359d552d.png"></a></p><p>通过搜索可以得到正在运行3306端口上的MySQL数据库实例相关信息，例如主机名，IP地址，数据库版本以及使用MySOL数据库的应用程序或网站，即可以显示哪些IP地址正在使用MySQL数据库。<br>可以通过对搜索词的限制来缩小目标范围</p><p><a href="https://www.imagehub.cc/image/1hNPLB"><img src="https://s1.imagehub.cc/images/2024/02/19/d7fdc0f6d1e4563befe732073e41f77b.png" alt="d7fdc0f6d1e4563befe732073e41f77b.png"></a></p><p>通过点击ip可以获得该ip详情，也可以通过最下端查看相关漏洞</p><p><a href="https://www.imagehub.cc/image/1hNRqq"><img src="https://s1.imagehub.cc/images/2024/02/19/d1b0ba23f97d16a6a7c502a1ccca1ade.png" alt="d1b0ba23f97d16a6a7c502a1ccca1ade.png"></a></p><p><a href="https://www.imagehub.cc/image/1hNs3U"><img src="https://s1.imagehub.cc/images/2024/02/19/5407237573cc620928838dfb3aa7a7bb.png" alt="5407237573cc620928838dfb3aa7a7bb.png"></a></p><h4 id="企业篇"><a href="#企业篇" class="headerlink" title="企业篇"></a>企业篇</h4><p>可以针对ZoomEye-python命令行工具的API功能特性来实现：</p><p><a href="https://github.com/knownsec/ZoomEye-python">https://github.com/knownsec/ZoomEye-python</a></p><p>ZoomEye 记录所有主动发起网络攻击的IP记录，并且标记在IP信息中。可以提醒用户对目标进一步进行甄别，使得IP的标记更 加具备实用性，避免用户因盲目攻击目标从而给自身带来相关风险。</p><ol><li><h5 id="恶意活动检测：使用ZoomEye的自动化任务，可以定期搜索可疑IP地址、域名，URL等，通过将其与数据库中有关的恶意活动进行对比，最终可以实现自身对于恶意软件的预防。"><a href="#恶意活动检测：使用ZoomEye的自动化任务，可以定期搜索可疑IP地址、域名，URL等，通过将其与数据库中有关的恶意活动进行对比，最终可以实现自身对于恶意软件的预防。" class="headerlink" title="恶意活动检测：使用ZoomEye的自动化任务，可以定期搜索可疑IP地址、域名，URL等，通过将其与数据库中有关的恶意活动进行对比，最终可以实现自身对于恶意软件的预防。"></a>恶意活动检测：使用ZoomEye的自动化任务，可以定期搜索可疑IP地址、域名，URL等，通过将其与数据库中有关的恶意活动进行对比，最终可以实现自身对于恶意软件的预防。</h5><h5 id=""><a href="#" class="headerlink" title=""></a></h5></li></ol><p>例如在网络上浏览网页时，可能会有一些跳转链接，点击后可能会出现电脑提示不安全这种情况，此时如果想进一步了解相关的IP地址或域名的信息，可以使用ZoomEye的搜索功能，通过搜索IP地址或域名来获取更多的公开信息和资源。比如该IP地址或域名的历史记录、公开的漏洞信息、相关的网站或服务等。</p><pre><code class="hljs">（据了解好像原理主要是与数据库中里面已知的有关的恶意活动的ip地址黑名单进行比对，特征比对等，还不能完全借此直接判断一个ip的安全性）</code></pre><ol start="2"><li><h5 id="反向操作来健侧公开泄露的个人信息：利用ZoomEye搜索引擎，检索公开暴露的数据库和其他敏感信息，如社交媒体上的用户信息、电子邮件地址和密码。编写Python脚本，定期检查这些数据是否出现在公开泄露的数据源中，帮助企业及时发现泄露风险。"><a href="#反向操作来健侧公开泄露的个人信息：利用ZoomEye搜索引擎，检索公开暴露的数据库和其他敏感信息，如社交媒体上的用户信息、电子邮件地址和密码。编写Python脚本，定期检查这些数据是否出现在公开泄露的数据源中，帮助企业及时发现泄露风险。" class="headerlink" title="反向操作来健侧公开泄露的个人信息：利用ZoomEye搜索引擎，检索公开暴露的数据库和其他敏感信息，如社交媒体上的用户信息、电子邮件地址和密码。编写Python脚本，定期检查这些数据是否出现在公开泄露的数据源中，帮助企业及时发现泄露风险。"></a>反向操作来健侧公开泄露的个人信息：利用ZoomEye搜索引擎，检索公开暴露的数据库和其他敏感信息，如社交媒体上的用户信息、电子邮件地址和密码。编写Python脚本，定期检查这些数据是否出现在公开泄露的数据源中，帮助企业及时发现泄露风险。</h5></li></ol><p><a href="https://www.imagehub.cc/image/1hNHJ0"><img src="https://s1.imagehub.cc/images/2024/02/19/2693e6fd6e034429d4d38322fa9c8f39.png" alt="2693e6fd6e034429d4d38322fa9c8f39.png"></a></p><h4 id="使用体验："><a href="#使用体验：" class="headerlink" title="使用体验："></a>使用体验：</h4><h5 id="zoomeye网页设计很简洁，清晰明了，与其针对安全的核心功能相符合，可以很方便地搜索和获取关于互联网上的设备、服务和漏洞等信息。它提供了强大的功能和丰富的数据源"><a href="#zoomeye网页设计很简洁，清晰明了，与其针对安全的核心功能相符合，可以很方便地搜索和获取关于互联网上的设备、服务和漏洞等信息。它提供了强大的功能和丰富的数据源" class="headerlink" title="zoomeye网页设计很简洁，清晰明了，与其针对安全的核心功能相符合，可以很方便地搜索和获取关于互联网上的设备、服务和漏洞等信息。它提供了强大的功能和丰富的数据源"></a>zoomeye网页设计很简洁，清晰明了，与其针对安全的核心功能相符合，可以很方便地搜索和获取关于互联网上的设备、服务和漏洞等信息。它提供了强大的功能和丰富的数据源</h5><h4 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h4><h5 id="1-可以加强对数据库的丰富：虽然可见-Zoomeye-已经提供了大量的数据源，但仍然有些特定的目标无法覆盖，相信通过更多数据源的增加可以提供更全面和广泛的搜索结果"><a href="#1-可以加强对数据库的丰富：虽然可见-Zoomeye-已经提供了大量的数据源，但仍然有些特定的目标无法覆盖，相信通过更多数据源的增加可以提供更全面和广泛的搜索结果" class="headerlink" title="1.可以加强对数据库的丰富：虽然可见 Zoomeye 已经提供了大量的数据源，但仍然有些特定的目标无法覆盖，相信通过更多数据源的增加可以提供更全面和广泛的搜索结果"></a>1.可以加强对数据库的丰富：虽然可见 Zoomeye 已经提供了大量的数据源，但仍然有些特定的目标无法覆盖，相信通过更多数据源的增加可以提供更全面和广泛的搜索结果</h5><h5 id="2-完善使用说明：对于一些新用户或初次接触-Zoomeye-的人来说，整体的使用还是略显困难，通过完善平台自身介绍，如提供更多的文档、视频教程或在线指南，可以帮助用户更好地了解和使用这个平台，同时也可以达到扩展用户数的宣传的目的"><a href="#2-完善使用说明：对于一些新用户或初次接触-Zoomeye-的人来说，整体的使用还是略显困难，通过完善平台自身介绍，如提供更多的文档、视频教程或在线指南，可以帮助用户更好地了解和使用这个平台，同时也可以达到扩展用户数的宣传的目的" class="headerlink" title="2.完善使用说明：对于一些新用户或初次接触 Zoomeye 的人来说，整体的使用还是略显困难，通过完善平台自身介绍，如提供更多的文档、视频教程或在线指南，可以帮助用户更好地了解和使用这个平台，同时也可以达到扩展用户数的宣传的目的"></a>2.完善使用说明：对于一些新用户或初次接触 Zoomeye 的人来说，整体的使用还是略显困难，通过完善平台自身介绍，如提供更多的文档、视频教程或在线指南，可以帮助用户更好地了解和使用这个平台，同时也可以达到扩展用户数的宣传的目的</h5><h5 id="3-可以优化搜索引擎的语法"><a href="#3-可以优化搜索引擎的语法" class="headerlink" title="3.可以优化搜索引擎的语法"></a>3.可以优化搜索引擎的语法</h5><h5 id="4-在原有的文本搜索，ip搜索的基础上可以增加更多功能，例如将ip搜索与实景结合，增加图片识别功能等"><a href="#4-在原有的文本搜索，ip搜索的基础上可以增加更多功能，例如将ip搜索与实景结合，增加图片识别功能等" class="headerlink" title="4.在原有的文本搜索，ip搜索的基础上可以增加更多功能，例如将ip搜索与实景结合，增加图片识别功能等"></a>4.在原有的文本搜索，ip搜索的基础上可以增加更多功能，例如将ip搜索与实景结合，增加图片识别功能等</h5>]]></content>
    
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake笔记</title>
    <link href="/2024/02/05/cmake%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/05/cmake%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h1><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>cmake的定义是什么 ？—–高级编译配置工具</p><p>当多个人用不同的语言或者编译器开发一个项目，最终要输出一个可执行文件或者共享库（dll，so等等）这时候神器就出现了—–CMake！</p><p>所有操作都是通过编译CMakeLists.txt来完成的—简单</p><p>官 方网站是 <a href="http://www.cmake.org/">www.cmake.org</a>，可以通过访问官方网站获得更多关于 cmake 的信息</p><p>学习CMake的目的，为将来处理大型的C&#x2F;C++&#x2F;JAVA项目做准备</p><h1 id="CMake安装"><a href="#CMake安装" class="headerlink" title="CMake安装"></a>CMake安装</h1><p>1、绝大多数的linux系统已经安装了CMake</p><p>2、Windows或某些没有安装过的linux系统，去<a href="http://www.cmake.org/HTML/Download.html">http://www.cmake.org/HTML/Download.htm</a>l  可以下载安装</p><h1 id="CMake一个HelloWord"><a href="#CMake一个HelloWord" class="headerlink" title="CMake一个HelloWord"></a>CMake一个HelloWord</h1><p>1、步骤一，写一个HelloWord</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#main.cpp</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>std::cout &lt;&lt;  <span class="hljs-string">&quot;hello word&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、步骤二，写CMakeLists.txt</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">#CMakeLists.<span class="hljs-function">txt</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">PROJECT</span> <span class="hljs-params">(HELLO)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">SET</span><span class="hljs-params">(SRC_LIST main.cpp)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">MESSAGE</span><span class="hljs-params">(STATUS <span class="hljs-string">&quot;This is BINARY dir &quot;</span> $&#123;HELLO_BINARY_DIR&#125;)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">MESSAGE</span><span class="hljs-params">(STATUS <span class="hljs-string">&quot;This is SOURCE dir &quot;</span>$&#123;HELLO_SOURCE_DIR&#125;)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">ADD_EXECUTABLE</span><span class="hljs-params">(hello $&#123;SRC_LIST&#125;)</span></span><br></code></pre></td></tr></table></figure><p>3、步骤三、使用cmake，生成makefile文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cmake .<br><br>输出：<br>[root@localhost cmake]<span class="hljs-meta"># cmake .</span><br><span class="hljs-function">CMake <span class="hljs-title">Warning</span> <span class="hljs-params">(dev)</span> in CMakeLists.txt:</span><br><span class="hljs-function">  Syntax Warning in cmake code at</span><br><span class="hljs-function"></span><br><span class="hljs-function">    /root/cmake/CMakeLists.txt:<span class="hljs-number">7</span>:<span class="hljs-number">37</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">  Argument not separated from preceding token by whitespace.</span><br><span class="hljs-function">This warning is for project developers.  Use -Wno-dev to suppress it.</span><br><span class="hljs-function"></span><br><span class="hljs-function">-- The C compiler identification is GNU <span class="hljs-number">10.2</span><span class="hljs-number">.1</span></span><br><span class="hljs-function">-- The CXX compiler identification is GNU <span class="hljs-number">10.2</span><span class="hljs-number">.1</span></span><br><span class="hljs-function">-- Check for working C compiler: /usr/bin/cc</span><br><span class="hljs-function">-- Check for working C compiler: /usr/bin/cc -- works</span><br><span class="hljs-function">-- Detecting C compiler ABI info</span><br><span class="hljs-function">-- Detecting C compiler ABI info - done</span><br><span class="hljs-function">-- Check for working CXX compiler: /usr/bin/c++</span><br><span class="hljs-function">-- Check for working CXX compiler: /usr/bin/c++ -- works</span><br><span class="hljs-function">-- Detecting CXX compiler ABI info</span><br><span class="hljs-function">-- Detecting CXX compiler ABI info - done</span><br><span class="hljs-function">-- This is BINARY dir /root/cmake</span><br><span class="hljs-function">-- This is SOURCE dir /root/cmake</span><br><span class="hljs-function">-- Configuring done</span><br><span class="hljs-function">-- Generating done</span><br><span class="hljs-function">-- Build files have been written to: /root/cmake</span><br></code></pre></td></tr></table></figure><p>目录下就生成了这些文件-CMakeFiles, CMakeCache.txt, cmake_install.cmake 等文件，并且生成了Makefile.<br>现在不需要理会这些文件的作用，以后你也可以不去理会。最关键的是，它自动生成了Makefile.</p><p>4、使用make命令编译</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">root@localhost cmake]<span class="hljs-meta"># make</span><br>Scanning dependencies of target hello<br>[<span class="hljs-number">100</span>%] Building CXX object CMakeFiles/hello.dir/main.cpp.o<br>Linking CXX executable hello<br>[<span class="hljs-number">100</span>%] Built target hello<br></code></pre></td></tr></table></figure><p>5、最终生成了Hello的可执行程序</p><h1 id="CMake一个HelloWord-的语法介绍"><a href="#CMake一个HelloWord-的语法介绍" class="headerlink" title="CMake一个HelloWord-的语法介绍"></a>CMake一个HelloWord-的语法介绍</h1><h2 id="PROJECT关键字"><a href="#PROJECT关键字" class="headerlink" title="PROJECT关键字"></a>PROJECT关键字</h2><p>可以用来指定工程的名字和支持的语言，默认支持所有语言</p><p>PROJECT (HELLO)   指定了工程的名字，并且支持所有语言—建议</p><p>PROJECT (HELLO CXX)      指定了工程的名字，并且支持语言是C++</p><p>PROJECT (HELLO C CXX)      指定了工程的名字，并且支持语言是C和C++</p><p>该指定隐式定义了两个CMAKE的变量</p><p><projectname>_BINARY_DIR，本例中是 HELLO_BINARY_DIR</p><p><projectname>_SOURCE_DIR，本例中是 HELLO_SOURCE_DIR</p><p>MESSAGE关键字就可以直接使用者两个变量，当前都指向当前的工作目录，后面会讲外部编译</p><p>问题：如果改了工程名，这两个变量名也会改变</p><p>解决：又定义两个预定义变量：PROJECT_BINARY_DIR和PROJECT_SOURCE_DIR，这两个变量和HELLO_BINARY_DIR，HELLO_SOURCE_DIR是一致的。所以改了工程名也没有关系</p><h2 id="SET关键字"><a href="#SET关键字" class="headerlink" title="SET关键字"></a>SET关键字</h2><p>用来显示的指定变量的</p><p>SET(SRC_LIST main.cpp)    SRC_LIST变量就包含了main.cpp</p><p>也可以 SET(SRC_LIST main.cpp t1.cpp t2.cpp)</p><h2 id="MESSAGE关键字"><a href="#MESSAGE关键字" class="headerlink" title="MESSAGE关键字"></a>MESSAGE关键字</h2><p>向终端输出用户自定义的信息</p><p>主要包含三种信息：</p><ul><li>SEND_ERROR，产生错误，生成过程被跳过。</li><li>SATUS，输出前缀为—的信息。</li><li>FATAL_ERROR，立即终止所有 cmake 过程.</li></ul><h2 id="ADD-EXECUTABLE关键字"><a href="#ADD-EXECUTABLE关键字" class="headerlink" title="ADD_EXECUTABLE关键字"></a>ADD_EXECUTABLE关键字</h2><p>生成可执行文件</p><p>ADD_EXECUTABLE(hello ${SRC_LIST})     生成的可执行文件名是hello，源文件读取变量SRC_LIST中的内容</p><p>也可以直接写 ADD_EXECUTABLE(hello main.cpp)</p><p>上述例子可以简化的写成</p><p>PROJECT(HELLO)<br>ADD_EXECUTABLE(hello main.cpp)</p><p>注意：工程名的 HELLO 和生成的可执行文件 hello 是没有任何关系的</p><h1 id="语法的基本原则"><a href="#语法的基本原则" class="headerlink" title="语法的基本原则"></a>语法的基本原则</h1><ul><li><p>变量使用${}方式取值，但是在 IF 控制语句中是直接使用变量名</p></li><li><p>指令(参数 1 参数 2…) 参数使用括弧括起，参数之间使用空格或分号分开。 以上面的 ADD_EXECUTABLE 指令为例，如果存在另外一个 func.cpp 源文件<br>  就要写成：ADD_EXECUTABLE(hello main.cpp func.cpp)或者ADD_EXECUTABLE(hello main.cpp;func.cpp)</p></li><li><p>指令是大小写无关的，参数和变量是大小写相关的。但，推荐你全部使用大写指令</p></li></ul><h2 id="语法注意事项"><a href="#语法注意事项" class="headerlink" title="语法注意事项"></a>语法注意事项</h2><ul><li>SET(SRC_LIST main.cpp) 可以写成 SET(SRC_LIST “main.cpp”)，如果源文件名中含有空格，就必须要加双引号</li><li>ADD_EXECUTABLE(hello main) 后缀可以不行，他会自动去找.c和.cpp，最好不要这样写，可能会有这两个文件main.cpp和main</li></ul><h1 id="内部构建和外部构建"><a href="#内部构建和外部构建" class="headerlink" title="内部构建和外部构建"></a>内部构建和外部构建</h1><ul><li>上述例子就是内部构建，他生产的临时文件特别多，不方便清理</li><li>外部构建，就会把生成的临时文件放在build目录下，不会对源文件有任何影响强烈使用外部构建方式</li></ul><h2 id="外部构建方式举例"><a href="#外部构建方式举例" class="headerlink" title="外部构建方式举例"></a>外部构建方式举例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//例子目录，CMakeLists.txt和上面例子一致</span><br>[root@localhost cmake]<span class="hljs-meta"># pwd</span><br>/root/cmake<br>[root@localhost cmake]<span class="hljs-meta"># ll</span><br>total <span class="hljs-number">8</span><br>-rw-r--r--. <span class="hljs-number">1</span> root root <span class="hljs-number">198</span> Dec <span class="hljs-number">28</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span> CMakeLists.txt<br>-rw-r--r--. <span class="hljs-number">1</span> root root  <span class="hljs-number">76</span> Dec <span class="hljs-number">28</span> <span class="hljs-number">00</span>:<span class="hljs-number">18</span> main.cpp<br></code></pre></td></tr></table></figure><p>1、建立一个build目录，可以在任何地方，建议在当前目录下</p><p>2、进入build，运行cmake ..    当然..表示上一级目录，你可以写CMakeLists.txt所在的绝对路径，生产的文件都在build目录下了</p><p>3、在build目录下，运行make来构建工程</p><p>注意外部构建的两个变量</p><p>1、HELLO_SOURCE_DIR  还是工程路径</p><p>2、HELLO_BINARY_DIR   编译路径 也就是 &#x2F;root&#x2F;cmake&#x2F;bulid</p><h1 id="让Hello-World看起来更像一个工程"><a href="#让Hello-World看起来更像一个工程" class="headerlink" title="让Hello World看起来更像一个工程"></a>让Hello World看起来更像一个工程</h1><ul><li>为工程添加一个子目录 src，用来放置工程源代码</li><li>添加一个子目录 doc，用来放置这个工程的文档 hello.txt</li><li>在工程目录添加文本文件 COPYRIGHT, README</li><li>在工程目录添加一个 <a href="http://runhello.sh/">runhello.sh</a> 脚本，用来调用 hello 二进制</li><li>将构建后的目标文件放入构建目录的 bin 子目录</li><li>将 doc 目录 的内容以及 COPYRIGHT&#x2F;README 安装到&#x2F;usr&#x2F;share&#x2F;doc&#x2F;cmake&#x2F;</li></ul><h2 id="将目标文件放入构建目录的-bin-子目录"><a href="#将目标文件放入构建目录的-bin-子目录" class="headerlink" title="将目标文件放入构建目录的 bin 子目录"></a>将目标文件放入构建目录的 bin 子目录</h2><p>每个目录下都要有一个CMakeLists.txt说明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[root@localhost cmake]<span class="hljs-meta"># tree</span><br>.<br>├── build<br>├── CMakeLists.txt<br>└── src<br>    ├── CMakeLists.txt<br>    └── main.cpp<br></code></pre></td></tr></table></figure><p>外层CMakeLists.txt</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">PROJECT</span>(HELLO)<br><span class="hljs-built_in">ADD_SUBDIRECTORY</span>(src bin)<br></code></pre></td></tr></table></figure><p>src下的CMakeLists.txt</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">ADD_EXECUTABLE</span>(hello main.cpp)<br></code></pre></td></tr></table></figure><h3 id="ADD-SUBDIRECTORY-指令"><a href="#ADD-SUBDIRECTORY-指令" class="headerlink" title="ADD_SUBDIRECTORY 指令"></a>ADD_SUBDIRECTORY 指令</h3><p>ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</p><ul><li><p>这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</p></li><li><p>EXCLUDE_FROM_ALL函数是将写的目录从编译中排除，如程序中的example</p></li><li><p>ADD_SUBDIRECTORY(src bin)<br>  将 src 子目录加入工程并指定编译输出(包含编译中间结果)路径为bin 目录<br>  如果不进行 bin 目录的指定，那么编译结果(包括中间结果)都将存放在build&#x2F;src 目录</p></li></ul><h3 id="更改二进制的保存路径"><a href="#更改二进制的保存路径" class="headerlink" title="更改二进制的保存路径"></a>更改二进制的保存路径</h3><p>SET 指令重新定义 EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH 变量 来指定最终的目标二进制的位置</p><p>SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}&#x2F;bin)<br>SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}&#x2F;lib)</p><p>思考：加载哪个CMakeLists.txt当中</p><p>哪里要改变目标存放路径，就在哪里加入上述的定义，所以应该在src下的CMakeLists.txt下写</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>一种是从代码编译后直接 make install 安装</li><li>一种是打包时的指定 目录安装。<ul><li>简单的可以这样指定目录：make install DESTDIR&#x3D;&#x2F;tmp&#x2F;test</li><li>稍微复杂一点可以这样指定目录：.&#x2F;configure –prefix&#x3D;&#x2F;usr</li></ul></li></ul><h2 id="如何安装HelloWord"><a href="#如何安装HelloWord" class="headerlink" title="如何安装HelloWord"></a>如何安装HelloWord</h2><p>使用CMAKE一个新的指令：INSTALL</p><p>INSTALL的安装可以包括：二进制、动态库、静态库以及文件、目录、脚本等</p><p>使用CMAKE一个新的变量：CMAKE_INSTALL_PREFIX</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 目录树结构</span><br>[root@localhost cmake]<span class="hljs-meta"># tree</span><br>.<br>├── build<br>├── CMakeLists.txt<br>├── COPYRIGHT<br>├── doc<br>│   └── hello.txt<br>├── README<br>├── runhello.sh<br>└── src<br>    ├── CMakeLists.txt<br>    └── main.cpp<br><br><span class="hljs-number">3</span> directories, <span class="hljs-number">7</span> files<br></code></pre></td></tr></table></figure><h3 id="安装文件COPYRIGHT和README"><a href="#安装文件COPYRIGHT和README" class="headerlink" title="安装文件COPYRIGHT和README"></a>安装文件COPYRIGHT和README</h3><p>INSTALL(FILES COPYRIGHT README DESTINATION share&#x2F;doc&#x2F;cmake&#x2F;)</p><p>FILES：文件</p><p>DESTINATION：</p><p>1、写绝对路径</p><p>2、可以写相对路径，相对路径实际路径是：${CMAKE_INSTALL_PREFIX}&#x2F;&lt;DESTINATION 定义的路径&gt;</p><p>CMAKE_INSTALL_PREFIX  默认是在 &#x2F;usr&#x2F;local&#x2F;</p><p>cmake -DCMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr    在cmake的时候指定CMAKE_INSTALL_PREFIX变量的路径</p><h3 id="安装脚本runhello-sh"><a href="#安装脚本runhello-sh" class="headerlink" title="安装脚本runhello.sh"></a>安装脚本runhello.sh</h3><p>PROGRAMS：非目标文件的可执行程序安装(比如脚本之类)</p><p>INSTALL(PROGRAMS runhello.sh DESTINATION bin)</p><p>说明：实际安装到的是 &#x2F;usr&#x2F;bin</p><h3 id="安装-doc-中的-hello-txt"><a href="#安装-doc-中的-hello-txt" class="headerlink" title="安装 doc 中的 hello.txt"></a>安装 doc 中的 hello.txt</h3><ul><li><p>一、是通过在 doc 目录建立CMakeLists.txt ，通过install下的file</p></li><li><p>二、是直接在工程目录通过<br>   INSTALL(DIRECTORY doc&#x2F; DESTINATION share&#x2F;doc&#x2F;cmake)</p></li></ul><p>DIRECTORY 后面连接的是所在 Source 目录的相对路径</p><p>注意：abc 和 abc&#x2F;有很大的区别</p><p>目录名不以&#x2F;结尾：这个目录将被安装为目标路径下的</p><p>目录名以&#x2F;结尾：将这个目录中的内容安装到目标路径</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>cmake ..</p><p>make</p><p>make install</p><h1 id="静态库和动态库的构建"><a href="#静态库和动态库的构建" class="headerlink" title="静态库和动态库的构建"></a>静态库和动态库的构建</h1><p>任务：</p><p>１，建立一个静态库和动态库，提供 HelloFunc 函数供其他程序编程使用，HelloFunc 向终端输出 Hello World 字符串。 </p><p>２，安装头文件与共享库。</p><p>静态库和动态库的区别</p><ul><li>静态库的扩展名一般为“.a”或“.lib”；动态库的扩展名一般为“.so”或“.dll”。</li><li>静态库在编译时会直接整合到目标程序中，编译成功的可执行文件可独立运行</li><li>动态库在编译时不会放到连接的目标程序中，即可执行文件无法单独运行。</li></ul><h2 id="构建实例"><a href="#构建实例" class="headerlink" title="构建实例"></a>构建实例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[root@localhost cmake2]<span class="hljs-meta"># tree</span><br>.<br>├── build<br>├── CMakeLists.txt<br>└── lib<br>    ├── CMakeLists.txt<br>    ├── hello.cpp<br>    └── hello.h<br></code></pre></td></tr></table></figure><p>hello.h中的内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> HELLO_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Hello_H</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HelloFunc</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>hello.cpp中的内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;hello.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HelloFunc</span><span class="hljs-params">()</span></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello World&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>项目中的cmake内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">PROJECT</span>(HELLO)<br><span class="hljs-built_in">ADD_SUBDIRECTORY</span>(lib bin)<br></code></pre></td></tr></table></figure><p>lib中CMakeLists.txt中的内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">SET</span>(LIBHELLO_SRC hello.cpp)<br><span class="hljs-built_in">ADD_LIBRARY</span>(hello SHARED $&#123;LIBHELLO_SRC&#125;)<br></code></pre></td></tr></table></figure><h3 id="ADD-LIBRARY"><a href="#ADD-LIBRARY" class="headerlink" title="ADD_LIBRARY"></a>ADD_LIBRARY</h3><p>ADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})</p><ul><li>hello：就是正常的库名，生成的名字前面会加上lib，最终产生的文件是libhello.so</li><li>SHARED，动态库    STATIC，静态库</li><li>${LIBHELLO_SRC} ：源文件</li></ul><h3 id="同时构建静态和动态库"><a href="#同时构建静态和动态库" class="headerlink" title="同时构建静态和动态库"></a>同时构建静态和动态库</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 如果用这种方式，只会构建一个动态库，不会构建出静态库，虽然静态库的后缀是.a</span><br><span class="hljs-built_in">ADD_LIBRARY</span>(hello SHARED $&#123;LIBHELLO_SRC&#125;)<br><span class="hljs-built_in">ADD_LIBRARY</span>(hello STATIC $&#123;LIBHELLO_SRC&#125;)<br><br><span class="hljs-comment">// 修改静态库的名字，这样是可以的，但是我们往往希望他们的名字是相同的，只是后缀不同而已</span><br><span class="hljs-built_in">ADD_LIBRARY</span>(hello SHARED $&#123;LIBHELLO_SRC&#125;)<br><span class="hljs-built_in">ADD_LIBRARY</span>(hello_static STATIC $&#123;LIBHELLO_SRC&#125;)<br></code></pre></td></tr></table></figure><h3 id="SET-TARGET-PROPERTIES"><a href="#SET-TARGET-PROPERTIES" class="headerlink" title="SET_TARGET_PROPERTIES"></a>SET_TARGET_PROPERTIES</h3><p>这条指令可以用来设置输出的名称，对于动态库，还可以用来指定动态库版本和 API 版本</p><p>同时构建静态和动态库</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">SET</span>(LIBHELLO_SRC hello.cpp)<br><br><span class="hljs-built_in">ADD_LIBRARY</span>(hello_static STATIC $&#123;LIBHELLO_SRC&#125;)<br><br><span class="hljs-comment">//对hello_static的重名为hello</span><br><span class="hljs-built_in">SET_TARGET_PROPERTIES</span>(hello_static PROPERTIES  OUTPUT_NAME <span class="hljs-string">&quot;hello&quot;</span>)<br><span class="hljs-comment">//cmake 在构建一个新的target 时，会尝试清理掉其他使用这个名字的库，因为，在构建 libhello.so 时， 就会清理掉 libhello.a</span><br><span class="hljs-built_in">SET_TARGET_PROPERTIES</span>(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT <span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">ADD_LIBRARY</span>(hello SHARED $&#123;LIBHELLO_SRC&#125;)<br><br><span class="hljs-built_in">SET_TARGET_PROPERTIES</span>(hello PROPERTIES  OUTPUT_NAME <span class="hljs-string">&quot;hello&quot;</span>)<br><span class="hljs-built_in">SET_TARGET_PROPERTIES</span>(hello PROPERTIES CLEAN_DIRECT_OUTPUT <span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><h3 id="动态库的版本号"><a href="#动态库的版本号" class="headerlink" title="动态库的版本号"></a>动态库的版本号</h3><p>一般动态库都有一个版本号的关联</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">libhello.so<span class="hljs-number">.1</span><span class="hljs-number">.2</span><br>libhello.so -&gt;libhello.so<span class="hljs-number">.1</span><br>libhello.so<span class="hljs-number">.1</span>-&gt;libhello.so<span class="hljs-number">.1</span><span class="hljs-number">.2</span><br></code></pre></td></tr></table></figure><p>CMakeLists.txt 插入如下</p><p><code>SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)</code></p><p>VERSION 指代动态库版本，SOVERSION 指代 API 版本。</p><h3 id="安装共享库和头文件"><a href="#安装共享库和头文件" class="headerlink" title="安装共享库和头文件"></a>安装共享库和头文件</h3><p>本例中我们将 hello 的共享库安装到<prefix>&#x2F;lib目录，</p><p>将 hello.h 安装到<prefix>&#x2F;include&#x2F;hello 目录</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//文件放到该目录下</span><br><span class="hljs-built_in">INSTALL</span>(FILES hello.h DESTINATION include/hello)<br><br><span class="hljs-comment">//二进制，静态库，动态库安装都用TARGETS</span><br><span class="hljs-comment">//ARCHIVE 特指静态库，LIBRARY 特指动态库，RUNTIME 特指可执行目标二进制。</span><br><span class="hljs-built_in">INSTALL</span>(TARGETS hello hello_static LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)<br></code></pre></td></tr></table></figure><p>注意：</p><p>安装的时候，指定一下路径，放到系统下</p><p><code>cmake -DCMAKE_INSTALL_PREFIX=/usr ..</code></p><h3 id="使用外部共享库和头文件"><a href="#使用外部共享库和头文件" class="headerlink" title="使用外部共享库和头文件"></a>使用外部共享库和头文件</h3><p>准备工作，新建一个目录来使用外部共享库和头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[root@MiWiFi-R4CM-srv cmake3]<span class="hljs-meta"># tree</span><br>.<br>├── build<br>├── CMakeLists.txt<br>└── src<br>    ├── CMakeLists.txt<br>    └── main.cpp<br></code></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;hello.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">HelloFunc</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解决：make后头文件找不到的问题"><a href="#解决：make后头文件找不到的问题" class="headerlink" title="解决：make后头文件找不到的问题"></a>解决：make后头文件找不到的问题</h3><p>PS：include &lt;hello&#x2F;hello.h&gt;  这样include是可以，这么做的话，就没啥好讲的了</p><p>关键字：INCLUDE_DIRECTORIES    这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割</p><p>在CMakeLists.txt中加入头文件搜索路径</p><p>INCLUDE_DIRECTORIES(&#x2F;usr&#x2F;include&#x2F;hello)</p><p>感谢：</p><p>网友：zcc720的提醒</p><h3 id="解决：找到引用的函数问题"><a href="#解决：找到引用的函数问题" class="headerlink" title="解决：找到引用的函数问题"></a>解决：找到引用的函数问题</h3><p>报错信息：undefined reference to &#96;HelloFunc()’</p><p>关键字：LINK_DIRECTORIES     添加非标准的共享库搜索路径</p><p>指定第三方库所在路径，LINK_DIRECTORIES(&#x2F;home&#x2F;myproject&#x2F;libs)</p><p>关键字：TARGET_LINK_LIBRARIES    添加需要链接的共享库</p><p>TARGET_LINK_LIBRARIES的时候，只需要给出动态链接库的名字就行了。</p><p>在CMakeLists.txt中插入链接共享库，主要要插在executable的后面</p><p>查看main的链接情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[root@MiWiFi-R4CM-srv bin]<span class="hljs-meta"># ldd main </span><br>    linux-vdso.so<span class="hljs-number">.1</span> =&gt;  (<span class="hljs-number">0x00007ffedfda4000</span>)<br>    libhello.so =&gt; /lib64/libhello.<span class="hljs-built_in">so</span> (<span class="hljs-number">0x00007f41c0d8f000</span>)<br>    libstdc++.so<span class="hljs-number">.6</span> =&gt; /lib64/libstdc++.so<span class="hljs-number">.6</span> (<span class="hljs-number">0x00007f41c0874000</span>)<br>    libm.so<span class="hljs-number">.6</span> =&gt; /lib64/libm.so<span class="hljs-number">.6</span> (<span class="hljs-number">0x00007f41c0572000</span>)<br>    libgcc_s.so<span class="hljs-number">.1</span> =&gt; /lib64/libgcc_s.so<span class="hljs-number">.1</span> (<span class="hljs-number">0x00007f41c035c000</span>)<br>    libc.so<span class="hljs-number">.6</span> =&gt; /lib64/libc.so<span class="hljs-number">.6</span> (<span class="hljs-number">0x00007f41bff8e000</span>)<br>    /lib64/ld-linux-x86<span class="hljs-number">-64.</span>so<span class="hljs-number">.2</span> (<span class="hljs-number">0x00007f41c0b7c000</span>)<br></code></pre></td></tr></table></figure><p>链接静态库</p><p><code>TARGET_LINK_LIBRARIES(main libhello.a)</code></p><h3 id="特殊的环境变量-CMAKE-INCLUDE-PATH-和-CMAKE-LIBRARY-PATH"><a href="#特殊的环境变量-CMAKE-INCLUDE-PATH-和-CMAKE-LIBRARY-PATH" class="headerlink" title="特殊的环境变量 CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH"></a>特殊的环境变量 CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH</h3><p>注意：这两个是环境变量而不是 cmake 变量，可以在linux的bash中进行设置</p><p>我们上面例子中使用了绝对路径INCLUDE_DIRECTORIES(&#x2F;usr&#x2F;include&#x2F;hello)来指明include路径的位置</p><p>我们还可以使用另外一种方式，使用环境变量export CMAKE_INCLUDE_PATH&#x3D;&#x2F;usr&#x2F;include&#x2F;hello</p><p>补充：生产debug版本的方法：<br>cmake .. -DCMAKE_BUILD_TYPE&#x3D;debug</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极客wp</title>
    <link href="/2023/12/18/%E6%9E%81%E5%AE%A2wp-1/"/>
    <url>/2023/12/18/%E6%9E%81%E5%AE%A2wp-1/</url>
    
    <content type="html"><![CDATA[<h1 id="极客wp"><a href="#极客wp" class="headerlink" title="极客wp"></a>极客wp</h1><h4 id="点击就送的逆向题"><a href="#点击就送的逆向题" class="headerlink" title="点击就送的逆向题"></a>点击就送的逆向题</h4><p>发现文件后缀名是.s</p><p>gcc命令其实依次执行了四步操作：</p><p>1.预处理(Preprocessing)</p><p>2.编译(Compilation),</p><p>3.汇编(Assemble),</p><p>4.链接(Linking)。</p><p><a href="https://zhuanlan.zhihu.com/p/111500914">GCC编译过程（预处理-&gt;编译-&gt;汇编-&gt;链接） - 知乎 (zhihu.com)</a></p><p>通过上述内容发现还需要先将汇编代码.s变成机器码.o，生成目标文件</p><p>在虚拟机里面进行</p><p><a href="https://www.imagehub.cc/image/1xzw0z"><img src="https://s1.imagehub.cc/images/2023/11/27/a2d5158a58c6d18755b59e46bbe6103a.png" alt="a2d5158a58c6d18755b59e46bbe6103a.png"></a></p><p>然后把得到的目标文件拖64IDA里面，观察逻辑发现处理后得到的s1和s2相等，再推回去即可</p><p><a href="https://www.imagehub.cc/image/1xze8j"><img src="https://s1.imagehub.cc/images/2023/11/27/90d0a9715d3dcdee04498c8f5d208a9c.png" alt="90d0a9715d3dcdee04498c8f5d208a9c.png"></a></p><p><a href="https://www.imagehub.cc/image/1xz6PR"><img src="https://s1.imagehub.cc/images/2023/11/27/9b657dac96012ce3b07e77690e1c8cb3.png" alt="9b657dac96012ce3b07e77690e1c8cb3.png"></a></p><h4 id="幸运数字"><a href="#幸运数字" class="headerlink" title="幸运数字"></a>幸运数字</h4><p>拖进DIE发现是PE64，搞64位IDA里面去</p><p><a href="https://www.imagehub.cc/image/1xmtHv"><img src="https://s1.imagehub.cc/images/2023/11/27/a74a56791c4338fff2860ffa5d5752db.md.png" alt="a74a56791c4338fff2860ffa5d5752db.md.png"></a></p><p><a href="https://www.imagehub.cc/image/1xmxot"><img src="https://s1.imagehub.cc/images/2023/11/27/8bc3d63e470aeb29d7976619d0623346.png" alt="8bc3d63e470aeb29d7976619d0623346.png"></a></p><p>由上面二图可知，对&amp;Format,&amp;Buffer,&amp;byte_40401C点进去a一下得下图，cmp_data存的是ascii，所以注意46行存储数据的处理，转换成对应的ascii，这个地方刚好只存了5个字符到数组中，得到对应的数据为111, 57, 54, 42, 35</p><p><a href="https://www.imagehub.cc/image/1xmEbS"><img src="https://s1.imagehub.cc/images/2023/11/27/76bf846c9319db536c7d48e43060a9aa.png" alt="76bf846c9319db536c7d48e43060a9aa.png"></a></p><p><a href="https://www.imagehub.cc/image/1xmGEL"><img src="https://s1.imagehub.cc/images/2023/11/27/cc3329e3d5dcaaac28b90f185d59a2ab.md.png" alt="cc3329e3d5dcaaac28b90f185d59a2ab.md.png"  /></a></p><p>对v5进行处理，发现是个递归，k在0-999，则取k&#x3D;0，此时返回值为result(-1)+0;取不到result(-1)，因为k为unsigned，</p><p>所以k&#x3D;0时返回值为0；</p><p>取k&#x3D;1，返回值为1</p><p>取k&#x3D;2，返回值为1+2</p><p>…………</p><p>故v5 &#x3D; (1+k)*k&#x2F;2</p><p><a href="https://www.imagehub.cc/image/1xmPvB"><img src="https://s1.imagehub.cc/images/2023/11/27/587e59f04c3844ae08f84141af5a07e2.png" alt="587e59f04c3844ae08f84141af5a07e2.png"></a></p><p>取余记得用 int 取整</p><p>防止数据超出ascii码表值，所以&amp;0xFF,取低八位或者直接%256</p><p><a href="https://www.imagehub.cc/image/1xmRSq"><img src="https://s1.imagehub.cc/images/2023/11/27/1b6cbeb5cb83824acd5b16c483c5bfdc.md.png" alt="1b6cbeb5cb83824acd5b16c483c5bfdc.md.png"></a></p><p>最后记得对输出的字符串进行筛选……</p><h4 id="shiftjmp"><a href="#shiftjmp" class="headerlink" title="shiftjmp"></a>shiftjmp</h4><p><a href="https://imgse.com/i/piBJS1O"><img src="https://z1.ax1x.com/2023/11/27/piBJS1O.md.png" alt="piBJS1O.md.png"></a></p><p>进到main函数里面以后发现无法生成反汇编代码</p><p>汇编跳转指令有问题</p><p>因为jz前为rax和rax的异或 值为0</p><p>所以执行jz后的指令 跳转到 loc_117A+1，为117B</p><p>发现中间地址被折叠了</p><p>所以对着117A地址D一下，得到下图</p><p><a href="https://imgse.com/i/piBJPnH"><img src="https://z1.ax1x.com/2023/11/27/piBJPnH.md.png" alt="piBJPnH.md.png"></a></p><p><a href="https://imgse.com/i/piBJV4P"><img src="https://z1.ax1x.com/2023/11/27/piBJV4P.png" alt="piBJV4P.png"></a></p><p>指令地址不连续，把0E9h在下方按F2改成0x90，空指令对应机器码，nop，地址连续，然后选中p一下</p><p>就可以生成反汇编代码了</p><p><a href="https://imgse.com/i/piBJe9f"><img src="https://z1.ax1x.com/2023/11/27/piBJe9f.md.jpg" alt="piBJe9f.md.jpg"></a></p><p>逻辑可知得到0，异或回去</p><p>注意把rodata字符串转换成ASCII形式就可以了</p><p><a href="https://imgse.com/i/piBJMuQ"><img src="https://z1.ax1x.com/2023/11/27/piBJMuQ.png" alt="piBJMuQ.png"></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/18/hello-world/"/>
    <url>/2023/12/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
